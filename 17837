The None$.class of scala 2.9.2 had a readResolve()-method. The None$.class of scala 2.10 doesn't include readResolve() anymore.

the problem:
Java de-serialization creates (and uses) a new instance of None$. This new instance results in pattern matching errors because pattern matching uses None$.MODULE$.equals() so Object.equals() returns false (None does not overwrite equals()).

{code:title=scala 2.9.2}
>javap None\$
Compiled from "Option.scala"
public final class scala.None$ extends scala.Option<scala.runtime.Nothing$> implements scala.ScalaObject, scala.Product, scala.Serializable {
  public static final scala.None$ MODULE$;
  public static {};
  public boolean isEmpty();
  public scala.runtime.Nothing$ get();
  public final int hashCode();
  public final java.lang.String toString();
  public java.lang.String productPrefix();
  public int productArity();
  public java.lang.Object productElement(int);
  public boolean canEqual(java.lang.Object);
  public java.lang.Object readResolve();
  public java.lang.Object get();
}
{code}

{code:title=scala 2.10}
>javap None\$
Compiled from "Option.scala"
public final class scala.None$ extends scala.Option<scala.runtime.Nothing$> implements scala.Product, scala.Serializable {
  public static final scala.None$ MODULE$;
  public static {};
  public boolean isEmpty();
  public scala.runtime.Nothing$ get();
  public java.lang.String productPrefix();
  public int productArity();
  public java.lang.Object productElement(int);
  public scala.collection.Iterator<java.lang.Object> productIterator();
  public boolean canEqual(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.Object get();
}
{code}
