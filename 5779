Shorter example :) 

{code}
scala> trait C { def wait (): Unit }
defined trait C

scala> new C {}
Exception in thread "main" java.lang.VerifyError: class line0$$object$$$$iw$$$$iw$$C overrides final method wait.()V
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)
        . . . 
{code}

That happens because an overriding implementation (?) was provided for a final method (but where?). 

It's also strange that a similar example doesn't raise that exception: 

{code}
scala> trait MyCalendarTrait extends java.util.GregorianCalendar {
  def getGregorianChange : java.util.Date // a public final method in the non-final superclass
}
defined trait MyCalendarTrait

scala> new MyCalendarTrait {}
res0: java.util.GregorianCalendar with MyCalendarTrait = $$anon$$1[time=1301924987396,areFieldsSet=true,areAllFieldsSet=true
ansitions=143,lastRule=java.util.SimpleTimeZone[id=Europe/Berlin,offset=3600000,dstSavings=3600000,useDaylight=true,startY
Day=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2011,MONTH=3,WE
F_DAY=15,MINUTE=49,SECOND=47,MILLISECOND=396,ZONE_OFFSET=3600000,DST_OFFSET=3...
scala>

scala> res0.getGregorianChange
res1: java.util.Date = Fri Oct 15 01:00:00 CET 1582
{code}

See? In 

{code}
new MyCalendarTrait {}
{code}

I'm also giving no implementation for method getGregorianChange().
