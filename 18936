Even after the fix to SI-6447, there are bugs in type substitution for macros. But to trigger this variant, you need to access type members of value members.

Substitution fails on {{X.this.v.T}}, and one can see that [SigmaTypeMap|https://github.com/scala/scala/blob/fabc9f1424824975943241b9bb2c9b7669f805bd/src/compiler/scala/reflect/macros/compiler/Validators.scala#L172] is too restrictive to handle that — instead of having the logic into non-recursive mapPrefix (only applied to prefixes), that logic should IMHO be in apply (at least looking at this example).

Concretely, {{X.this.v.T}} seems to become
TypeRef(SingleType(ThisType(TypeName("X")), TermName("v")), TypeName("T"), List()) at that point, and mapPrefix won't handle a ThisType nested inside a SingleType. (IOW, that code is not compositional enough). See transcript at the end.

On the other hand, I'm also not sure why there must be a difference between TypeRef and Select.

(BTW, [the discussion for SI-6447|https://github.com/paulp/scala/commit/9ad98963d092d91ca3da6dc7fcc935c386f49a74#commitcomment-1923895] suggests that the substitution to compute the macro shape should use SubstMap, but it seems this has not yet been done. However, I can't say this wouldn't have helped here.)

I would also argue that this is a blocker because a fix would break one current workaround — in fact, it would break code which would silently compile — see X1 below. Please correct me if that's too hasty (impact is in fact somewhat low, as this is hard to trigger).

{code}
import scala.reflect.macros.Context
import scala.language.experimental.macros

//Works

class X0 {
  type T
  def m(t: T): T = macro TestMacros0.foo
}

object TestMacros0 {
  def foo(c: Context { type PrefixType = X0 })(t: c.Expr[c.prefix.value.T]): c.Expr[c.prefix.value.T] = ???
}

//Does not work, can be worked around:
class Y1 {
  type T
}

object X1 {
  val v: Y1 = ???
  import v._
  def m(t: T): T = macro foo
  //Correct version:
  def foo(c: Context { type PrefixType = X1.type })(t: c.Expr[c.prefix.value.v.T]): c.Expr[c.prefix.value.v.T] = ???
  //Buggy workaround.
  //def foo(c: Context { type PrefixType = X1.type })(t: c.Expr[T]): c.Expr[T] = ???
}

//A better workaround.
object OtherX1 {
  val v: Y1 = ???
  type T = v.T
  def m(t: T): T = macro foo
  def foo(c: Context { type PrefixType = OtherX1.type })(t: c.Expr[c.prefix.value.T]): c.Expr[c.prefix.value.T] = ???
}

//Can't be fixed with the same trick.

class Y {
  type T
}
class X(val v: Y) {
  import v._
  def m(t: T): T = macro TestMacros.foo
}

object TestMacros {
  def foo(c: Context { type PrefixType = X })(t: c.Expr[c.prefix.value.v.T]): c.Expr[c.prefix.value.v.T] = ???
}
{code}

Errors:
{code}
[error] /Users/pgiarrusso/Documents/Research/Sorgenti/hoas-with-names/macros/foo.scala:22: macro implementation has incompatible shape:
[error]  required: (c: scala.reflect.macros.whitebox.Context)(t: c.Expr[X1.v.T]): c.Expr[X1.v.T]
[error]  or      : (c: scala.reflect.macros.whitebox.Context)(t: c.Tree): c.Tree
[error]  found   : (c: reflect.macros.Context{type PrefixType = X1.type})(t: c.Expr[c.prefix.value.v.T]): c.Expr[c.prefix.value.v.T]
[error] type mismatch for parameter t: c.Expr[X1.v.T] does not conform to c.Expr[c.prefix.value.v.T]
[error]   def m(t: T): T = macro foo
[error]                          ^
[error] /Users/pgiarrusso/Documents/Research/Sorgenti/hoas-with-names/macros/foo.scala:44: macro implementation has incompatible shape:
[error]  required: (c: scala.reflect.macros.whitebox.Context)(t: c.Expr[X.this.v.T]): c.Expr[X.this.v.T]
[error]  or      : (c: scala.reflect.macros.whitebox.Context)(t: c.Tree): c.Tree
[error]  found   : (c: reflect.macros.Context{type PrefixType = X})(t: c.Expr[c.prefix.value.v.T]): c.Expr[c.prefix.value.v.T]
[error] type mismatch for parameter t: c.Expr[X.this.v.T] does not conform to c.Expr[c.prefix.value.v.T]
[error]   def m(t: T): T = macro TestMacros.foo
[error]                                     ^
{code}

To see what X.this.v.T becomes, I did the following — look at type {{\[29]}} at the end of the transcript.

{code}
scala> import scala.reflect.runtime.universe._
import scala.reflect.runtime.universe._

scala> import scala.tools.reflect._
import scala.tools.reflect._

scala> val tb = runtimeMirror(getClass.getClassLoader).mkToolBox()
tb: scala.tools.reflect.ToolBox[reflect.runtime.universe.type] = scala.tools.reflect.ToolBoxFactory$ToolBoxImpl@5ce9bf89

scala> val t = tb.typecheck(q"class Y {type T}; class X(val v: Y) { type U = X.this.v.T }")
t: tb.u.Tree =
{
  class Y extends scala.AnyRef {
    def <init>(): Y = {
      Y.super.<init>();
      ()
    };
    type T
  };
  class X extends scala.AnyRef {
    <paramaccessor> private[this] val v: Y = _;
    <stable> <accessor> <paramaccessor> def v: Y = X.this.v;
    def <init>(v: Y): X = {
      X.super.<init>();
      ()
    };
    type U = X.this.v.T
  };
  ()
}

scala> println(showRaw(t, printTypes = true))
Block[1](List(ClassDef[2](Modifiers(), TypeName("Y"), List(), Template[24](List(Select[4](Ident[5](scala), TypeName("AnyRef"))), noSelfType, List(DefDef[2](Modifiers(), termNames.CONSTRUCTOR, List(), List(List()), TypeTree[24](), Block[1](List(Apply[6](Select[7](Super[25](This[24](TypeName("Y")), typeNames.EMPTY), termNames.CONSTRUCTOR), List())), Literal[1](Constant(())))), TypeDef[2](Modifiers(DEFERRED), TypeName("T"), List(), TypeTree[9]().setOriginal(TypeBoundsTree[9](TypeTree[10](), TypeTree[11]())))))), ClassDef[2](Modifiers(), TypeName("X"), List(), Template[26](List(Select[4](Ident[5](scala), TypeName("AnyRef"))), noSelfType, List(ValDef[2](Modifiers(PRIVATE | LOCAL | PARAMACCESSOR), TermName("v "), TypeTree[24]().setOriginal(Ident[24](TypeName("Y"))), EmptyTree), DefDef[2](Modifiers(METHOD | STABLE | ACCESSOR | PARAMACCESSOR), TermName("v"), List(), List(), TypeTree[24](), Select[24](This[27](TypeName("X")), TermName("v "))), DefDef[2](Modifiers(), termNames.CONSTRUCTOR, List(), List(List(ValDef[2](Modifiers(PARAM | PARAMACCESSOR), TermName("v"), TypeTree[24]().setOriginal(Ident[24](TypeName("Y"))), EmptyTree))), TypeTree[26](), Block[1](List(Apply[6](Select[7](Super[28](This[26](TypeName("X")), typeNames.EMPTY), termNames.CONSTRUCTOR), List())), Literal[1](Constant(())))), TypeDef[2](Modifiers(), TypeName("U"), List(), TypeTree[29]().setOriginal(Select[29](Select[30](This[27](TypeName("X")), TermName("v")), TypeName("T")))))))), Literal[1](Constant(())))
[1] TypeRef(ThisType(scala), scala.Unit, List())
[2] NoType
[4] TypeRef(ThisType(scala), TypeName("AnyRef"), List())
[5] SingleType(ThisType(<root>), scala)
[6] TypeRef(ThisType(java.lang), java.lang.Object, List())
[7] MethodType(List(), TypeRef(ThisType(java.lang), java.lang.Object, List()))
[9] TypeBounds(TypeRef(ThisType(scala), scala.Nothing, List()), TypeRef(ThisType(scala), scala.Any, List()))
[10] TypeRef(ThisType(scala), scala.Nothing, List())
[11] TypeRef(ThisType(scala), scala.Any, List())
[24] TypeRef(NoPrefix, TypeName("Y"), List())
[25] SuperType(ThisType(TypeName("Y")), TypeRef(ThisType(scala), TypeName("AnyRef"), List()))
[26] TypeRef(NoPrefix, TypeName("X"), List())
[27] ThisType(TypeName("X"))
[28] SuperType(ThisType(TypeName("X")), TypeRef(ThisType(scala), TypeName("AnyRef"), List()))
[29] TypeRef(SingleType(ThisType(TypeName("X")), TermName("v")), TypeName("T"), List())
[30] SingleType(ThisType(TypeName("X")), TermName("v"))
{code}
