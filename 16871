The error messages related to inheritance are generally pretty decent, if arguments are the same:
```scala
trait A { def foo: Int }
trait B extends A { override def foo: String }

<console>:8: error: overriding method foo in trait A of type => Int;
 method foo has incompatible type
       trait B extends A { override def foo: String }
                                        ^
```


But if arguments differ, the error message is not very helpful:
```scala
trait A { def foo(i: Int): Int }
trait B extends A { override def foo(s: String): Int }

<console>:8: error: method foo overrides nothing
       trait B extends A { override def foo(s: String): Int }
                                        ^
```

It would be nice if in case of an error, the compiler would check if there is a signature with the same name, but different arguments.

The code in questions is here: https://github.com/scala/scala/blob/master/src/compiler/scala/tools/nsc/typechecker/RefChecks.scala#L756

As far as I know Paul has some code implementing Levenshtein difference, so maybe it could even check for similar names (for typos)?
E. g. something like `hasSimilarName(inclazz: Symbol, member: Symbol, levenshteinDifference: Int = 0)`

