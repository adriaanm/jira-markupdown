Example below shows the problem:

{code}
trait SomeTag
type @@[+A, T] = A with T
def withSomeTag[A](a: A): A @@ SomeTag  = a.asInstanceOf[A @@ SomeTag]
// def need(a: String @@ SomeTag) = ??? // <- it works
// but this not:
type TypeAlias = String @@ SomeTag
def need(a: TypeAlias) = ???
need(withSomeTag("foo"))
{code}

Causes:
{code}
<console>:13: error: type mismatch;
 found   : String("foo")
 required: SomeTag with String
              need(withSomeTag("foo"))
{code}

Changing parameter's type to unaliased version works fine.
Because of this bug, using of scalaz.Tag / shapeless.tag.Tagged is difficult.
