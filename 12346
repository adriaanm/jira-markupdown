Workaround (with long syntax--could skip the `meets` and just have `def ensure[A](f: => A)(p: A => Boolean): A`
```scala
class EnsureSyntax[A](private val underlying: () => A) extends AnyVal {
  def meets(p: A => Boolean): A =
    try {
      underlying() match {
        case x if p(x) => x
        case y         => throw new Exception("Ensuring condition failed")
      }
    }
    catch {
      case ct: scala.util.control.ControlThrowable =>
        throw new Exception("Non-local escape from ensure block")
    }
}

def ensure[A](f: =>A): EnsureSyntax[A] = new EnsureSyntax(() => f)
```

In action:
```scala

scala> def foo: Int = ensure { return 4; 4 } meets { _ == 5 }
foo: Int

scala> foo
java.lang.Exception: Non-local escape from ensure block
  at EnsureSyntax$.meets$extension(<console>:20)
  at .foo(<console>:13)
  ... 33 elided
```
