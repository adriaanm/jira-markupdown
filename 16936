Sending a message to a remote actor which cannot be deserialized fails with no exception appearing in stdout or stderr. In the attached files, if you do the following:

 # compile message.scala under 2.9.1
 # compile and run server.scala under 2.9.1
 # compile and run Client.scala under 2.9.2

You will see that nothing is printed to either stdout or stderr. What is happening is that the serialized form of the {{case object}} message which is being sent by the client has a different {{serialVersionUID}} as that on the server (see [https://issues.scala-lang.org/browse/SI-5697]). This exception should not be swallowed.

{code}
package client

object Client extends App {

  val peer = actors.remote.Node("localhost", 23456)
  val a = actors.remote.RemoteActor.select(peer, 'test)
  a ! common.TestMsg
}
{code}


{code}
package common

case object TestMsg
{code}


{code}
package server

object Server extends App {
  class ServerActor extends actors.Actor {
    def act() {
      actors.remote.RemoteActor.alive(23456)
      actors.remote.RemoteActor.register('test, actors.Actor.self)
      loop {
        react {
          case common.TestMsg => println("Yay!")
        }
      }
    }
  }
  val a = new ServerActor
  a.start()
}
{code}
