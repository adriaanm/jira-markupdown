I would be pleased if this did not warn me about X2, which can appear in no types beyond X1.  (Contrast with X3, which it does not warn about due to its being sealed.)
{code}
trait A {
  sealed abstract class X
  private class X1 extends X with X2 { }
  private trait X2 extends X
  sealed trait X3 extends X

  def f(x: X) = x match {
    case _: X1 => 0
  }
}
{code}
