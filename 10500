I'd probably go for a term alias to go with `IndexableType`. Sure, it's not such a big change, but you sound like a camel with a lot of straws on your back at the moment, so maybe removing one little one might help.
```scala
package p {
  trait Indexed[A]
  trait Indexable[Repr] { type A }
  object Indexable {
    implicit def indexedIsIndexable[A0] : IndexableType[Indexed[A0], A0] = IndexableType[Indexed[A0], A0]
  }
 
  object IndexedView {
    def apply[Coll](repr: Coll)(implicit tc: Indexable[Coll]): IndexedView[Coll, tc.A] = new IndexedView[Coll, tc.A](repr)(tc)
  }
  final class IndexedView[Coll, A](val repr: Coll)(implicit val tc: IndexableType[Coll, A]) {
    final def map[B](f: A => B): IndexedView[Coll, B] = ???
    final def force: Indexed[A] = ???
  }
 
  class Foo {
    def bufferAt(i: Int): String  = ???
    def indices: Indexed[Int]     = ???
    def contents: Indexed[String] = indices map bufferAt force
  }
}
 
package object p {
  implicit def liftIndexedView[Coll](repr: Coll)(implicit tc: Indexable[Coll]): IndexedView[Coll, tc.A] = IndexedView(repr)
 
  type IndexableType[Repr, A0] = Indexable[Repr] { type A = A0 }
  def IndexableType[Repr, A0]: IndexableType[Repr, A0] = new Indexable[Repr] { type A = A0 }
}
```

