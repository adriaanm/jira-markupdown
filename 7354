Ah, I see the problem. It requires a tid-bit of explaining, so bear with me.
```
Why is the [Scaladoc for collection.immutable.Range|http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range] saying there is def map [B] (f: (Int) â‡’ B): Range[B] if there isn't?
```

This is because in Scala 2.8, we introduced "use cases" in Scaladoc. The new collections library also arrived in 2.8, and with it came new complicated type signatures of many basic collection types. So, use cases were introduced to simplify type signatures-- the idea is that people should, in general, see the simplified type signature first (which should contain the minimum one needs to be able to quickly glance at the API and understand how to use some method), and if interested, should be able to see the full type signature if desired.

The trouble here is that you're specifying the type parameters shown in signature displayed in the use case. 

In general, when specifying type parameters, you've got to either specify all type parameters, or none. Otherwise the compiler looks for a variation of `map` with a different number of type parameters that doesn't exist.

So, in general, when you come across a use case, you've got two options:

- Specify no type parameters (they will be inferred), this will work: `(0 until 3).map(_.toByte)`
- Specify all type parameters, this will work: {noformat}(0 until 3).map[Byte,IndexedSeq[Byte]](_.toByte){noformat}

What seems to have happened here is that (a) you would like to specify type parameters here, and (b) you were lead to believe that there was only one type parameter on `map` because that's what the Scaladoc use case displays. 

So, yes, I agree that it's a problem. While people often tend to rely on type inference, people who don't can easily be misinformed by use cases as they are. 

What I can do is add a *What is a use case?* link to use cases, which explain a bit clearer this requirement with the signatures.
