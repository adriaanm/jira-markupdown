With -Ytyper-debug (look for {{bippy}}):
{code}
$ scalac -Ytyper-debug Bug.scala
|-- <empty> EXPRmode-POLYmode-QUALmode (site: package <root>)
|    \-> <empty>.type
|-- object Bug BYVALmode-EXPRmode (site: package <empty>)
|    |-- Nothing TYPEmode (site: value ???  in Bug)
|    |    \-> Nothing
|    |-- Nothing TYPEmode (site: value ???  in Bug)
|    |    \-> Nothing
|    |-- super EXPRmode-POLYmode-QUALmode (silent: <init> in Bug)
|    |    |-- this EXPRmode (silent: <init> in Bug)
|    |    |    \-> Bug.type
|    |    \-> Bug.type
|    |-- $eq$qmark$greater$colon[A, B]PartialFunction[A, B] BYVALmode-EXPRmode (site: object Bug)
|    |    |-- PartialFunction[A, B] TYPEmode (site: type =?>: in Bug)
|    |    |    |-- A TYPEmode (site: type =?>: in Bug)
|    |    |    |    \-> A
|    |    |    |-- B TYPEmode (site: type =?>: in Bug)
|    |    |    |    \-> B
|    |    |    \-> PartialFunction[A,B]
|    |    |-- PartialFunction[A, B] TYPEmode (site: type =?>: in Bug)
|    |    |    \-> PartialFunction[A,B]
|    |    \-> [type $eq$qmark$greater$colon] Bug.=?>:[A,B]
|    |-- Nothing BYVALmode-EXPRmode (site: object Bug)
|    |    |-- Nothing TYPEmode (site: value ???  in Bug)
|    |    |    \-> Nothing
|    |    |-- throw new Exception() : pt=Nothing BYVALmode-EXPRmode (site: value ???  in Bug)
|    |    |    |-- new Exception() : pt=Throwable BYVALmode-EXPRmode (site: value ???  in Bug)
|    |    |    |    |-- new Exception BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value ???  in Bug)
|    |    |    |    |    |-- new Exception EXPRmode-POLYmode-QUALmode (silent: value ???  in Bug)
|    |    |    |    |    |    |-- Exception FUNmode-TYPEmode (silent: value ???  in Bug)
|    |    |    |    |    |    |    |-- scala.`package` EXPRmode-POLYmode-QUALmode (silent: value ???  in Bug)
|    |    |    |    |    |    |    |    \-> scala.type
|    |    |    |    |    |    |    \-> Exception
|    |    |    |    |    |    \-> Exception
|    |    |    |    |    \-> (x$1: Throwable)Exception <and> (x$1: String, x$2: Throwable)Exception <and> (x$1: String)Exception <and> ()Exception
|    |    |    |    \-> Exception
|    |    |    \-> Nothing
|    |    \-> [val $qmark$qmark$qmark ] Nothing
|    |-- def $qmark$qmark$qmark BYVALmode-EXPRmode (site: object Bug)
|    |    |-- Nothing : pt=Nothing EXPRmode (site: value ??? in Bug)
|    |    |    |-- Bug.type EXPRmode-POLYmode-QUALmode (site: value ??? in Bug)
|    |    |    |    \-> Bug.type
|    |    |    \-> Bug.???.type (with underlying type Nothing)
|    |    \-> [def $qmark$qmark$qmark] => Nothing
|    |-- def or[T, U] BYVALmode-EXPRmode (site: object Bug)
|    |    |-- _root_.scala.Function1[T, U] TYPEmode (site: method or in Bug)
|    |    |    |-- T TYPEmode (site: method or in Bug)
|    |    |    |    \-> T
|    |    |    |-- U TYPEmode (site: method or in Bug)
|    |    |    |    \-> U
|    |    |    \-> T => U
|    |    |-- $eq$qmark$greater$colon[T, U] TYPEmode (site: value f in Bug)
|    |    |    |-- T TYPEmode (site: value f in Bug)
|    |    |    |    \-> T
|    |    |    |-- U TYPEmode (site: value f in Bug)
|    |    |    |    \-> U
|    |    |    \-> Bug.=?>:[T,U]
|    |    |-- _root_.scala.Function1[T, U] TYPEmode (site: value g in Bug)
|    |    |    |-- T TYPEmode (site: value g in Bug)
|    |    |    |    \-> T
|    |    |    |-- U TYPEmode (site: value g in Bug)
|    |    |    |    \-> U
|    |    |    \-> T => U
|    |    |-- $eq$qmark$greater$colon[T, U] TYPEmode (site: value f in Bug)
|    |    |    \-> Bug.=?>:[T,U]
|    |    |-- _root_.scala.Function1[T, U] TYPEmode (site: value g in Bug)
|    |    |    \-> T => U
|    |    |-- _root_.scala.Function1[T, U] TYPEmode (site: method or in Bug)
|    |    |    \-> T => U
|    |    |-- $qmark$qmark$qmark : pt=T => U EXPRmode (site: method or in Bug)
|    |    |    \-> Nothing
|    |    \-> [def or] [T, U](f: Bug.=?>:[T,U])(g: T => U)T => U
|    |-- def bar BYVALmode-EXPRmode (site: object Bug)
|    |    |-- $eq$qmark$greater$colon[String, String] TYPEmode (site: method bar in Bug)
|    |    |    |-- String TYPEmode (site: method bar in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    |-- String TYPEmode (site: method bar in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    \-> Bug.=?>:[String,String]
|    |    |-- $eq$qmark$greater$colon[String, String] TYPEmode (site: method bar in Bug)
|    |    |    |-- String TYPEmode (site: method bar in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    |-- String TYPEmode (site: method bar in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    \-> Bug.=?>:[String,String]
|    |    |-- $qmark$qmark$qmark : pt=Bug.=?>:[String,String] EXPRmode (site: method bar in Bug)
|    |    |    \-> Nothing
|    |    \-> [def bar] => Bug.=?>:[String,String]
|    |-- def foo BYVALmode-EXPRmode (site: object Bug)
|    |    |-- _root_.scala.Function1[String, String] TYPEmode (site: method foo in Bug)
|    |    |    |-- String TYPEmode (site: method foo in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    |-- String TYPEmode (site: method foo in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    \-> String => String
|    |    |-- _root_.scala.Function1[String, String] TYPEmode (site: method foo in Bug)
|    |    |    |-- String TYPEmode (site: method foo in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    |-- String TYPEmode (site: method foo in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    \-> String => String
|    |    |-- $qmark$qmark$qmark : pt=String => String EXPRmode (site: method foo in Bug)
|    |    |    \-> Nothing
|    |    \-> [def foo] => String => String
|    |-- def bippy BYVALmode-EXPRmode (site: object Bug)
|    |    |-- _root_.scala.Function1[String, String] TYPEmode (site: method bippy in Bug)
|    |    |    |-- String TYPEmode (site: method bippy in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    |-- String TYPEmode (site: method bippy in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    \-> String => String
|    |    |-- _root_.scala.Function1[String, String] TYPEmode (site: method bippy in Bug)
|    |    |    |-- String TYPEmode (site: method bippy in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    |-- String TYPEmode (site: method bippy in Bug)
|    |    |    |    [adapt] String is now a TypeTree(String)
|    |    |    |    \-> String
|    |    |    \-> String => String
|    |    |-- or(bar.orElse(bar))(foo) : pt=String => String EXPRmode (site: method bippy in Bug)
|    |    |    |-- or(bar.orElse(bar)) BYVALmode-EXPRmode-FUNmode-POLYmode (silent: method bippy in Bug)
|    |    |    |    |-- or BYVALmode-EXPRmode-FUNmode-POLYmode (silent: method bippy in Bug)
|    |    |    |    |    [adapt] [T, U](f: Bug.=?>:[T,U])(g: T => U)T => U adapted to [T, U](f: Bug.=?>:[T,U])(g: T => U)T => U
|    |    |    |    |    \-> (f: Bug.=?>:[T,U])(g: T => U)T => U
|    |    |    |    |-- bar.orElse(bar) : pt=Bug.=?>:[?,?] BYVALmode-EXPRmode-POLYmode (silent: method bippy in Bug)
|    |    |    |    |    |-- bar.orElse BYVALmode-EXPRmode-FUNmode-POLYmode (silent: method bippy in Bug)
|    |    |    |    |    |    |-- bar EXPRmode-POLYmode-QUALmode (silent: method bippy in Bug)
|    |    |    |    |    |    |    \-> Bug.=?>:[String,String]
|    |    |    |    |    |    [adapt] [A1 <: A, B1 >: B](that: PartialFunction[A1,B1])PartialFu... adapted to [A1 <: A, B1 >: B](that: PartialFunction[A1,B1])PartialFu...
|    |    |    |    |    |    \-> (that: PartialFunction[A1,B1])PartialFunction[A1,B1]
|    |    |    |    |    |-- bar : pt=PartialFunction[?,?] BYVALmode-EXPRmode-POLYmode (silent: method bippy in Bug)
|    |    |    |    |    |    \-> Bug.=?>:[String,String]
|    |    |    |    |    solving for (A1: ?A1, B1: ?B1)
|    |    |    |    |    \-> PartialFunction[String,String]
|    |    |    |    solving for (T: ?T, U: ?U)
|    |    |    |    \-> (g: T => String)T => String
Bug.scala:15: error: type mismatch;
 found   : PartialFunction[String,String]
 required: Bug.=?>:[T,String]
    (which expands to)  PartialFunction[T,String]
    or(bar orElse bar)(foo)
           ^
|    |    |    |-- foo : pt=<error> EXPRmode (site solving: type T: method bippy in Bug)
|    |    |    |    solving for (T: ?T)
|    |    |    |    \-> String => String
|    |    |    \-> <error>
|    |    \-> [def bippy] => String => String
|    \-> [object Bug] Bug.type
one error found
{code}
