Here's one possibility. Considering section 6.25.5, in the result of eta-conversion, change:
```scala
{ val x1 = e1;
  ...
  val xm = em;
  (y1:T1,...,yn:Tn) => e'(y1,...,yn)
}
```
with
```scala
{ val x1 = (() => e1);
  ...
  val xml = (() => em);
  ...
}
```
and in e', replace each ei by xi() rather than xi.

This has the effect of explicitly thunking each parameter, and then allowing the usual method call compilation to determine whether or not to unthunk them at call time.

If it is possible at expansion-time to inspect the type of the target method and determine which ei are in "by-name position" or whatever you want to call it, then this explicit thunking can be performed only for by-name parameters, eliminating the unnecessary overhead in the common case.

Also, if there is some other way of declaring first-class "by-name values," that might be preferred to thunks. IIRC there is no way of doing so, but perhaps internally to the compiler there is some trick available.

What do you think? I may try to have a go at implementing this, but it would be my first compiler change, so I won't make any promises. Also, if there is a better place to discuss this, please let me know.
