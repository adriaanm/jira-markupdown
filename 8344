Seems to be a problem with passing an anonymous function defined as a match without selector to a higher-order method that's called in the argument position of an overloaded method that's added to an object via an implicit conversion.

Work around: make the match's selector explicit as in comment in the minimal reproduction below:
```scala
abstract class C { 
  def overloaded(foo: String, bar: String): String
  def overloaded(foo: String, bar: String, baz: String): Unit
}

class ScalaCompilerKiller {
  implicit def CWrapper(c: C) = new {
    def overloaded(request: Any): Unit = {}
  }

  val sps = List[(String, String)]()

  // to repro, need: implicit conversion, overloading, pair in synthetic scrutinee in function passed to higher-order method
  (null: C).overloaded(sps.map(/*_ match*/ { case (r, _) => r }))
}
```
