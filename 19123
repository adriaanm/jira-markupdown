By-name thunks are often used for things like logging expressions, Option.fold(), and various other situations where an argument may well be completely ignored -- so as to avoid the extra computation. For instance:

{code}
def warn(s: => String) {
  println(s)
}
{code}

However, this always generates an anonymous function class, even when the expression is known by the compiler to be constant. Add enough of these (particularly debug logging), and an app can get pretty unwieldy in terms of anonymous class proliferation.

If the compiler is able to determine that the argument is indeed constant, or a variable that can be passed as-is without computation, it could collapse all such instances into a constant function helper class, for instance:

{code}
package scala.runtime
case class ConstantFunction0[T](apply: T) extends AbstractFunction0[T]
{code}

Then, rather than generate an anonymous function class consisting only of one load opcode for a constant field value, or a single final field, it could use the above class as-is.
