when compiling with the scalac option {{-Ywarn-numeric-widen}} we get the following odd warning if the expression is not made up of already evaluated numeric terms:

{noformat}
scala> trait Foo
defined trait Foo

scala> implicit class FooLong(l: Long) { def foo = new Foo {} }
defined class FooLong

scala>  def elapsed: Foo = (System.nanoTime - 100L).foo
elapsed: Foo

scala> implicit class FooDouble(d: Double) { def foo = new Foo {} }
defined class FooDouble

scala>  def elapsed: Foo = (System.nanoTime - 100L).foo
<console>:41: warning: implicit numeric widening
        def elapsed: Foo = (System.nanoTime - 100L).foo
                                            ^
elapsed: Foo

scala>  def elapsed: Foo = { val t = (System.nanoTime - 100L); t.foo }
elapsed: Foo
{noformat}

This last one shows that if the expression is assigned then Long is inferred and the typer doesn't complain. But the expression is clearly of the specific type Long, and the warning is unintuitive at best.

This originally came up with the following code:

{noformat}
import scala.concurrent.duration._

class Stopwatch(val start: Long = System.nanoTime) extends AnyVal {
  def elapsed: Duration = ((System.nanoTime - start) / 1000).micros
}
{noformat}
