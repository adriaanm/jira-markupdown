I noticed this problem when reading the !ArrayBuilder code.

If the following code is called when capacity is 0 and size > 16 then it will resize its underlying array twice. This results in an extra array creation, an operation which could be expensive for large sizes.
```scala
    private def ensureSize(size: Int) {
      if (capacity == 0) resize(16)
      if (capacity < size) {
        var newsize = capacity * 2
        while (newsize < size) newsize *= 2
        resize(newsize)
      } 
    }
```

A better implementation can be found in !WrappedArrayBuilder. This implementation will never perform more than one resize.
```scala
  private def ensureSize(size: Int) {
    if (capacity < size) {
      var newsize = if (capacity == 0) 16 else capacity * 2
      while (newsize < size) newsize *= 2
      resize(newsize)
    }
  } 
```
