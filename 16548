Using AnyVal tagged types and case classes leads to hard to understand error messages.

1. First example

{code}
trait Day
case class Test1(d: Int with Day)
{code}

The message is:

{code}
[error] ambiguous reference to overloaded definition,
[error] both method == in class Object of type (x$1: AnyRef)Boolean
[error] and  method == in class Int of type (x: Int)Boolean
[error] match argument types (Int with core.package.Day) and expected result type Boolean
[error]   case class Test1(d: Int with Day)
[error]              ^
{code}

2. Second example

{code}
trait Day
case class Test2(d1: Int with Day, d2: Int with Day)
{code}

The message is:

{code}
[error] C:\projects\calypso\healthcheck\src\main\scala\core\package.scala:21: type mismatch;
[error]  found   : Double
[error]  required: AnyRef
[error] Note: an implicit exists from scala.Double => java.lang.Double, but
[error] methods inherited from Object are rendered ambiguous.  This is to avoid
[error] a blanket implicit which would convert any scala.Double to any AnyRef.
[error] You may wish to use a type ascription: `x: java.lang.Double`.
[error]   case class Test2(d1: Int with Day, d2: Int with Day)
[error]              ^
{code}


