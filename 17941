This should work.
{code}
import scala.language.dynamics

class A extends Dynamic {
  def selectDynamic(method: String): B = new B(method)
}
class B(method: String) {
  def apply(args: Any*) = println("Called " + method)
}

object Test {
  def main(args: Array[String]): Unit = {
    val x = new A
    println(x.bippy("arg"))
  }
}
{code}
Instead, the compile fails:
{noformat}
% scalac3 ./a.scala 
./a.scala:13: error: value applyDynamic is not a member of A
error after rewriting to x.<applyDynamic: error>("bippy")
possible cause: maybe a wrong Dynamic method signature?
    println(x.bippy("arg"))
            ^
one error found
{noformat}
It does compile like this:
{noformat}
  println(x.bippy.apply("arg"))
{noformat}
But that renders it unsuitable for most plausible uses of Dynamic.

This is especially important because if this worked it would offer a way to achieve a more general form of overload than is currently possible.
