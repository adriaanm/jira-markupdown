Viktor, I had intended to summarize that conversation a year ago, so as you suggest to Daniel, I've reread it now, and I'd summarize the outcome as follows:

##### InterruptedException and ThreadDeath
These should be converted to an ExecutionException and propagated to the caller.[\[1\]|https://groups.google.com/d/msg/scala-internals/45ianF2rQYQ/p01xPZ3d8I8J][\[2\]|https://groups.google.com/d/msg/scala-internals/45ianF2rQYQ/p01xPZ3d8I8J].

It is sufficient to complete the promise with the exception to implement that behaviour[\[3\]|https://groups.google.com/d/msg/scala-internals/45ianF2rQYQ/dUDyD69gc6oJ].

##### ControlThrowables

These should be treated similarly to InterruptedException and ThreadDeath[\[4\]|https://groups.google.com/d/msg/scala-internals/45ianF2rQYQ/6Uief7tOMvwJ]. Completing the promise with them would also be sufficient to result in their being wrapped in an ExecutionException.

##### VirtualMachineErrors
There was a lot of debate about these, with Scott Carey, Rex Kerr, and I advocating to pass them on to the caller, and you advocating that they shouldn't be caught under any circumstance. The debate was ultimately unresolved, although the two of us would agree that it would be preferable to call sys.exit when VM errors leak out of a Future's execution, instead of the current behaviour.

I think another reasonable alternative would be to make another exception that is similar in meaning to ExecutionError, but that dierives from VirtualMachineError, and use this to unwind the stack on calling threads. If implemented properly, this should also cause applications to exit, but in a way that may be clearer to the user. Either solution would be preferable to the current situation, where programs can simply hang if there's a VirtualMachineError.

##### LinkageErrors

The discussion around these was incomplete. However, none of the reasoning around VirtualMachineError applies to LinkageErrors: there's no reason to believe that the JVM is compromized after a LinkageError is thrown, so the runtime is perfectly capable of catching these and propagating them to the caller. Additionally, I've carefully reviewed the discussion, and I see that there is an undisputed consense among users that the current behaviour is very confusing and unhelpful. If the current behaviour is undesirable, and there's no outstanding reason to keep the status quo, then I'd conclude that it should change.

I think these errors should be propagated into the Future's result, so the caller can see them, and I see nothing from that conversation to suggest that this isn't a good idea. If it's considered important to avoid wrapping them in a non-fatal exception, they can be wrapped in something like an "ExecutionLinkageError" (similar to what I propose for VirtualMachineErrors), which would make it less likely that the caller catches them without explicitly intending to.
