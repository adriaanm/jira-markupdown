When compiling code that contains non-exhaustive matches on case classes with multiple parameters like the test case below, the compiler uses excessive system resources. For the test case below, on my system {{scalac}} peaks to using over 2 GB of memory (when run with {{-J-Xmx4G}}) and does not finish compiling after running for 10 minutes. Adding a default case to make the match exhaustive or compiling with {{-Xno-patmat-analysis}} allows compilation to finish in reasonable time with compiler version 2.12.0, but was not necessary with version 2.11.8.

*Test case:*
{code}
case class C(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int)
object C {
	def bug(c: C): Int = c match {
		case C(0, 0, 0, 0, 0, 0) => 0
		case C(1, 1, 1, 1, 1, 1) => 1
		case C(2, 2, 2, 2, 2, 2) => 2
		case C(3, 3, 3, 3, 3, 3) => 3
		case C(4, 4, 4, 4, 4, 4) => 4
		case C(5, 5, 5, 5, 5, 5) => 5
		case C(6, 6, 6, 6, 6, 6) => 6
		case C(7, 7, 7, 7, 7, 7) => 7
		case C(8, 8, 8, 8, 8, 8) => 8
		case C(9, 9, 9, 9, 9, 9) => 9
	}
}
{code}
