The anon funs for these interpolators differ only in the case of the interpolator prefix or function name.
```scala
object StringContextTest {
  implicit class normalizer(private val sc: StringContext) extends AnyVal {
    def n(args: Any*): String = {
      sc.checkLengths(args)
      sc.parts.map(StringContext.normalize(_, strict = false)).zipAll(args, "", "").map(p => List(p._1, p._2)).flatten.mkString
    }
    def N(args: Any*): String = {
      sc.checkLengths(args)
      sc.parts.map(StringContext.normalize(_, strict = true)).zipAll(args, "", "").map(p => List(p._1, p._2)).flatten.mkString
    }
  }
}
```
with the warning
```scala
[scalacfork] /home/apm/projects/snytt/test/junit/scala/StringContextTest.scala:117: warning: Class scala.StringContextTest$normalizer$$anonfun$N$extension$2 differs only in case from scala.StringContextTest$normalizer$$anonfun$n$extension$2. Such classes will overwrite one another on case-insensitive filesystems.
[scalacfork]       sc.parts.map(StringContext.normalize(_, strict = true)).zipAll(args, "", "").map(p => List(p._1, p._2)).flatten.mkString
[scalacfork]                                                                                          ^
[scalacfork] /home/apm/projects/snytt/test/junit/scala/StringContextTest.scala:117: warning: Class scala.StringContextTest$normalizer$$anonfun$N$extension$1 differs only in case from scala.StringContextTest$normalizer$$anonfun$n$extension$1. Such classes will overwrite one another on case-insensitive filesystems.
[scalacfork]       sc.parts.map(StringContext.normalize(_, strict = true)).zipAll(args, "", "").map(p => List(p._1, p._2)).flatten.mkString
[scalacfork]                                           ^
```
