The problem is solved for the above case, but not if Component inherits Serializable from a Java interface extending Serializable:

Java-Marker:

{code}
package test;

import java.io.Serializable;

public interface Marker
    extends Serializable
{ 
}
{code}

Scala-Testcase (the above modified):

{code}
package test

@serializable
@SerialVersionUID(1L)
class VarModel[T]( getter: => T, setter: T => Unit )
{
  def this( getter: => T ) = this( getter, null )

  def getObject: AnyRef = getter.asInstanceOf[AnyRef]

  def setObject( v: AnyRef ) = {
    if( setter==null )
      throw new RuntimeException( "Tried to set readonly model!")
    setter( v.asInstanceOf[T] )
  }

  def detach = ()
}

@serializable
@SerialVersionUID(1L)
class Printer( p: VarModel[String] ) {
  def print = println( p.getObject );
}

class Component extends Marker { }

class Form extends Component { }

@serializable
@SerialVersionUID(1L)
class Test {
  var pass = "pass"

  def main(args : Array[String]) : Unit = {
    val f = new Form {
      val p = new Printer( new VarModel( pass, pass=_ ) );
      p.print
    }
    ()
  }
}
{code}

This compiles correctly with scala-2.7.1.r15574 
