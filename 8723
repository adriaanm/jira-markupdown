Offline the answer was yes, prefixes of bits.

Now we enter into tough design tradeoff territory. First obvious option is a generic PatriciaTrie[PrefixType, Key <: Prefixable[PrefixType]]. The idea is that Key has the ability to translate into some series of PrefixType elements. Fine so far. 

If PrefixType is Boolean that's the same as saying bit based prefix and we're good. Right? Well, no, because a sequence of booleans rather than a sequence of packed bytes (or ints or whatever) is a huge, enormous, colossal waste of space and probably compute power. If you're wasting that much space the entire goal of a Patricia Trie goes right out the window.

So now what? Parameterize the logical prefix type (Boolean) as well as the physical representation type (Byte, or Int, or whatever) and parameterize on the mechanism for translating back and forth? Sounds "ideal" but it's not clear at all that even that could be made fast.

Or make a specialized PatriciaTrie that strictly deals with bits in a packed form and eliminate parameterizing on PrefixType, thus making a PatriciaTrie that's probably not terribly useful for Strings of characters.
