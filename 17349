Consider a recursive type definition on the scala side and Test on the java side and a Test2 on the scala side. 

recurse.scala
```scala
package test
trait Foo[A <: Foo[A]] { 
      this: A =>
      def qux(): A = this
} 
class Bar extends Foo[Bar] 
class Duh extends Foo[Duh]

object Test2 extends App {
  val bar: Bar = new Bar().qux(); 
  val duh: Duh = new Duh().qux();
  
  println(bar)
  println(duh)
}
```

and 

Test.java
```scala
package test;

public class Test {

  public static void main(String[] args) {
     Bar bar = new Bar().qux();
     Duh duh = new Duh().qux();
     System.out.println(bar); 
     System.out.println(duh); 
     
  }
}
```

Then the scala side Test2 will compile without problem and run while the java side will generate an error
```
C:\scala-2.10.0-M6\recurse>javac -d . -cp .;..\lib\scala-library.jar *.java
Test.java:6: incompatible types
found   : test.Foo
required: test.Bar
     Bar bar = new Bar().qux();
                            ^
Test.java:7: incompatible types
found   : test.Foo
required: test.Duh
     Duh duh = new Duh().qux();
                            ^
2 errors
```




A workaround is to either cast it on the java side to the proper type like Duh or override the method in the concrete class to return a concrete type like Bar.

recurse.scala
```scala
package test
trait Foo[A <: Foo[A]] { 
      this: A =>
      def qux(): A = this
} 
class Bar extends Foo[Bar] {
  override def qux(): Bar = super.qux()
}
class Duh extends Foo[Duh]

object Test2 extends App {
  val bar: Bar = new Bar().qux(); 
  val duh: Duh = new Duh().qux();
  
  println(bar)
  println(duh)
}
```

and 

Test.java
```scala
package test;

public class Test {

  public static void main(String[] args) {
     Bar bar = new Bar().qux();
     Duh duh = (Duh) new Duh().qux();
     System.out.println(bar); 
     System.out.println(duh); 
     
  }
}
```

see thread
https://groups.google.com/forum/?hl=en&fromgroups#!topic/scala-user/PPDIPfeKGzo%5B1-25%5D
