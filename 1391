Actually, I've found an example where the problem arising when only using bounded type members, and no type aliases:
{code}
scala> trait A { type T <: Int }                              
defined trait A

scala> trait B { type T <: String }
defined trait B

scala> trait C { type U <: A with B; val x : U#T; val y = x.charAt(0) }
defined trait C

scala> trait D extends C { type U <: B with A; lazy val x = 2 }
<console>:7: error: overriding value x in trait C of type D.this.U#T;
 lazy value x has incompatible type
       trait D extends C { type U <: B with A; lazy val x = 2 }
{code}
And yes, {{B with A}} is considered a valid subtype of {{A with B}}:
{code}
scala> trait E { type U <: A with B }
defined trait E

scala> trait F extends E { type U <: B with A }
defined trait F
{code}
And yes, {{(B with A)#T}} is treated as being bounded by {{Int}} and {{(A with B)#T}} is treated as being bounded by {{String}}:
{code}
scala> def foo(arg: E#U#T) : String = arg      
foo: (E#U#T)String

scala> def bar(arg: F#U#T) : Int = arg
bar: (F#U#T)Int
{code}
