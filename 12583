I expected the shape test to allow arg typed with expected type, as if not overloaded.

But the behavior has history on its side.

{code}
$ scala29
Welcome to Scala version 2.9.3 (OpenJDK 64-Bit Server VM, Java 1.6.0_38).
Type in expressions to have them evaluated.
Type :help for more information.

scala> object Y {
     |   def f[A](g: PartialFunction[Any, A]): A = g(42)
     |   def f[A](i: Int, g: PartialFunction[Any, A]): A = g(i)
     | }
defined module Y

scala> Y.f { case _ => 17 }
res0: Int = 17

scala> Y.f[Int] { case _ => 17 }
<console>:9: error: missing parameter type for expanded function
The argument types of an anonymous function must be fully known. (SLS 8.5)
Expected type was: ?
              Y.f[Int] { case _ => 17 }
                       ^
<console>:9: error: overloaded method value f with alternatives:
  (i: Int,g: PartialFunction[Any,Int])Int <and>
  (g: PartialFunction[Any,Int])Int
 cannot be applied to (<error> => Int)
              Y.f[Int] { case _ => 17 }
                 ^


{code}
