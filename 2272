Just for fun, this looks even more like the built in match.

{code}
import Stream._
object diyMatcher {
  def crashNoMore[A](lefts: Stream[A], rights: Stream[A]) = {
    (lefts, rights) `match` (
        {case (Stream.Empty, Stream.Empty) => None},
        {case (l #:: ls, rs) => None}
    )
  }

  trait Matchable[A] { 
    def `match`[B](cases: PartialFunction[A, B]*): B
  }
  
  implicit def anyToMatchable[A](a: A): Matchable[A] = new Matchable[A]{
    def `match`[B](cases: PartialFunction[A, B]*) = {
      cases.toList match {
        case Nil => throw new MatchError(a)
        case x :: _ if x.isDefinedAt(a) => x(a)
        case _ :: xs => a `match` (xs : _*) 
      }
    }
  }
}
{code}
