If first string to complete is Array.fill<TAB> Repl crashes.
{code}
Welcome to Scala version 2.10.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_17).
Type in expressions to have them evaluated.
Type :help for more information.

scala> Array.fillerror: 
     while compiling: <console>
        during phase: erasure
     library version: version 2.10.1
    compiler version: version 2.10.1
  reconstructed args: 

  last tree to typer: TypeTree(class Unit)
              symbol: class Unit in package scala (flags: final abstract)
   symbol definition: final abstract class Unit extends AnyVal
                 tpe: Unit
       symbol owners: class Unit -> package scala
      context owners: variable value -> object $eval -> package $line1

== Enclosing template or block ==

Template( // val <local $eval>: <notype> in object $eval, tree.tpe=type
  "java.lang.Object" // parents
  ValDef(
    private
    "_"
    <tpt>
    <empty>
  )
  // 5 statements
  DefDef( // def <init>(): type in object $eval
    <method>
    "<init>"
    []
    List(Nil)
    <tpt> // tree.tpe=type
    Block(
      Apply( // def <init>(): Object in class Object
        $eval.super."<init>" // def <init>(): Object in class Object
        Nil
      )
      ()
    )
  )
  ValDef( // private[this] var value: scala.tools.nsc.interpreter.IMain in object $eval
    private <mutable> <local> <defaultinit> <triedcooking>
    "value "
    <tpt> // tree.tpe=scala.tools.nsc.interpreter.IMain
    <empty>
  )
  DefDef( // def value(): scala.tools.nsc.interpreter.IMain in object $eval
    <method> <accessor> <defaultinit> <triedcooking>
    "value"
    []
    List(Nil)
    <tpt> // tree.tpe=scala.tools.nsc.interpreter.IMain
    $eval.this."value " // private[this] var value: scala.tools.nsc.interpreter.IMain in object $eval, tree.tpe=scala.tools.nsc.interpreter.IMain
  )
  DefDef( // def value_=(x$1: scala.tools.nsc.interpreter.IMain): Unit in object $eval
    <method> <accessor> <defaultinit> <triedcooking>
    "value_$eq"
    []
    // 1 parameter list
    ValDef( // x$1: scala.tools.nsc.interpreter.IMain
      <param> <synthetic> <triedcooking>
      "x$1"
      <tpt> // tree.tpe=scala.tools.nsc.interpreter.IMain
      <empty>
    )
    <tpt> // tree.tpe=Unit
    Assign( // tree.tpe=Unit
      $eval.this."value " // private[this] var value: scala.tools.nsc.interpreter.IMain in object $eval, tree.tpe=scala.tools.nsc.interpreter.IMain
      "x$1" // x$1: scala.tools.nsc.interpreter.IMain, tree.tpe=scala.tools.nsc.interpreter.IMain
    )
  )
  DefDef( // def set(x: Any): Unit in object $eval
    <method>
    "set"
    []
    // 1 parameter list
    ValDef( // x: Any
      <param> <triedcooking>
      "x"
      <tpt> // tree.tpe=Any
      <empty>
    )
    <tpt> // tree.tpe=Unit
    Apply( // def value_=(x$1: scala.tools.nsc.interpreter.IMain): Unit in object $eval, tree.tpe=Unit
      $eval.this."value_$eq" // def value_=(x$1: scala.tools.nsc.interpreter.IMain): Unit in object $eval, tree.tpe=(x$1: scala.tools.nsc.interpreter.IMain)Unit
      Apply( // final def asInstanceOf[T0](): T0 in class Any, tree.tpe=scala.tools.nsc.interpreter.IMain
        TypeApply( // final def asInstanceOf[T0](): T0 in class Any, tree.tpe=()scala.tools.nsc.interpreter.IMain
          "x"."asInstanceOf" // final def asInstanceOf[T0](): T0 in class Any, tree.tpe=[T0]()T0
          <tpt> // tree.tpe=scala.tools.nsc.interpreter.IMain
        )
        Nil
      )
    )
  )
)

== Expanded type of tree ==

TypeRef(TypeSymbol(final abstract class Unit extends AnyVal))

uncaught exception during compilation: java.lang.AssertionError
{code}
