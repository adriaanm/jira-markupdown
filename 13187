With 2.7.0-RC3.

In writing some serialization code for memcached, I need to return
either a valid T or a null if I was able to unserialize the byte
array.

However, I need to use a cast on the null.  I'm taking care to have
T <: AnyRef so null is valid.  Here's some code that shows something
similar to what I'm doing.

{code}
abstract class BaseUnserializer[T <: AnyRef]
{
  def unpack_bytes : T
  def unserialize(flag : Boolean) : T = {
    if (flag) {
      unpack_bytes
    }
    else {
      null
    }
  }
}
{code}

The compile error:

{code}
t3.scala:9: error: type mismatch;
 found   : Null(null)
 required: T
      null
      ^
one error found
{code}
