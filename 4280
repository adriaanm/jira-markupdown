Replying to [comment:1 dragos]:
> I vote against it (for performance reasons). Let's keep ranges reasonable efficient for ints, and direct people to another collection  when the element type is not Int.

Your phrasing makes it sound like you are conflating "Range the collection" with "range the method".  The latter exists for all the collections as a factory which creates that collection with the elements in question.  The change I propose in this ticket would have no bearing on "Range the collection" which is Int-specific and will remain so.
```scala
// range the method
scala> Vector.range(1, 1000)
res0: scala.collection.immutable.Vector[Int] = Vector(1, 2, ....

// Range the Int collection
scala> 1 to 1000
res1: scala.collection.immutable.Range.Inclusive with scala.collection.immutable.Range.ByOne = Range(1, 2, ...

// NumericRange the T collection
scala> 1L to 1000L
res2: scala.collection.immutable.NumericRange.Inclusive[Long] = NumericRange(1, 2, 

// An example of what you can't do which parameterizing range the method would fix
scala> Vector.range(1L, 1000L)
<console>:6: error: type mismatch;
 found   : Long(1L)
 required: Int
       Vector.range(1L, 1000L)
                    ^
```

> I assign this to you nevertheless, as you are the library gatekeeper IRC.

It would be helpful then if you could clarify your comment.  I too am in favor of keeping Range the collection the way it is.
