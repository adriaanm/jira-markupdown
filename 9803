The following idea should probably be in the scala-internals thread, but since I'm far away from being a Scala committer I decided to post this here.
In advance, please forgive me any potential ignorance or lack of some fundamental knowledge if this idea is stupid.

In the scala-internals thread, Adriaan proposed a replacement for view bounds:

{noformat}
Given `class Has[To] { type Conversion[From] = From => To }`

`def foo[T <% Int](x: T) = (x: Int)`

can be rewritten to:

`def foo[T: Has[Int]#Conversion](x: T) = (x: Int)`
{noformat}

I think this could look a lot nicer if Scala had multiple type parameter lists:

{noformat}
Having: `type HasConvTo[To][From] = (From => To)`

`def foo[T <% Int](x: T) = (x: Int)`

can be rewritten to:

`def foo[T: HasConvTo[Int]](x: T) = (x: Int)`
{noformat}

Maybe this could be a good motivation for implementing multiple type parameter lists?
