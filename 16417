{code}
import scala.util.continuations._
object Main {
  implicit def asSuspendableTraversable[A](iterable: Iterable[A]) = new {
    def foreach[U, B](f: A => U @cps[B]): Unit @cps[B] = {
      val i = iterable.iterator
      while (i.hasNext) {
        f(i.next())
      }
    }
  }

  def main(args: Array[String]): Unit = {
    reset {
      // OK!
      for (i <- asSuspendableTraversable(1 until 4)) {
        println(i)
        shiftUnit0[Unit, Unit]()
      }

      // Does not work
      for (i <- 1 until 4) {
        println(i)
        shiftUnit0[Unit, Unit]()
      }
    }
  }
}
{code}
