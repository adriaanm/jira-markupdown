{noformat}
Welcome to Scala version 2.11.0-20130330-204812-2a6e83a85e (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_37).
Type in expressions to have them evaluated.
Type :help for more information.

scala> def convert[F[X <: F[X]]](builder: F[_ <: F[_]]) = 0
warning: there were 1 feature warning(s); re-run with -feature for details
convert: [F[X <: F[X]]](builder: F[_ <: F[_]])Int

scala> convert(Some(9))
<console>:9: error: no type parameters for method convert: (builder: F[_ <: F[_]])Int exist so that it can be applied to arguments (Some[Int])
 --- because ---
argument expression's type is not compatible with formal parameter type;
 found   : Some[Int]
 required: ?F forSome { type _$1 <: ?F forSome { type _$2 } }
              convert(Some(9))
              ^
<console>:9: error: type mismatch;
 found   : Some[Int]
 required: F[_ <: F[_]]
              convert(Some(9))
                          ^
error: type mismatch;
 found   : Some[Int]
 required: ?F forSome { type _$1 <: ?F forSome { type _$2 } }
Note that implicit conversions are not applicable because they are ambiguous:
 both method ArrowAssoc in object Predef of type [A](__leftOfArrow: A)ArrowAssoc[A]
 and method Ensuring in object Predef of type [A](__resultOfEnsuring: A)Ensuring[A]
 are possible conversion functions from Some[Int] to ?F forSome { type _$1 <: ?F forSome { type _$2 } }
error: type mismatch;
 found   : Some[Int]
 required: ?F forSome { type _$1 <: ?F forSome { type _$2 } }
Note that implicit conversions are not applicable because they are ambiguous:
 both method ArrowAssoc in object Predef of type [A](__leftOfArrow: A)ArrowAssoc[A]
 and method Ensuring in object Predef of type [A](__resultOfEnsuring: A)Ensuring[A]
 are possible conversion functions from Some[Int] to ?F forSome { type _$1 <: ?F forSome { type _$2 } }
error: type mismatch;
 found   : Some[Int]
 required: ?F forSome { type _$1 <: ?F forSome { type _$2 } }
Note that implicit conversions are not applicable because they are ambiguous:
 both method ArrowAssoc in object Predef of type [A](__leftOfArrow: A)ArrowAssoc[A]
 and method Ensuring in object Predef of type [A](__resultOfEnsuring: A)Ensuring[A]
 are possible conversion functions from Some[Int] to ?F forSome { type _$1 <: ?F forSome { type _$2 } }

scala> 0
error: type mismatch;
 found   : Some[Int]
 required: ?F forSome { type _$1 <: ?F forSome { type _$2 } }
Note that implicit conversions are not applicable because they are ambiguous:
 both method ArrowAssoc in object Predef of type [A](__leftOfArrow: A)ArrowAssoc[A]
 and method Ensuring in object Predef of type [A](__resultOfEnsuring: A)Ensuring[A]
 are possible conversion functions from Some[Int] to ?F forSome { type _$1 <: ?F forSome { type _$2 } }
error: type mismatch;
 found   : Some[Int]
 required: ?F forSome { type _$1 <: ?F forSome { type _$2 } }
Note that implicit conversions are not applicable because they are ambiguous:
 both method ArrowAssoc in object Predef of type [A](__leftOfArrow: A)ArrowAssoc[A]
 and method Ensuring in object Predef of type [A](__resultOfEnsuring: A)Ensuring[A]
 are possible conversion functions from Some[Int] to ?F forSome { type _$1 <: ?F forSome { type _$2 } }
error: type mismatch;
 found   : Some[Int]
 required: ?F forSome { type _$1 <: ?F forSome { type _$2 } }
Note that implicit conversions are not applicable because they are ambiguous:
 both method ArrowAssoc in object Predef of type [A](__leftOfArrow: A)ArrowAssoc[A]
 and method Ensuring in object Predef of type [A](__resultOfEnsuring: A)Ensuring[A]
 are possible conversion functions from Some[Int] to ?F forSome { type _$1 <: ?F forSome { type _$2 } }

scala>
{noformat}
