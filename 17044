i am using scala 2.10.0-snapshot dated (20120522) and have the following scala files:

this one defines the typeclass and a basic typeclass instance:
<pre>
package com.netgents.typeclass.hole

case class Rabbit

trait Hole[A] {
  def findHole(x: A): String
}

object Hole {
  def apply[A : Hole] = implicitly[Hole[A]]
  implicit val rabbitHoleInHole = new Hole[Rabbit] {
    def findHole(x: Rabbit) = "Rabbit found the hole in Hole companion object"
  }
}
</pre>

this is the package object:
<pre>
package com.netgents.typeclass

package object hole {
  
  def findHole[A : Hole](x: A) = Hole[A].findHole(x)
  
  implicit val rabbitHoleInHolePackage = new Hole[Rabbit] {
    def findHole(x: Rabbit) = "Rabbit found the hole in Hole package object"
  }
}
</pre>

and here is the test:
<pre>
package com.netgents.typeclass.hole

object Test extends App {
  
  implicit val rabbitHoleInOuterTest = new Hole[Rabbit] {
    def findHole(x: Rabbit) = "Rabbit found the hole in outer Test object"
  }

  {
    implicit val rabbitHoleInInnerTest = new Hole[Rabbit] {
      def findHole(x: Rabbit) = "Rabbit found the hole in inner Test object"
    }
  
    println(findHole(Rabbit()))
  }
}
</pre>

as you can see, Hole is a simple typeclass that defines a method of which a Rabbit is trying to find.  i am trying to figure out the implicit resolution rules on it.

- with all four typeclass instances uncommented, scalac complains about ambiguities on rabbitHoleInHolePackage and rabbitHoleInHole. (why?)

- if i commented out rabbitHoleInHole, scalac compiles and i get back "Rabbit found the hole in Hole package object". (shouldn't implicits in the local scope take precedence?)

- if i then commented out rabbitHoleInHolePackage, scalac complains about ambiguities on rabbitHoleInOuterTest and rabbitHoleInInnerTest. (why? in the article by eed3si9n, url listed below, he found implicits btw inner and outer scope can take different precedence.)

- if i then commentted out rabbitHoleInInnerTest, scalac compiles and i get back "Rabbit found the hole in outer Test object". 

as you can see, the above behaviors do not follow the rules i've read on implicit resolution at all.  and i've only described a fraction of combinations you can do on commenting/uncommenting out instances and most of them are very strange indeed.  and i haven't gotten into imports and subclasses yet.

i've read and watched presentation by suereth (https://docs.google.com/present/view?id=dfqn4jb_106hq4mvbd8), stackoverflow answer by sobral (http://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits/5598107#5598107), and a very elaborate revisit by eed3si9n (http://eed3si9n.com/revisiting-implicits-without-import-tax), but i am still completely baffled.
