Trying to figure out how this was happening:
{code}
scala> List(1, 2, 3).slice(-10, 0)
res15: List[Int] = List()

scala> scala.collection.mutable.ListBuffer(1, 2, 3).slice(-10, 0)
res16: scala.collection.mutable.ListBuffer[Int] = ListBuffer(1, 2, 3)

scala> scala.collection.mutable.ListBuffer(1, 2, 3).readOnly.slice(-10, 0)
res17: List[Int] = List()
{code}
Issues emerge.

1) slice is not covered in TraversableForwarder.

2) About the only class to conform to the documented behavior of slice is ListBuffer.  And that by virtue of bug 1.
 
The documented behavior is this:
{code}
*  Note: `c.slice(from, to)`  is equivalent to (but possibly more efficient than)
*  `c.drop(from).take(to - from)`
{code} 
So if slice(-10, 0) is treated that way, it is xs drop -10 take 10, which is
obviously non-empty on any non-empty collection.  However the way all the
collections except ListBuffer are presently behaving makes a lot more sense.

I'm assigning to myself: in the absence of objections I propose to fix slice
(both the lack of forwarder, and any implementations which correspond to the
above description) and change the documented behavior to something more like
"c drop from take (to - (from max 0))"

What is more important here is that it is a fantasy that all the forwarder/proxy/view implementations will remain in sync with the corresponding collections without 100% machine verification.  We really must stop kidding ourselves about this, or plaster them with warning labels about subtle, hard to figure out bugs which only arise with some unlucky combination of collections.  But it'd be easier to just bring in the machines.  I already started this a while back so I will figure it's on me to do it.
