The current action of @!BeanProperty is to copy the annotations to the generated functions. This is incorrect behavior, as annotations are supposed to have their applicability be limited by !ElementType. Copying an annotation that is restricted to field types to a generated method isn't desirable. We need rules to decide when annotations should be copied and when they should be moved. It shouldn't rely on anything other than standard language constructs, as well.

I suggest something like the following:

First, check the element type restrictions and move or copy as appropriate, if it can be determined from those. Second, obey instructions supplied in other annotations:
```scala
@AnnotateGenerated(@Getters)
class Person {
   @XmlAttribute
   var name = ""
   @XmlAttribute
   var age = 10
   @XmlValue
   var details = ""
}
```

The parameter to @!AnnotateGenerated might be @Getters, @Setters, @Fields, @Accessors (getters and setters), or @All. The current behavior corresponds to @All.

Allow !AnnotateGenerated on packages, classes, and members, so the annotations can applied to specific scopes. 

It might make sense to further refine the instruction by annotation type:
```scala
@AnnotateGenerated(XmlAttribute.class, @Getters)
```
