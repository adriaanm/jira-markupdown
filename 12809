{code}
./build/locker/bin/scalac -d build/quick/lib/library \
  src/library/scala/List.scala -Ycasetags:on
{code}

{code}

errexception when transforming def ms(lst: List[A]): List[A] = lst match {
  case Nil => lst
  case (A,List[A])::[A]((x @ _), Nil) => lst
  case (A,List[A])::[A]((x @ _), (A,List[A])::[A]((y @ _), Nil)) => if (lt.apply(x, y))
    lst
  else
    {
      <synthetic> val x$$8: A = y;
      {
        <synthetic> val x$$7: A = x;
        Nil.::[A](x$$7)
      }.::[A](x$$8)
    }
  case (lst @ _) => {
    <synthetic> private[this] val x$$9: (List[A], List[A]) = (split(lst): @unchecked (List[A], List[A])) match {
      case (List[A],List[A])(List[A], List[A])((l1 @ _), (l2 @ _)) => new (List[A], List[A])(l1, l2)
    };
    val l1: List[A] = x$$9._1();
    val l2: List[A] = x$$9._2();
    val l1s: List[A] = ms(l1);
    val l2s: List[A] = ms(l2);
    merge(l1s, l2s)
  }
}
...
fatal error: assertion failed: temp == List() row.pats == List((A,List[A])::[A]((x @ _), (A,List[A])::[A]((y @ _), Nil)))
{code}
