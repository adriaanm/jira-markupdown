The following program gives incorrect results when compiled with the -optimise flag under 2.7.4, 2.7.5, and the 20090819 nightly build of 2.8.0:

{code}
final class V(var x:Int , var y:Int) {
  def +=(ax:Int,ay:Int) { x += ax ; y += ay }
}
 
final class U {
  var x:Int = 0
  var y:Int = 0
  def +=(ax:Int,ay:Int) { x += ax ; y += ay }
}

object Fail {
  def main(args:Array[String]) {
    val vm = new V(0,0)
    vm += (5,10)
    val um = new U
    um += (5,10) 
    var i = 0    
    while (i<1) {     
      um += ( i , 1-i )
      i += 1
    }

    println("Answers are " + (vm.x+vm.y) + " and " + (um.x+um.y))
  }
}
{code}
  
Good output:
{code}
~/code/scala$$ rm *.class ; ~/pkg/scala-2.8.0.r18509-b20090819020207/bin/scalac Fail.scala
~/code/scala$$ java -cp ~/pkg/scala-2.8.0.r18509-b20090819020207/lib/scala-library.jar:. Fail
Answers are 15 and 16
~/code/scala$$
{code}

Bad optimized output:
{code}
~/code/scala$$ rm *.class ; ~/pkg/scala-2.8.0.r18509-b20090819020207/bin/scalac -optimise Fail.scala
~/code/scala$$ java -cp ~/pkg/scala-2.8.0.r18509-b20090819020207/lib/scala-library.jar:. Fail
Answers are 0 and 16
~/code/scala$$
{code}

These changes make the problem disappear:
 * Removing the loop.
 * Having V non-final (sealed case is not buggy, for example).
 * Moving the vars in the body of the class (as U demonstrates)
 * Making vm a tuple (V(0,0) , whatever) and using vm._1
 * Putting vm into a new tuple, doing math on vm, but reading the result from the tuple

With these changes, the problem remains:
 * Making vm a var instead of a val
 * Placing vm into a tuple but then reading the result from vm
 * Adding a line like val wm = vm

In more complicated programs, this bug can manifest intermittently--multiple compiles of the same code will sometimes show this bug and sometimes not.  The compiler output is genuinely different in these cases.  (Verified with javap -c, though I could not spot exactly what the problem is as I'm not a JVM bytecode expert.)
