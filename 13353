This stems from an example in Programming in Scala.

An example is given:
{code}
def generalSize(x: Any) = x match {
 case s: String => s.length
 case m: Map[_, _] => m.size
 case _ => 1
}
{code}
The natural extension of this is to include arrays and lists:

{code}
def generalSize(x: Any) = x match {
 case s: String => s.length
 case m: Map[_, _] => m.size
 case l: List[_] => l.size
 case a: Array[_] => a.length
 case _ => -1
}
{code}
I changed the return value for case _ to -1 so that it
is easier to spot unmatched objects.

Can anyone explain why only the default case matches the below expressions
that evaluate to -1?

{code}
scala> generalSize("Programming in Scala")
res30: Int = 20

scala> generalSize("Programming in Scala".toList)
res31: Int = 20

scala> generalSize("Programming in Scala".toArray)
res32: Int = 20

scala> generalSize("Programming in Scala".split(" "))
res33: Int = -1

scala> generalSize(Array("Programming", "in", "Scala"))
res34: Int = 3

scala> generalSize(Array(true, false))
res35: Int = -1

scala> "Programming in Scala".split(" ")
res36: Array[java.lang.String] = Array(Programming, in, Scala)

scala> Array(true, false)
res37: Array[Boolean] = Array(true, false)

scala> "Programming in Scala".toArray
res38: Array[Char] = Array(P, r, o, g, r, a, m, m, i, n, g,  , i, n,  , S, c, a, l, a)

scala> Array("Programming", "in", "Scala")
res39: Array[java.lang.String] = Array(Programming, in, Scala)

{code}

Note that res36 and res39 appear to be equivalent Array[String] arrays of 3 elements, yet passing these expressions to the generalSize function yields different results (res33: -1 vs res34: 3)

The behavior appears in 2.7.0-final and 2.7.1.RC2

I posted this to  scala@listes.epfl.ch but got no response, so my apologies if this is dumb user error.


