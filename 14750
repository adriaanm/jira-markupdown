The method subscribe on scala.collection.mutable.Publisher is broken. Test scenario:

{code}
Welcome to Scala version 2.8.0.r0-b20091113221629 (Java HotSpot(TM) Client VM, Java 1.6.0_16).
Type in expressions to have them evaluated.
Type :help for more information.

scala> import scala.collection.mutable._
import scala.collection.mutable._

scala> import scala.collection.script._
import scala.collection.script._

scala> class MyMap extends HashMap[Int,Int] with ObservableMap[Int,Int,MyMap]
defined class MyMap

scala> val map = new MyMap
map: MyMap = Map()

scala> class MySub extends Subscriber[Message[(Int,Int)],MyMap] {
     | def notify(pub: MyMap, evt: Message[(Int,Int)]) { println(evt) }
     | }
defined class MySub

scala> val sub = new MySub
sub: MySub = MySub@59cebe

scala> map.subscribe(sub)
java.util.NoSuchElementException: key not found: MySub@59cebe
        at scala.collection.MapLike$$class.default(MapLike.scala:191)
        at scala.collection.mutable.HashMap.default(HashMap.scala:21)
        at scala.collection.MapLike$$class.apply(MapLike.scala:106)
        at scala.collection.mutable.HashMap.apply(HashMap.scala:21)
        at scala.collection.mutable.Publisher$$class.subscribe(Publisher.scala:37)
        at MyMap.subscribe(<console>:10)
        at scala.collection.mutable.Publisher$$class.subscribe(Publisher.scala:36)
        at MyMap.subscribe(<console>:10)
        at .<init>(<console>:15)
        at .<clinit>(<console>)
        at RequestResult$$.<init>(<console>:4)
        at RequestResult$$.<clinit>(<console>)
        at RequestResult$$result(<console>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at scala.tools.nsc.Interpreter$$Request$$$$anonfun$$loadAndRun$$1$$$$anonfun$$apply$$13.apply(Interpreter.scala:788)
        at scala.tools.nsc.Interpreter$$Request$$$$anonfun$$loadAndRun$$1$$$$anonfun$$apply$$13.apply(Interpreter.scala:788)
        at scala.util.control.Exception$$Catch.apply(Exception.scala:79)
        at scala.tools.nsc.Interpreter$$Request$$$$anonfun$$loadAndRun$$1.apply(Interpreter.scala:787)
        at scala.tools.nsc.Interpreter$$Request$$$$anonfun$$loadAndRun$$1.apply(Interpreter.scala:787)
        at scala.util.control.Exception$$Catch.apply(Exception.scala:79)
        at scala.tools.nsc.Interpreter$$Request.loadAndRun(Interpreter.scala:786)
        at scala.tools.nsc.Interpreter.interpret(Interpreter.scala:435)
        at scala.tools.nsc.Interpreter.interpret(Interpreter.scala:425)
        at scala.tools.nsc.InterpreterLoop.interpretStartingWith(InterpreterLoop.scala:331)
        at scala.tools.nsc.InterpreterLoop.command(InterpreterLoop.scala:308)
        at scala.tools.nsc.InterpreterLoop.processLine$$1(InterpreterLoop.scala:205)
        at scala.tools.nsc.InterpreterLoop.repl(InterpreterLoop.scala:223)
        at scala.tools.nsc.InterpreterLoop.main(InterpreterLoop.scala:379)
        at scala.tools.nsc.MainGenericRunner$$.createLoop$$1(MainGenericRunner.scala:119)
        at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:144)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
{code}

Analysis:

This is the problematic line in the source code:

{code}
 def subscribe(sub: SubThis, filter: Filter) { filters(sub) += filter } 
{code}

Where filters is defined as:

{code}
private val filters = new HashMap[SubThis, Set[Filter]] with MultiMap[SubThis, Filter] 
{code}

Let me unsugar that line:

{code}
filters.apply(sub).$$plus$$equals(filter)
{code}

Since there's no "sub" in that HashMap, it gives an error. If it returned something, then the returned set would be correctly modified. On Scala 2.7.7:

{code}
def subscribe(sub: Subscriber[A, This], filter: A => Boolean): Unit =
 filters.add(sub, filter)
{code}

Which obviously DTRT. Perhaps the line could be rewritten as:

{code}
 def subscribe(sub: SubThis, filter: Filter) { filters.getOrElseUpdate(sub, Set.empty) += filter } 
{code}

