In the process of contrasting this translation with the status quo, I've uncovered a latent bug.
```scala
class C {
  def catchExpr1: PartialFunction[Throwable, Any] = ???
  def test = {
    try {} catch catchExpr1
  }
}
```
```
% scalac -Xprint:parser sandbox/test.scala
[[syntax trees at end of                    parser]] // test.scala
package <empty> {
  class C extends scala.AnyRef {
    def <init>() = {
      super.<init>();
      ()
    };
    def catchExpr1: PartialFunction[Throwable, Any] = $qmark$qmark$qmark;
    def test = try {
      ()
    } catch {
      case (x$1 @ (_: Throwable)) => {
        <artifact> val catchExpr1 = catchExpr1;
        if (catchExpr1.isDefinedAt(x$1))
          catchExpr1.apply(x$1)
        else
          throw x$1
      }
    }
  }
}

sandbox/test.scala:4: error: recursive value catchExpr1 needs type
    try {} catch catchExpr1
```

Discovered during review of https://github.com/scala/scala/pull/4334 / scala/bug#5887
