Given the following case class constructors and function:
```scala
case class Msg1(replyTo: ActorRef[String])
case class Msg2(value: String, replyTo: ActorRef[String])

def ask[T, U](f: ActorRef[T] => U): Future[T]
```
Eta expansion only works painlessly in the first case:
```scala
ask(Msg1) // compiles
ask(Msg2("hello", _)) // missing parameter type for expanded function
```
It should be possible to lift the restriction in the case of doing a pure eta expansion; the work-around is to manually curry the case class constructor since omitting whole argument lists works as expected.
