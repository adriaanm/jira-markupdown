If you have overloads of `f` in a class, only one of them may use define defaults:

{code}
scala> class C { def foo(a: Int = 0, b: Int = 0) = 0; def foo(a: String = "") = 0 }
<console>:7: error: in class C, multiple overloaded alternatives of method foo define default arguments.
       class C { def foo(a: Int = 0, b: Int = 0) = 0; def foo(a: String = "") = 0 }
             ^
{code}

This check wasn't working for constructors. My change brings them under the same rules as regular methods.

{code}
scala> class C { def this(a: Int = 0, b: Int = 0) = this(); def this(a: String = "") = this() }
<console>:7: error: in class C, multiple overloaded alternatives of constructor C define default arguments.
       class C { def this(a: Int = 0, b: Int = 0) = this(); def this(a: String = "") = this() }
             ^
{code}
