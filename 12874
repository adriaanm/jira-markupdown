With Scala 2.6.0-final using Java 6u3, the following code

{code}
object Test extends Application {
  for (i <- 0 until 10) {
    "foo" match {
      case "bar" => ()
      case _ => null
    }
  }
}
{code}

generates the following stack trace:

{code}
scala Test
java.lang.VerifyError: (class: Test$$$$anonfun$$0, method: apply signature: (I)V) Inconsistent stack height 1 != 0
        at Test$$.<init>(t.scala:2)
        at Test$$.<clinit>(t.scala)
        at Test.main(t.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at scala.tools.nsc.ObjectRunner$$$$anonfun$$0.apply(ObjectRunner.scala:75)
        at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
        at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
        at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:154)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
{code}

It appears that the for loop is needed to get the exception.
