{code}
trait Converter {
  type To
  type From
}
object Converter {
  type Aux[-From0, +To0] = Converter {
    type To <: To0
    type From >: From0
  }
}
trait Outer {
  trait InnerLike { this: Inner =>
    type To
    type From
    type F >: Converter.Aux[From, To] <: Converter.Aux[From, To] // This works
  }
  type Inner <: InnerLike
  def cast(inner: Inner)(f: inner.F): Inner#F = f
}
{code}

A workaround is making {{F}} an abstract type.
