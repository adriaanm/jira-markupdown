Here's the code:

----------
object Main {
  def main(args: Array[String]) {
    var l = List(1,2,3,4)
    l.sliding(2).foreach { case List(a, b) =>  printf("%d\n", a + b) }
  }
}
----------

I've managed to reproduce it:

$ /pool1/rootdisk/opt/scala/scala-2.10.0-M3/bin/fsc -Xlint -optimize neme.scala
neme.scala:4: warning: dead code following this construct
    l.sliding(2).foreach { case List(a, b) =>  printf("%d\n", a + b) }
                         ^
one warning found
$ fsc -Xlint -optimize neme.scala
neme.scala:4: warning: dead code following this construct
    l.sliding(2).foreach { case List(a, b) =>  printf("%d\n", a + b) }
                         ^
error: 
     while compiling:  neme.scala
       current phase:  mixin
     library version:  version 2.10.0-M3
    compiler version:  version 2.10.0-M3
  reconstructed args:  -Ydead-code -Ywarn-nullary-unit -optimise -Xlint -Ywarn-inaccessible -Yinline -Ywarn-nullary-override -Yclosure-elim -Ywarn-dead-code -Yinline-handlers -Ywarn-adapted-args

uncaught exception during compilation: java.lang.AssertionError
$ fsc -version
Fast Scala compiler version 2.10.0-M2 -- Copyright 2002-2011, LAMP/EPFL

What's really odd is that when it fails above I'm getting a message from the M3 fsc but I'm (apparently) using the M2 version, I assume because the M3 fsc process is still active - when I originally saw this error I'd just installed M3.  I'm wondering if this isn't some sort of malign interaction of the M2 & M3 versions of fsc, is that possible?  Does the fsc driver check it is talking to a matching version of the fsc server?  If not, perhaps it should?


