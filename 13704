I normally build my mixed Scala/Java project by running javac, then scalac. It works fine (in my testing so far!), but Martin recommended that for maximum reliability you could recompile the Java files with a second javac pass. But when I try that I get an error.

My test case depends on the JUnit 4.4 jar, which I will attach.

Here's the failure:
{code}
% cat foo/J.java
package foo;
@org.junit.runners.Suite.SuiteClasses(value={J.I1.class,J.I2.class})
class J {
    class I1 { }
    class I2 { }
}
% cat foo/S.scala
package foo
class S { println(classOf[J]) }
% scalac -classpath junit.jar foo/J.java foo/S.scala
% javac -classpath junit.jar foo/J.java
% scalac -classpath junit.jar foo/S.scala
error: error while loading J, class file './foo/J.class' is broken
(bad constant pool index: 25344 at pos: 448)
one error found
{code}

Weird, huh? The error doesn't happen if I remove one of the two inner classes from J.

I could try to make the test case not involve junit.jar, but I imagine this is probably good enough. If a more self-contained test case would be useful, let me know and I will take a crack at it.

