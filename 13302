The current desugaring goes approximately as follows:

{code}
object Foreach{
  def main(args : Array[String]){
    for (arg <- args; if (arg.length > 3)){
      println(arg);
    }
  }
}
{code}

Becomes 

{code}
object Foreach{
  def main(args : Array[String]){
    args.filter(arg => arg.length > 3).foreach(arg => println(arg));
  }
}
{code}

It should instead desugar to 

{code}
object Foreach{
  def main(args : Array[String]){
    args.foreach(arg => if (arg.length > 3) println(arg));
  }
}
{code}

As this latter desugaring avoids creating intermediate datastructures.

In general, a for comprehension that ends in a foreach rather than a yield can always be decomposed into a nested sequence of if statements and foreach invocations. This would be preferable to the current approach.
