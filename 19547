This caused me quite the literal headache today:

{code}
class S[_]
class T[_]

case class B(x: Int)
object B {
  def makeST = (new S[B], new T[B])
  implicit val (s,t): (S[B],T[B]) = makeST
}

object A { implicitly[T[B]] }
{code}
The code above compiles, but if you swap the order of A and B,  it no longer will:
{code}
class S[_]
class T[_]

object A { implicitly[T[B]] }

case class B(x: Int)
object B {
  def makeST = (new S[B], new T[B])
  implicit val (s,t): (S[B],T[B]) = makeST
}
{code}
{noformat}
<console>:11: error: could not find implicit value for parameter e: T[B]
         implicitly[T[B]]
                   ^
{noformat}
Very sad indeed.  

The tuple has something to with it; this is ok:
{code}
class S[_]
class T[_]

object A { implicitly[T[B]] }

case class B(x: Int)
object B {
  def makeST = (new S[B], new T[B])
  implicit val s: S[B] = makeST._1
  implicit val t: T[B] = makeST._2
}
{code}
