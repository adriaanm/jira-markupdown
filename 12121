When I got agreement to allow definition and pattern matching on 23+ param case classes, this was the big caveat, but it was discussed and accepted. We chose not to increase our function arity limit as a solution to the problem.

Code generators / Macros need can access the signature of the `apply` method in the companion object with:
```scala
scala> case class Many(_0: Int, _1: Int, _2: Int, _3: Int, _4: Int, _5: Int, _6: Int, _7: Int, _8: Int, _9: Int, _10: Int, _11: Int, _12: Int, _13: Int, _14: Int, _15: Int, _16: Int, _17: Int, _18: Int, _19: Int, _20: Int, _21: Int, _22: Int, _23: Int)
defined class Many

scala> typeOf[Many.type].member(TermName("apply")).info
res9: $r.intp.global.Type = (_0: Int, _1: Int, _2: Int, _3: Int, _4: Int, _5: Int, _6: Int, _7: Int, _8: Int, _9: Int, _10: Int, _11: Int, _12: Int, _13: Int, _14: Int, _15: Int, _16: Int, _17: Int, _18: Int, _19: Int, _20: Int, _21: Int, _22: Int, _23: Int)Many
```

