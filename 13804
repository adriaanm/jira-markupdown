Look at this method:
{code}
  private def javaToScalaFlags(flags: Int): Long = {
    import ch.epfl.lamp.fjbg.JAccessFlags._
    
    var res = 0L
    if ((flags & ACC_PRIVATE) == 1) res |= Flags.PRIVATE
    if ((flags & ACC_PROTECTED) == 1) res |= Flags.PROTECTED
    if ((flags & ACC_FINAL) == 1) res |= Flags.FINAL
    if ((flags & ACC_ABSTRACT) == 1) res |= Flags.DEFERRED
    if ((flags & ACC_SYNTHETIC) == 1) res |= Flags.SYNTHETIC

    res
  }
{code}

None of those flags will ever be set, because the bitwise & is against bit flags in various positions other than the rightmost.  Presumably what is intended is != 0 instead of == 1.  It seems like things ought to be pretty broken because of this, but it was introduced in r13014 and nobody has noticed, so maybe this isn't used the way it appears? I haven't had time yet to figure out exactly where this is having an impact, if anywhere.
