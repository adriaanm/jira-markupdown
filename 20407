```scala
    class Case2 {
      trait Container[+A] {
        def addAll[B >: A, T2 <: Container[B]](that: T2): Boolean
      }

      def t1: Container[Int] = ???
      def t2: Container[Any] = ???

      // Works
      t1.addAll[Any, Container[Any]](t2)

      // Errors:
      //* type mismatch; found : Case2.this.Container[Any] required: T2
      //* inferred type arguments [Int,Case2.this.Container[Any]] do not conform to method addAll's type parameter bounds [B >: Int,T2 <: Case2.this.Container[B]]
      t1.addAll(t2)
    }
```
Why can't least common supertype be inferred?
