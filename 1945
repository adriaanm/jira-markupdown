I am not sure how to explain this any more than it is already explained, but I can offer some concrete measures for "me" vs. "status quo".

Me: no exceptions from java reflection.
Status quo: lots of exceptions from java reflection.

For this code sample:
```scala
package s {
  object o1 {
    object o2 { object o3; class o3 }
    class o2  { object o3; class o3 }
  }
  class o1 {
    object o2 { object o3; class o3 }
    class o2  { object o3; class o3 }
  }
}
```

Me: It compiles and creates the appropriate classfiles for eight distinct entities, each of which has correct and consistent names.
Status quo: It does this.
```scala
scalac ./a.scala
./a.scala:4: error: name clash: class o2 defines object o3
and its companion object o2 also defines class o3
    class o2  { object o3; class o3 }
                       ^
./a.scala:4: error: name clash: class o2 defines class o3
and its companion object o2 also defines class o3
    class o2  { object o3; class o3 }
                                 ^
./a.scala:7: error: name clash: class o1 defines object o2
and its companion object o1 also defines class o2
    object o2 { object o3; class o3 }
           ^
./a.scala:8: error: name clash: class o1 defines class o2
and its companion object o1 also defines class o2
    class o2  { object o3; class o3 }
          ^
./a.scala:8: error: name clash: class o2 defines object o3
and its companion object o2 also defines class o3
    class o2  { object o3; class o3 }
                       ^
./a.scala:8: error: name clash: class o2 defines class o3
and its companion object o2 also defines class o3
    class o2  { object o3; class o3 }
                                 ^
6 errors found
```

It seems like status quo should be armed with more than some nebulous and as-yet unfalsifiable analysis.
