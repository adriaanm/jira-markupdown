When a package protected method is defined in a scala class and this class is extended in java and overridden with protected then this doesn't compile.

This has been around since scala 2.7.7

parent.scala
```
package com

class ParentClass {
  protected[com] def myMethod() = 1
}
```


ChildClass.java
```
package com;

public class ChildClass extends ParentClass {
  @Override
  protected int myMethod() { return 2; }
}
```
```
C:\scala-2.10.0-M5\myexamples4>scalac parent.scala

C:\scala-2.10.0-M5\myexamples4>javac -d . -target 1.5 -cp .;../lib/scala-library
.jar ChildClass.java
ChildClass.java:5: myMethod() in com.ChildClass cannot override myMethod() in co
m.ParentClass; attempting to assign weaker access privileges; was public
  protected int myMethod() { return 2; }
                ^
1 error
```

As an extra remark: it is curious that scala-library.jar is needed to compile the java file. Every feature in the scala file can be mapped 1 on 1 to java. Probably the ScalaSignature is not really needed. Without the dependency I get an extra warning:
```
C:\scala-2.10.0-M5\myexamples4>javac -d . -target 1.5 ChildClass.java
.\com\ParentClass.class: warning: Cannot find annotation method 'bytes()' in type 'scala.reflect.ScalaSignature': class file for scala.reflect.ScalaSignature not found
ChildClass.java:5: myMethod() in com.ChildClass cannot override myMethod() in co
m.ParentClass; attempting to assign weaker access privileges; was public
  protected int myMethod() { return 2; }
                ^
1 error
1 warning
```

The other way around compiles normally:

ParentClass.java
```
package com;

public class ParentClass {
  protected int myMethod() { return 1; }
}
```

child.scala
```
package com

class ChildClass extends ParentClass{
  override protected[com] def myMethod() = 2
}
```

So it looks like java protected => scala package protected interop is a one way street.
