Replying to [comment:10 extempore]:
> Replying to [comment:8 dragos]:
> > If I am not mistaken, InnerClasses attributes have to be consistent across a JVM, so the same class cannot appear as having different outer classes in different class files.
> 
> Not that I think pursuing inconsistency is the way to go, but the spec says "The Java virtual machine does not currently check the consistency of the InnerClasses attribute with any class file actually representing a class or interface referenced by the attribute."

I vaguely remember having tried to set the outer class to be the current class, so `Outer` for the mirror class, and `Outer$$` for the module class, and getting runtime exceptions on the JVM. I don't think the spec talks about the same thing. I understand it as the outer name might not exist as a class on the class path. What I was hinting at, is having two different, loaded and linked classes, `Outer` and `Outer$$`, which have different outer entries for the same inner class. Maybe it was this bug: SI-1167.

I think this is quite easy to hack, but I am a bit short on time until next week. If someone here is ready to do it, I can point out relevant pieces of code. 

> With respect to this issue, I would say anytime "using scala from java" comes into conflict with other reasonable goals, "using scala from java" should lose out, especially if it's just "using scala from java with pretty names." (I do think "using java from scala" should be a high priority.)

Agreed. So you would make inner classes member of the module class, and live with '$$' names in Java? That was the way it worked some time ago, then it was 'fixed' to support nicer names for inner classes. I don't remember all the arguments, but we should check at least SI-1126 before doing the change.
