I believe that HotSpot will get rid of the impossible cases:

{code}
void SharkTopLevelBlock::do_instance_check() {
  // Get the class we're checking against
  bool will_link;
  ciKlass *check_klass = iter()->get_klass(will_link);

  // Get the class of the object we're checking
  ciKlass *object_klass = xstack(0)->type()->as_klass();

  // Can we optimize this check away?
  if (static_subtype_check(check_klass, object_klass)) {
    if (bc() == Bytecodes::_instanceof) {
      pop();
      push(SharkValue::jint_constant(1));
    }
    return;
  }

  // Need to check this one at runtime
  if (will_link)
    do_full_instance_check(check_klass);
  else
    do_trapping_instance_check(check_klass);
}
{code}

But it would be nice to eliminate them on our side on a bytecode size argument. I'm not sure whether this (@specialized + type casing) comes up enough to make it high priority.

But we could immediately remove the code from Duplicators that no longer has the intended effect.
