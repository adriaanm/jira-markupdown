Some of the results from :kind are difficult to justify. The sum total of the documentation I can find is "display the kind of expression's type" so if there is some non-standard notion of kind (and/or expression) being applied here it would be nice to document it. The one line of documentation is already on shaky ground - all expressions (as the word is normally used) have the same kind.

There is more confusion as to whether :kind is providing the kind of an "expression" or of a "type". As the kind of an expression is uninteresting, it should interpret the input as describing an unapplied type whenever possible. But in the following example it prefers the expression meaning over the type-constructor meaning, which leads to absurdity.
```
// Apparently treating this as the value expression Predef.Pair
scala> :kind -v Predef.Pair
scala.Predef.Pair's kind is A
*
This is a proper type.

// Same treatment for the type expression describing that value
scala> :kind -v Predef.Pair.type
scala.Predef.Pair's kind is A
*
This is a proper type.

// Now it figures out we meant the type constructor.
// Why would anyone ask for the kind of Predef.Pair the value?
// And the kind of Pair[Int, Int] is * - it's not a type constructor.
scala> :kind -v Predef.Pair[Int, Int]
scala.Tuple2's kind is F[+A1,+A2]
* -(+)-> * -(+)-> *
This is a type constructor: a 1st-order-kinded type.
```

Here are some more anomalies noted in brief experimentation.
```
// I don't know what is the benefit of 'kind A' over 'kind *',
// and with no explanation offered in the brief documentation.
scala> :kind 5
scala.Int's kind is A

// an applied type should have kind *
scala> :k -v List[Int]
scala.collection.immutable.List's kind is F[+A]
* -(+)-> *
This is a type constructor: a 1st-order-kinded type.

// So List[Int] gets one answer and List[Int]() another
// Furthermore, it appears to be telling me the kind of List's 
// companion object, which is irrelevant to the given expression
// and most likely only correct by accident since all expressions
// (should) have this kind.
scala> :k -v List[Int]()
scala.collection.immutable.List's kind is A
*
This is a proper type.

// no, that's a value of type Function1[Int, Int] with kind *
scala> :k -v (x: Int) => x + 1
scala.Function1's kind is F[-A1,+A2]
* -(-)-> * -(+)-> *
This is a type constructor: a 1st-order-kinded type.

// no response - crash?
scala> :kind def f[A](x: A) = x

scala>
```
