Here's a workaround that could be used in the meanwhile:

{code}
import scala.reflect.runtime.universe._
import scala.reflect.runtime.currentMirror
import scala.tools.reflect.ToolBox

object Test extends App {
  def getUnderlyingCompiler(tb: ToolBox[_]): scala.tools.nsc.Global = {
    val m_withCompilerApi = tb.getClass.getDeclaredMethods.filter(_.getName == "withCompilerApi").head
    val withCompilerApi = m_withCompilerApi.invoke(tb)
    val m_api = withCompilerApi.getClass.getDeclaredMethods.filter(_.getName == "api").head
    m_api.setAccessible(true)
    val api = m_api.invoke(withCompilerApi)
    val m_compiler = api.getClass.getDeclaredMethods.filter(_.getName == "compiler").head
    m_compiler.invoke(api).asInstanceOf[scala.tools.nsc.Global]
  }
  def resetCorruptedState(tb: ToolBox[_]): Unit = {
    val compiler = getUnderlyingCompiler(tb)
    compiler.globalPhase = compiler.currentRun.typerPhase
  }

  val tb = currentMirror.mkToolBox()
  tb.compile(q"true > true")
  resetCorruptedState(tb)
  tb.typecheck(q"true > true")
}
{code}
