A function is also a partial function, one where isDefinedAt always yields true.  Thus, the current direction of inheritance is backwards from the subtyping relation.

It would be tramatic to reverse the inheritance at this point, so how about we equate them?  The PartialFunction's would be aliases to the Function's, and there would be a default implementation of isDefinedAt that always returns true.

This shows up in practice if a function expects a PartialFunction and you try to pass it a closure.  By subtyping arguments, it would be polite of you to write as many methods as possible to accept PartialFunctions instead of merely complete functions.  Currently this is awkward in Scala, though, because if you accept PartialFunction's then callers cannot use any of the closure syntaxes to specify the argument!

It's not a big deal, but it is unhappy to explain, and upon seeing an explanation, theoreticians might well grouse.

