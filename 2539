Here's the path the compiler takes. The problem is that right after the Namer creates a symbol for the package object `generic` (in `enterSym`) it calls its type completer in the method `openPackageModule`.

I don't know why the cycle only happens in scaladoc, but not when compiling. I guess it's because of a lucky / unlucky order of compilation units.

I'm not sure what the right fix is, where should we break this cycle?

{code}
source code of classes involved:

  package scala {
    trait ScalaObject extends AnyRef
  }

  package scala {
    package object scala extends ScalaObject
  }

  package scala.collection.generic {
    package object generic extends ScalaObject
  }


Namer does enterSym(PackageDef "package generic") =>
           enterSym(ModuleDef "object generic") => because it's a package object
           openPackageModule(Symbol "object generic") =>

compute the info of symbol "object generic"

           sym.info => typeSig("object generic extends ScalaObject") =>
           typedIdent("ScalaObject") => TEST: isInPackageObject(Symbol "trait ScalaObject") =>

compute the info of "trait ScalaObject"

           sym.info => typeSig("trait ScalaObject extends AnyRef") =>
           typedIdent("AnyRef") => TEST: isInPackageObject(Symbol "type AnyRef") =>

search for "AnyRef" in "package object scala"

           (Type "object package").member("AnyRef") => baseClasses.head.info.decls => // baseClasses.head is "trait ScalaObject"

  === cycle ===>  (Symbol "trait ScalaObject").info
{code}
