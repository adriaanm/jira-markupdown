Hi Paul, hi Everybody,

I have checked this issue today with 2.9.0.RC1. First I saw that the defect has been
successfully fixed for "normal cases". Then I tried (jar on http://www.assembla.com/spaces/scala-graph/documents)

{code}
:cp Graph-2.9.0.RC1.jar
import collection.Graph, collection.GraphPredef._, collection.GraphEdge._
Graph(2~3) // REPL-output: ... = Graph(3, 2, GraphBase(2, 3))
{code}

and

{code}
Graph(2~3).toString // REPL-output: ... = Graph(3, 2, 2~3)
{code}

Clearly, I'd expect the same output from REPL as when calling toString.

So I have the following questions:

1) Does REPL use toString on the instantiated object or not?[[BR]]
2) If not, in which cases doesn't it?[[BR]]
3) Why appears the prefix "GraphBase" which is the name of a super trait of the instance?[[BR]]
4) Is the above behavoir by design?[[BR]]
5) Is it necessary to narrow down my case?[[BR]]
6) Do you have some suggestions on how to alter the code to be "compatible" with REPL?

It would be a pitty for future users of `collection.Graph` if they could not see the correct output in REPL.

Many thanks, Peter
