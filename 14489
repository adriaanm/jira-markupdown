I'm raising this as a defect as I have been told (by David Pollak) that this should work in Scala. Otherwise I would think it is a RFE. The scala compiler will let me *implement* an abstract def with a var as follows:

  public trait MySuper { def foo: String }
  public class MyImpl extends MySuper { var foo = "Bar" }

However, if I want to provide a default implementation of foo at the super-level:

  public trait MySuper { def foo: String = System.getProperty("foo") }

This causes MyImpl to fail to compile (as I do not declare the override qualifier). Adding the overrride qualifier:

  public class MyImpl extends MySuper { override var foo = "Bar" }

This will not compile either because the compiler complains that it cannot find a setter foo_ on the superclass to override. I believe that the compiler should interpret the override modifier against a var in a less strict manner and allow it, assuming that one of a getter/setter exists on the super-type.
