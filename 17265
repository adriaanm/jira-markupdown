{code}
object Test {
  case class Foo[T](value: T)                                                          
  trait Bar[TC[_]]                                                                     
                                                                                     
  implicit val _string = Foo("s")
  implicit val _int = Foo(42)                                                                                                               
                                                                                     
  implicit def bar[T](implicit tc: Foo[T]) = new Bar[Foo] {} 
                                                                                     
  implicitly[Bar[Foo]]  // IMPLICIT NOT FOUND Instead of AMBIGOUS
}
{code}

Originated from the discussion on scala-debate: 
https://groups.google.com/forum/#!topic/scala-debate/r2A8AVkNWvM
