There are no interproject references, so that is not a problem.

You generally need to be more specific about the scalac options configured for Scala projects.  Perhaps you are unaware of this, but the Eclipse UI is a maze of twisty passages, aka the Winchester Mystery UI (a house in Silicon Valley, continuously enhanced by the heir to the Winchester rifle fortune).  I will look in the usual places, but I would not bet money that I had found all the knobs.

If there is a standard pile of information that you need for debugging problems, you ought to add a button for generating it in an easy to select/copy/paste form, or a standard file that people could attach.  Eclipse, at least on a Mac, has not quite reached the current millennium in its implementation of select/copy/paste, so often, the most efficient way to get information out is to take "pictures" of windows.  "Most efficient" is still plenty cumbersome, especially when the pictures exceed your attachment size limit.

I checked right-click-Project > Properties > Scala Compiler Properties to get.  Looks like defaults to me.

[[Image(ScalaSettings.png)]]

I checked build.xml (also available at [https://projectfortress.sun.com/Projects/Community/browser/trunk/ProjectFortress/build.xml build.xml] ) , and it looks very ordinary to me, too:
```scala
  <target name="compileAll" depends="compileCommon, makeAST, parser, operatorsGen"
          description="Compile all Fortress code.">
    <scalac
        srcdir="${src}"
        destdir="${build}"
        classpathref="compile.classpath"
        deprecation="yes">
      <include name="**/*.java"/>
      <include name="**/*.scala"/>
      <exclude name="${usefulPackage}/*.java"/>
      <exclude name="${unicodePackage}/*.java"/>
    </scalac>
    <javac
        srcdir="${src}"
        destdir="${build}"
        debug="true"
        includeantruntime="false"
        fork="true"
        memorymaximumsize="${junitMem}">
      <!-- Uncomment the following line to print unchecked warnings
           (here and in the 'compileCommon' target. -->
      <!-- <compilerarg value="-Xlint:unchecked"/> -->
      <classpath refid="compile.classpath"/>
      <include name="**/*.java"/>
      <exclude name="${usefulPackage}/*.java"/>
      <exclude name="${unicodePackage}/*.java"/>
    </javac>
  </target>
```

And the Eclipse error log, would that be workspace/.metadata/.log ?  I triggered a rebuild (Project > Clean...) and no new entries appeared.

I have a minor theory, and it is that there is something different about the search paths or scope being used to compile within Eclipse, vs outside.  Superficially, the errors being reported are in fact correct, but they are not reported by the compiler, presumably because it has some additional disambiguating context (I am NOT a Scala expert).  Is there any way to get at that information?

And barring that, are there any Scala plugins for any other IDEs that might work better?
