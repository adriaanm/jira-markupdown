From a DSL perspective, omitting this creates illusion that a member was inherited.

Here, subclass is free to define its own help without override, or invoke help without this. Workaround is to mix-in.
```scala
object X extends App {
  implicit class `app help`(val app: App) {
    def help() = { println("Help!") ; sys.exit(0) }
  }
  println("Run")
  help()         // would be nice
}
```
