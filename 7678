As displayed in the debugger, `tvar` is a refinement type:
```scala
Test.universe.RefTree with Test.universe.SymTree with Test.universe.NameTree
```

Mapping over this type goes into:
```scala
case rtp @ RefinedType(parents, decls) =>
  val parents1 = parents mapConserve this
  val decls1 = mapOver(decls)
  //if ((parents1 eq parents) && (decls1 eq decls)) tp
  //else refinementOfClass(tp.typeSymbol, parents1, decls1)
  copyRefinedType(rtp, parents1, decls1)
```

`parents` for this refinement type are:
```scala
Test.universe.RefTree // TypeRef(pre = Test.universe.type, sym = type RefTree /* AbstractTypeSymbol */, args = Nil)
Test.universe.SymTree with Test.universe.NameTree // RefinementTypeRef (pre = NoType, sym = Universe /* RefinementClassSymbol */, args = Nil)
```

`tvars map instantiate` in Infer.scala calls `instantiate`:
```scala
object instantiate extends TypeMap {
  private var excludedVars = immutable.Set[TypeVar]()
  def apply(tp: Type): Type = tp match {
    case WildcardType | BoundedWildcardType(_) | NoType =>
      throw new NoInstance("undetermined type")
    case tv @ TypeVar(origin, constr) if !tv.untouchable =>
      if (constr.inst == NoType) {
        throw new DeferredNoInstance(() =>
          "no unique instantiation of type variable " + origin + " could be found")
      } else if (excludedVars(tv)) {
        throw new NoInstance("cyclic instantiation")
      } else {
        excludedVars += tv
        val res = apply(constr.inst)
        excludedVars -= tv
        res
      }
    case _ =>
      mapOver(tp)
  }
}
```

When navigating the second parent, `instantiate` sees `NoType` in `pre` and bails with NoInstance.
