Replying to [comment:8 DRMacIver]:
> Ah, right. The final modifier is neccessary. I missed that.
> 
> However! If you change my above code to make foreach final, this code just hangs indefinitely. In particular it does not overflow the heap. So Stream can be fixed without a compiler change. 

That was exactly what I was trying to achieve, glad it works at least for some. I tried both my change (directly on `scala.Stream`) and your smaller example, both die with `OutOfMemory` after aprox. 15 seconds (java 1.5.0_13).

{code}
scala -cp classes/ newstream.StreamTest
java.lang.OutOfMemoryError: Java heap space
	at scala.runtime.BoxesRunTime.boxToInteger(Unknown Source)
	at newstream.StreamTest$$.from(testStream.scala:28)
	at newstream.StreamTest$$$$anonfun$$from$$1.apply(testStream.scala:28)
	at newstream.StreamTest$$$$anonfun$$from$$1.apply(testStream.scala:28)
	at newstream.Cons.tail(testStream.scala:17)
	at newstream.Stream.foreach(testStream.scala:10)
	at newstream.StreamTest$$.<init>(testStream.scala:29)
	at newstream.StreamTest$$.<clinit>(testStream.scala)
	at newstream.StreamTest.main(testStream.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at scala.tools.nsc.ObjectRunner$$$$anonfun$$run$$1.apply(ObjectRunner.scala:75)
	at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
	at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:161)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
dragos-mbp:sandbox dragos$$ java -version
java version "1.5.0_13"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_13-b05-237)
Java HotSpot(TM) Client VM (build 1.5.0_13-119, mixed mode, sharing)
{code}
