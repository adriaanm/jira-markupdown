If you have a PagedSeq with enough elements to make up more pages than frames will fit on the stack, and you slice it past the first page, you'll get a stack overflow error. For example:
```scala
object Test extends App {
  val r = new java.io.StringReader("a" * 30000000)
  val s = scala.collection.immutable.PagedSeq.fromReader(r)
  println(s.slice(4096, s.length).length)
}
```

Crashes with the following error:
```scala
java.lang.StackOverflowError
        at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
        at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
        ...
        at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
        at scala.collection.immutable.PagedSeq.latest(PagedSeq.scala:138)
        at scala.collection.immutable.PagedSeq.length(PagedSeq.scala:157)
        at Test$delayedInit$body.apply(Test.scala:4)
        at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
        at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
        at scala.App$$anonfun$main$1.apply(App.scala:60)
        at scala.App$$anonfun$main$1.apply(App.scala:60)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:30)
        at scala.App$class.main(App.scala:60)
        at Test$.main(Test.scala:1)
        at Test.main(Test.scala)
        ...
```

This problem turns up pretty easily when using parser combinators; see for example [this Stack Overflow question](http://stackoverflow.com/q/13213646/334519).
