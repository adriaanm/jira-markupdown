I really think there should be some backstop which prevents code with ErrorTypes from waltzing all the way from typer to pickler to crash there.  I found that even avoiding pickling doesn't help: the error isn't caught in refchecks, and it crashes once something tries to deal with the ErrorType.

The error is due to the qualifier being inaccessible (it's private[collection]).
```scala
package demo

import scala.collection._

class CrashDemo {
  def statusByAlarms(alarms: GenTraversableOnce[FooAlarm]) = println("hello")
}
class FooAlarm { }
```
```scala
scalac29 ./0430.scala 
error: scala.tools.nsc.FatalError: bad type: <error>(class scala.tools.nsc.symtab.Types$$ErrorType$$)
	at scala.tools.nsc.symtab.classfile.Pickler$$Pickle.scala$$tools$$nsc$$symtab$$classfile$$Pickler$$Pickle$$$$putType(Pickler.scala:214)
	at scala.tools.nsc.symtab.classfile.Pickler$$Pickle.putSymbol(Pickler.scala:133)
	at scala.tools.nsc.symtab.classfile.Pickler$$Pickle$$$$anonfun$$putSymbols$$1.apply(Pickler.scala:158)
	at scala.tools.nsc.symtab.classfile.Pickler$$Pickle$$$$anonfun$$putSymbols$$1.apply(Pickler.scala:158)
	at scala.collection.LinearSeqOptimized$$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:45)
```
