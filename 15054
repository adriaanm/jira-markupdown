In Inliners.scala you can find the following code:
```scala
       if (caller.code.blocks.length <= SMALL_METHOD_SIZE 
           && ((caller.code.blocks.length + callee.code.blocks.length) > SMALL_METHOD_SIZE)) {
         score -= 1
         if (settings.debug.value)
           log("shouldInline: score decreased to " + score + " because small " + caller + " would become large")
       }
```

where `SMALL_METHOD_SIZE` is set to 1. AFAIU this should prevent branch-free methods to become branch-y because of inlining.

`caller.code.blocks.length + callee.code.blocks.length` is here the estimation of the new code complexitity. But this means that even a simple method with 1 block can't be inlined into another simple method with 1 block because it estimates the resulting number of blocks as 2 instead of 1. I would propose to use 
```scala
caller.code.blocks.length + callee.code.blocks.length - 1
```
instead or more exact
```scala
caller.code.blocks.length + Math.max(0, callee.code.blocks.length - 1)
```

This simple change would make inlining possible at many more positions.
