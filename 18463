
In the example below, there's a jumping-Apply-node "{{matchEnd4}}" whose argument "{{while$1}}" has an {{isLabel}} symbol (that's no surprise because that argument is itself a {{LabelDef}} ).

SI-6089 (initially) makes me believe that's non-well-formed, on the other hand the emitted bytecode is fine. Please bring clarity to the issue.

{code:title=Test.scala|borderStyle=solid}
object Test {

  def main(args: Array[String]) {
    args(0) match {
      case a: String => while(a == null) {}
    }
  }

}
{code} 


{noformat}
[[syntax trees at end of                   cleanup]]
package <empty> {
  <module> object Test extends Object {
    <method> def main(args: Array[String]): scala.this.Unit = {
      case <synthetic> val x1: String = args.apply(0);
      case5(){
        if (x1.ne(null))
          {
            <synthetic> val x2: String = x1;
            matchEnd4(while$1(){
              if (x2.$eq$eq(null))
                {
                  ();
                  while$1()
                }
              else
                ();
              scala.runtime.BoxedUnit.UNIT
            })
          }
        else
          case6()
      };
      case6(){
        matchEnd4(throw new MatchError.<init>(x1))
      };
      matchEnd4(x: runtime.this.BoxedUnit){
        ()
      }
    };
    <method> def <init>(): <empty>.this.Test.type = {
      Test.super.<init>();
      ()
    }
  }
}
{noformat}
