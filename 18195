Verbose class locations are eliminated while compiling macros, but this verbosity can be crucial when they are used.
to reproduce:

{code:title=package1/A.scala}
package package1
class A {
  def doNothing = macro A.doNothing
}
object A {
  def doNothing(c:Context):c.Expr[Unit] = {
    import c.universe._
    val kernel = reify {
      val l = Utility.nil
    }
    c.inlineAndReset(kernel)
  }
}
```scala
{code:title=package1/Utility.scala}
package package1
object Utility{
val nil = new AnyRef{}
}
```

those macros will compile successfully, but if Someone tryies to use them:

{code:title=package2/D.scala}
package package2
import package1.A

object D {
 val nothing = new A.doNothing
}
```scala
will generate compile error:
not found: value Utility

it generates such AST
```
{
  val l = Utility.nil;
  ()
}
Block(List(ValDef(Modifiers(), newTermName("l"), TypeTree(), Select(Ident(newTermName("Utility")), newTermName("nil")))), Literal(Constant(())))
{code}
