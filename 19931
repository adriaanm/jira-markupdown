The type of scala.collection.immutable.ListMap.keys is collection.Iterable[A].  However, the underlying implementation returns a Set[A]:
```scala
scala> import scala.collection.immutable.ListMap
import scala.collection.immutable.ListMap

scala> val m = ListMap("a" -> "1", "b" -> "2", "c" -> "3", "d" -> "4", "e" -> "5")
m: scala.collection.immutable.ListMap[String,String] = Map(a -> 1, b -> 2, c -> 3, d -> 4, e -> 5)

scala> m.keys
res0: Iterable[String] = Set(a, b, c, d, e)
```

This causes inconsistent behavior between ListMap's map() and foreach() and ListMap.keys' map() and foreach():
```scala
scala> val ks = m.keys.toList
ks: List[String] = List(a, b, c, d, e)

scala> val upper = m.keys.map(_.toUpperCase).toList
upper: List[String] = List(E, A, B, C, D)  // WTF???
```

It seems it would be best if ListMap had an override of keys to instead provide a List at run time.
