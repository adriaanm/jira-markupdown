1)

Naming a simple script like a method makes the interpreter fail if you call that particular method

--- println.scala
#!/usr/bin/env scala
!#
println("Hello, scalable world!")

Running it:

println.scala:4: error: expected class or object definition
println("Hello, scalable world!")
^
java.lang.AssertionError: assertion failed
at scala.Predef$$.assert(Predef.scala:87)
...


2)

Interestingly also a *different* script, let's say A.scala, if located in the same directory doesn't work trying to use the println method, still the println call inside A.scala clashes with the other println.scala script. Same error as 1)

--- A.scala
#!/usr/bin/env scala
!#
println("Hello, scalable world!")

Running ./A.scala generates the same error again:

println.scala:4: error: expected class or object definition
println("Hello, scalable world!")
^
java.lang.AssertionError: assertion failed
at scala.Predef$$.assert(Predef.scala:87)

Moving A.scala in an upper or lower directory the script works as expected. Apparently the interpreter tries to run the println.scala script. There are no other relationships between A.scala and println.scala
