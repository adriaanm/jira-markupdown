I stumbled across this, too (in Scala 2.9.1). Sealed traits are very important because you they can, as opposed to an abstract class, participate in multiple sealed hierarchies.

{code}
object Order {
   sealed trait EntryOption
   case object EmptyEntry extends EntryOption
   trait Entry extends EntryOption
   
   // this doesn't emit a warning:
   def isEmpty( a: EntryOption ) : Boolean = a match {
      case EmptyEntry => true
//    case _: Entry   => false
   }
}
{code}
