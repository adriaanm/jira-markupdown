Various implementations of iterate call the function argument one too many times.  This is a real killer if you're trying to write "tails".

Expected behavior:
{code}
scala> Stream.iterate(Stream(1,2,3), 3)(_.tail) toList
res0: List[scala.collection.immutable.Stream[Int]] = List(Stream(1, 2, 3, ?), Stream(2, 3, ?), Stream(3, ?))

scala> Stream.iterate(Stream(1,2,3), 4)(_.tail) toList
res1: List[scala.collection.immutable.Stream[Int]] = List(Stream(1, 2, 3), Stream(2, 3), Stream(3), Stream())
{code}

Unexpected behavior:
{code}
scala> List.iterate(List(1,2,3), 3)(_.tail)           
res2: List[List[Int]] = List(List(1, 2, 3), List(2, 3), List(3))

scala> List.iterate(List(1,2,3), 4)(_.tail)           
java.lang.UnsupportedOperationException: tail of empty list
	at scala.collection.immutable.Nil$$.tail(List.scala:388)
	at scala.collection.immutable.Nil$$.tail(List.scala:383)
	at $$anonfun$$1.apply(<console>:6)
	at $$anonfun$$1.apply(<console>:6)
	at scala.collection.generic.TraversableFactory.iterate(TraversableFactory.scala:232)
{code}
It looks like the logic is duplicated multiple places, too:
{code}
scala> Array.iterate(Array(1,2,3), 4)(_.tail)
java.lang.UnsupportedOperationException: empty.tail
	at scala.collection.TraversableLike$$class.tail(TraversableLike.scala:491)
	at scala.collection.mutable.ArrayOps.scala$$collection$$IndexedSeqOptimized$$$$super$$tail(ArrayOps.scala:35)
	at scala.collection.IndexedSeqOptimized$$class.tail(IndexedSeqOptimized.scala:133)
	at scala.collection.mutable.ArrayOps.tail(ArrayOps.scala:35)
{code}
