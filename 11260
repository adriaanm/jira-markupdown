After the patmat phase we see that the synthetic val `o8` now has a type containing existential skolems:
```
% (export V1=v2.11.0-M4; export V2=v2.11.0-M5; for v in $V1 $V2; do scalac-hash $v -Ydebug -Xprint:all test/files/pos/t8793.scala 2>&1 | tee sandbox/$v.log; done; diff -U100000 sandbox/$V1.log sandbox/$V2.log)
...
   <module> object H extends scala.AnyRef {
     <method> def <init>(): regr.this.H.type = {
       H.super.<init>();
       ()
     };
     <method> def unapply(g: regr.this.G): scala.this.Option[regr.this.F[_$1]] forSome { type _$1 } = {
       case <synthetic> val x1: regr.this.G = g;
       case6(){
-        <synthetic> <triedcooking> val o8: scala.this.Option[scala.this.Tuple2[regr.this.F[_$1],regr.this.F[_$2]] forSome { type _$1; type _$2 }] = G.unapply(x1);
+        <synthetic> <triedcooking> val o8: scala.this.Option[scala.this.Tuple2[regr.this.F[_$1&0],regr.this.F[_$2&0]]] = G.unapply(x1);
         if (o8.isEmpty.unary_$bang)
           {
-            <triedcooking> val a: regr.this.F[_$1] forSome { type _$1 } = o8.get._1;
+            <triedcooking> val a: regr.this.F[_$1] = o8.get._1;
             matchEnd5(scala.Option.apply[regr.this.F[_$1&0]](a))
           }
         else
           case7()
       };
       case7(){
         matchEnd5(throw new scala.this.MatchError.<init>(x1))
       };
-      matchEnd5(x: scala.this.Option[regr.this.F[_$1&0]]){
+      matchEnd5(x){
         x
       }
     }
   }
 }
```

Here's an analagous bug in scala-async: https://github.com/scala/async/pull/80#issuecomment-49193545
