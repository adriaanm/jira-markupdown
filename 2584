Ok, I did a mini-benchmark with this code:
```scala
def testRange(i: Int, j: Int, k: Int) = {
  var count = 0
  for {
    vi <- 0 to i
    vj <- 0 to j
    vk <- 0 to k
  } { count += 1 }
}
```

Then timed it with the following two settings:
```scala
testRange(10, 1000, 10000)
testRange(10000, 1000, 10)
```

Naturally, the former stresses `foreach` speed, while the latter stresses `Range` creation. I decided my original patch was too slow, so I have submitted another patch. This patch manages to be slightly faster than the original Range, by virtue of turning `length` from a `lazy val` into a `def`. I tried `val` too, but that was slower than either of the the other options.
