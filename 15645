In file TypeInf.scala:
{code}
object TypeInf {
  def doCompare[T](obj: T, compare: Compare[_ >: T]): Unit = compare.doit(obj)

  def makeCompare[V](s: String)
       (implicit m: Manifest[V])
      : Compare[V] = {
    new Compare[V](s)
  }

  class Compare[-U](s: String)
     (implicit m: Manifest[U])
  {
    def doit(o: Any) {
      // if (m.erasure.isInstance(o)) ..... else ....
    }
  }

  class Foo { }

  def main(args: Array[String]) {
    val foo = new Foo
    doCompare(foo, makeCompare("hi"))
  }
}
{code}
# scalac -version
Scala compiler version 2.8.0.r22899-b20100901150925 -- Copyright 2002-2010, LAMP/EPFL

# scalac TypeInf.scala
TypeInf.scala:23: error: type mismatch;
 found   : scala.reflect.Manifest[Nothing]
 required: Manifest[V]
    doCompare(foo, makeCompare("hi"))
                              ^
one error found
