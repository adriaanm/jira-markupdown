In the Scala Reference, existential clauses are described as 
{code}
ExistentialClauses ::= forSome { ExistentialDcl
                          {semi ExistentialDcl} }
ExistentialDcl     ::= type TypeDcl
                     |  val ValDcl
{code}
However, it says that "An existential type has the form T forSome {Q} where Q is a sequence of type declarations", which seems to contradict that fact that value declarations are allowed by this grammar.  The parser seems to have code to handle value declarations, but I could not come up with a simple example that was accepted by the compiler.  If this is not an error in the definition, perhaps expand the discussion to clarify the meaning of existentially quantified value declarations.
