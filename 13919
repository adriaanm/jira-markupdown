The following code type checks as expected, assuming we ignore Scala's presently broken intersection type semantics:
```scala
scala> trait A { type T <: Int }                  
defined trait A

scala> trait B { type T <: String }
defined trait B

scala> trait C { val x : A; val y : x.type#T }              
defined trait C

scala> trait D extends C { val x : A with B; val z = y.charAt(0) }
defined trait D
```
but the following does not
```scala
scala> trait A { type T = Int }                                   
defined trait A

scala> trait B { type T = String }                                
defined trait B

scala> trait C { val x : A; val y : x.type#T }                    
defined trait C

scala> trait D extends C { val x : A with B; val z = y.charAt(0) }
<console>:7: error: value charAt is not a member of D.this.x.T
       trait D extends C { val x : A with B; val z = y.charAt(0) }
```
This is extremely problematic as it masks several other severe bugs in the type system.
