The following may or may me a feature request after all.  ;-)

The source code at the end of this description is the minimal example I've been able to derive that exhibits the problem, which is emitting the following error message for the program which is actually type-safe:

{code}
error: type mismatch;
 found   : Parser.this.Nonterminal[Parser.this.NumberOutput]
 required: this.SubNonterminal
  val expr = new Nonterminal[ExprOutput] { nt=number }
                                              ^
{code}

Presumably the subtype relation is not detected because it is not taken into account that the declarations in this program provide enough information to conclude that NumberOutput is a subtype of ExprOutput, which is again presumably because the combination of with and lower bounds is not exploited aggressively enough when collecting information about the type relations.

Here is the source code, which was compiled with scalac 2.6.0-final:

{code}

abstract class Parser {
  class Nonterminal[Output] {
    type SubNonterminal = Nonterminal[T] forSome { type T <: Output }
    var nt: SubNonterminal = null
  }
  val number = new Nonterminal[NumberOutput]
  val expr = new Nonterminal[ExprOutput] { nt=number }
  type ExprOutput >: NumberOutput with SumOutput
  type NumberOutput
  type SumOutput
}

{code}
