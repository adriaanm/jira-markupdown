The following code:
```scala
trait Module {
  sealed trait Tree

  case class LetL() extends Tree
}

class Patmat[T <: Module](val module: T) {
  def patmat(tree: module.Tree) = tree match {
    case module.LetL() => ???
  }
}
```
Triggers the following warning:
```scala
patmat-acc.scala:8: warning: match may not be exhaustive.
It would fail on the following input: LetL()
  def patmat(tree: module.Tree) = tree match {
                                  ^
one warning found
```

The warning isn't triggered if
{code:scala}
class Patmat[T <: Module](val module: T)
{code} is replaced by
```scala
class Patmat(val module: Module)
```
