I just ran into this with Java8's Stream Collector.  This may become more of a problem as it is now happening with a Java standard library interface.

Example:

{code:java}
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
public class MyCollector implements Collector<Object, Object, Object> {
    @Override
    public Supplier<Object> supplier() {
        return null;
    }

    @Override
    public BiConsumer<Object, Object> accumulator() {
        return null;
    }

    @Override
    public BinaryOperator<Object> combiner() {
        return null;
    }

    @Override
    public Function<Object, Object> finisher() {
        return null;
    }

    /***
     * This breaks, because of Characteristics isn't directly imported.
     * 
     */
    @Override
    public Set<Characteristics> characteristics() {
        return null;
    }
}
{code}
