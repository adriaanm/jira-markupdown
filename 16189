The following code when compiled with Scala version 2.9.0-1 yields a different bytecode when compared to previous versions.
```scala
final class AtomTest(vIn:Int) {
      final val v = vIn       
      def square = v*v
}
```

For the method "square":
Scala 2.7.7 and 2.8.1 with -optimise :
```scala
public int square();
  Code:
   0:   aload_0
   1:   getfield        #12; //Field v:I
   4:   aload_0
   5:   getfield        #12; //Field v:I
   8:   imul
   9:   ireturn
```

Scala 2.9.0-1 with -optimise:
```scala
public int square();
  Code:
   0:   aload_0
   1:   invokevirtual   #14; //Method v:()I
   4:   aload_0
   5:   invokevirtual   #14; //Method v:()I
   8:   imul
   9:   ireturn
```

Note that invokevirtual is now being generated for field access.

I don't have a benchmark to prove that this degrades performance, for two reasons:
- A simple one class benchmark will get instantly optimised by JIT and will not show any degradation
- I have some production code which does run slowly with Scala 2.9.0-1 but there might be other factors affecting the performance of that code. For example, there seems to be a known degradation in Hashset addition method which my production code uses frequently.
