I noted that if on a Traversable[_] one calls
the "toArray", method and then calls on the
resulting array the methods "getClass.getComponentType",
one gets the type of the Traversable's component type.
This has three problems. First, it actually creates and
fills an array. On a TraversableOnce object it is
traversed to create the array. Lastly, for Maps,
as an example, the returned component type is simply
a Tuple2 without any more detailed information.
So, I added the method:


  def toEmptyArrayX[B >: A : Manifest]: Array[B] = {
    new Array[B](0)
  }

to TraversableOnce.scala. This solves the first two
problems, but the third problem still exists.
So, instead I added the method:

  def toEmptyArrayAndManifest[B >: A : Manifest]: (Array[B],Manifest[B]) = {
    (new Array[B](0), manifest)
  }

The manifest returned by the call will return for a Map, not
only that the component type is a Tuple2, but also the types
of the tuple's components.

For the attached Main.scala file this produces the output:

a.class=scala.collection.mutable.ArrayBuffer
a.manifest=Int
m.class=scala.collection.mutable.HashMap
m.manifest=scala.Tuple2[java.lang.String, Int]
hs.class=scala.collection.mutable.HashSet
hs.manifest=java.lang.String
l.class=scala.collection.immutable.Nil$
l.manifest=Short
ihs.class=scala.collection.mutable.HashSet
ihs.manifest=Float

Sweet!

I reduce this further to the method:

  def toManifest[B >: A : Manifest]: Manifest[B] = {
    manifest
  }

a.class=scala.collection.mutable.ArrayBuffer
a.manifest=Int
m.class=scala.collection.mutable.HashMap
a.manifest=scala.Tuple2[java.lang.String, Int]
hs.class=scala.collection.mutable.HashSet
a.manifest=java.lang.String
l.class=scala.collection.immutable.Nil$
a.manifest=Short
ihs.class=scala.collection.mutable.HashSet
a.manifest=Float

(Curiously, the build with this method does not always complete.
Many times by adding this method, the Scala compiler crashed
(actually, a JVM SegFault). But, sometimes
it did not crash and the "toManifest" method worked as expected.)

So, anyway, please add the "toEmptyArrayAndManifest" or
"toManifest" or something better to TraversableOnce so that all
Scala users may easily get a Scala Traversable's component types
at runtime.

Thanks.
