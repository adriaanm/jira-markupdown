The class `scala.util.parsing.input.StreamReader` that ships with 2.7.0 does not work when back-tracking after a line has been read. This is due to its incorrect usage of a stateful `java.io.BufferedReader` to implement something that should really be purely functional. The following program illustrates the problem:
```scala
import java.io.{File,StringReader}

import scala.util.parsing.combinator.Parsers
import scala.util.parsing.input.{CharArrayReader, StreamReader}

class TestParsers extends Parsers {
  type Elem = Char

  def p: Parser[List[Int]] = rep(p1 | p2)
  def p1: Parser[Int] = 'a' ~ nl ~ 'b' ~ nl ^^^ 1
  def p2: Parser[Int] = 'a' ~ nl ^^^ 2
  def nl: Parser[Int] = rep(accept('\n') | accept('\r')) ^^^ 0
}

object Main {
  def main(args: Array[String]): Unit = {
    val tstParsers = new TestParsers
    val s = "a\na\na"
    val r1 = new CharArrayReader(s.toCharArray())
    val r2 = StreamReader(new StringReader(s))
    Console.println(tstParsers.p(r1))
    Console.println(tstParsers.p(r2))
  }
}
```
Running it produces the following output:
```scala
[paine tmp]% /tmp/scala-2.7.0-final/bin/scala -cp classes Main
[3.2] parsed: List(2, 2, 2)
[3.1] parsed: List(2, 2)
```
which shows that the same parser applied to the same input seen through two different readers produces different results. The first one is correct, the second isn't because of the bug of `StreamReader`.
