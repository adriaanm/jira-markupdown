Note that there is an unchecked warning on each of those typed patterns, so it shouldn't be too surprising that it might not work as expected.

I think it is more the implementation of `isInstanceOf` and not necessarily erasure in general that is in question.  For example, `isInstanceof[A with B]` works as expected for class types `A` and `B`, so `isInstanceOf` is already a bit more specific than erasure.

I made a patch as a proof of concept that makes `isInstanceOf[T]` check the upper bound of T if it is an abstract type:

  http://github.com/harrah/scala-starrless/commit/236b4bf4c56

With the patch, the original example prints the same thing in both examples.

In any case, I think this is a duplicate of scala/bug#329.
