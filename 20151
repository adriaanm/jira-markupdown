When using ToolBox to typecheck a tree, e.g. created with quasiquotes, the reporting FrontEnd can miss some of the reported infos. 

[tools.reflect.FrontEnd uses a LinkedHashSet to store reported infos](https://github.com/scala/scala/blob/99a82be91cbb85239f70508f6695c6b21fd3558c/src/compiler/scala/tools/reflect/FrontEnd.scala#L25). The case class **Info** contains the position, a message and a severity. For quasiquotes, the position is always NoPosition and, thus, infos with the same severity and message are only stored once in the set.

The following code compiles a tree which should report two warnings, but it only gives me one:
```scala
    import scala.reflect.runtime.currentMirror
    import scala.reflect.runtime.universe._
    import scala.tools.reflect.{FrontEnd, ToolBox}

    val reporter = new FrontEnd {
      override def display(info: Info) {}
      override def interactive() {}
    }

    val toolbox = currentMirror.mkToolBox(reporter)
    val tree = q"object A { def foo[T](t: T) = 1.isInstanceOf[T]; def bar[T](t: T) = 1.isInstanceOf[T] }"
    val typedTree = toolbox.typecheck(tree)
    println(reporter.infos) // Set(Info(NoPosition,abstract type T is unchecked since it is eliminated by erasure,WARNING))
```

I would have expected to get a list of two warnings.
