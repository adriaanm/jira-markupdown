=== What steps will reproduce the problem (please be specific and use wikiformatting)? ===
{code}
build scaladoc on this file:


/**
 * A <code>Formatter</code> providing information that enables reporters to create more stylized output.
 *
 * <p>
 * An example is that specification-style suites, such as <code>Spec</code>, generate output that reads
 * more like a specification, for instance:
 * </p>
 *
 * <pre>
 * A Stack (when newly created)
 * - should be empty
 * - should complain when popped
 * </pre>
 *
 * <p>
 * This output might be generated by ScalaTest's standard out reporter. Each of these lines would be
 * taken from the <code>IndentedText</code>'s <code>formattedText</code> parameter. Were this same run
 * to be reported in HTML or in a GUI, the output would be based on the <code>rawText</code> and the
 * <code>indentationLevel</code>. Here's what the <code>IndentedText</code> values would be for each event:
 * </p>
 *
 * <ul>
 * <li><code>InfoProvided</code> reported with an:<br />
 * &nbsp;&nbsp;<code>IndentedText(<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;formattedText = "A Stack (when newly created)",<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;rawText = "A Stack (when newly created)",<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;indentationLevel = 0<br />
 * &nbsp;&nbsp;)</code>
 * </li>
 * <li><code>TestSucceeded</code> reported with an:<br />
 * &nbsp;&nbsp;<code>IndentedText(<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;formattedText = "- should be empty",<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;rawText = "should be empty",<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;indentationLevel = 1<br />
 * &nbsp;&nbsp;)</code>
 * </li>
 * <li><code>TestSucceeded</code> reported with an:<br />
 * &nbsp;&nbsp;<code>IndentedText(<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;formattedText = "- should complain when popped",<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;rawText = "should complain when popped",<br />
 * &nbsp;&nbsp;&nbsp;&nbsp;indentationLevel = 1<br />
 * &nbsp;&nbsp;)</code>
 * </li>
 * </ul>
 *
 * <p>
 * One possible way this information could be presented in HTML, for example, is this:
 * </p>
 *
 * <p>
 * <strong>A Stack (when newly created)</strong>
 * <ul>
 * <li>should be empty</li>
 * <li>should complain when popped</li>
 * </ul>
 * </p>
 *
 * @param formattedText a localized string suitable for presenting to a user by printing it straight to an output stream
 * @param rawText a localized string suitable for presenting to the user after in some way being indented by the
 *        value specified as the <code>indentationLevel</code> parameter
 * @param indentationLevel a zero or positive integer representing an indentation level for the indented text
 *
 * @throws IllegalArgumentException if the specified <code>indentationLevel</code> is less than zero
 */
final case class IndentedText(formattedText: String, rawText: String, indentationLevel: Int) extends Formatter {
  require(indentationLevel >= 0, "indentationLevel was less than zero: " + indentationLevel)
}

{code} 



=== What is the expected behavior? ===

See "Additional information" section

=== What do you see instead? ===

See "Additional information" section

=== Additional information ===
(for instance, a link to a relevant mailing list discussion)
often these methods from Scala show up without any
documentation. That makes the documentation look incomplete. This is
true of the !=, ##, $$asInstanceOf, $$isInstanceOf methods I mentioned
above, but also true of methods like canEqual, productArity, etc.,
that get generated for case classes. Would be nice to generate
documentation for those compiler-generated methods in Scaladoc. An
example is here:

http://www.artima.com/sdp/original/org/scalatest/events/IndentedText.html#

=== What versions of the following are you using? ===
  - Scala: Scala code runner version 2.8.1.final -- Copyright 2002-2010, LAMP/EPFL
  - Java: java version "1.6.0_18"
OpenJDK Runtime Environment (IcedTea6 1.8.7) (fedora-50.1.8.7.fc13-i386)
OpenJDK Server VM (build 14.0-b16, mixed mode)

  - Operating system: Linux localhost.localdomain 2.6.34.8-68.fc13.i686.PAE SI-1 SMP Thu Feb 17 14:54:10 UTC 2011 i686 i686 i386 GNU/Linux
