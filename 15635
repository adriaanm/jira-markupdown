I'm trying to figure out whether this is a bug. It comes about when you declare a method to be parameterized on some type T where there must be a typeclass in scope for T (e.g. TC[T]), but **only if you don't require that the method takes an actual parameter of type T**. Example:

This does not compile:
```scala
object PolymorphicBug {

  def main(args: Array[String]) {

    trait TC[I] { def foo : I }

    trait IntIsTC {
      implicit val tci = new TC[Int] { def foo = 1 }
    }

    case class Bar(s : String) {
      def baz[J : TC](i : Int) : String = s + " " + implicitly[TC[J]].foo.toString
    }
    trait Foo { def foodoo(i : String) =  Bar(i) }

    object DSL extends IntIsTC with Foo
    import DSL._
    foodoo("A") baz 2
    //()  --uncomment this line and it will compile
  }
}
```
The error is: "polymorphic expression cannot be instantiated to expected type; found [J] String, required: Unit"

Replace the declaration of the baz method as 
```scala
      def baz[J : TC](i : J) : String = s + " " + implicitly[TC[J]].foo.toString
```
And it compiles again.
