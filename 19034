This is a blocker for longer HLists of sizes of a few hundred elements, which is not uncommon for database table column numbers, e.g. http://stackoverflow.com/questions/22842486/eclipse-scala-ide-slow-and-crashes-caused-by-slick-generated-hcon-hlist

Hopefully there is room for speedup in Scalac for this.

I measured the following compile times on my machine:

* HList size 200: 16 seconds
* HList size 230: 25 seconds
* HList size 260: 75 seconds

Clearly the compile times are exponential in the length of the HList.

**Reproduce code:**
{code}
trait Tables {
  type Column[T]
  type HList
  type HNil <: HList
  type HCons[+Value, +Tail <: HList] <: HList
  type :: [+Value, +Tail <: HList] = HCons[Value, Tail]

  trait ShapeLevel
  object ShapeLevel{
    trait Nested extends ShapeLevel
    trait Flat extends Nested
    trait Columns extends Flat
  }

  abstract class Shape[Level <: ShapeLevel, -Mixed_, Unpacked_, Packed_]
  abstract class HListShape[Level <: ShapeLevel, M <: HList, U <: HList, P <: HList] extends Shape[Level, M, U, P]
  
  implicit def primitiveShape[Level <: ShapeLevel]: Shape[Level, String, String, Column[String]]
  implicit def hnilShape[Level <: ShapeLevel]: HListShape[Level, HNil, HNil, HNil]
  implicit def hconsShape[Level <: ShapeLevel, L1 <: Level, L2 <: Level, M1, M2 <: HList, U1, U2 <: HList, P1, P2 <: HList](implicit s1: Shape[L1, M1, U1, P1], s2: HListShape[L2, M2, U2, P2]) : HListShape[Level, M1 :: M2, U1 :: U2, P1 :: P2]

  type HList10[T <: HList] = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,T]]]]]]]]]]
  type HList100[T <: HList] = HList10[HList10[HList10[HList10[HList10[HList10[HList10[HList10[HList10[HList10[T]]]]]]]]]]

  type JobRow = HList10[HList10[HList10[HList10[HList10[HList10[HList100[HList100[HNil]]]]]]]] // size 260


  implicitly[Shape[_ <: ShapeLevel.Flat, JobRow, JobRow, _]] 
}
{code}
