Just upvoted this. It's been quiet for a long time now.
Our example: We have XML like this:
{code}
<dfdl:assert testKind="pattern"><![CDATA[(?x) # free form regex
abc # and a comment
#  more comment
def # that's all
</dfdl:assert>
{code}

We have unit tests where that appears as literal XML text in a scala/junit-like test. 
{code}
 @Test def testRegexWithFreeFormAndComments3() = {
    val testSuite =
      <tdml:testSuite suiteName="theSuiteName" xmlns:tns={ tns } xmlns:tdml={ tdml } xmlns:dfdl={ dfdl } xmlns:xsd={ xsd } xmlns:xs={ xsd } xmlns:xsi={ xsi }>
        <tdml:defineSchema name="mySchema">
          <dfdl:format ref="tns:daffodilTest1"/>
          <xsd:element name="data" type="xsd:string" dfdl:lengthKind="delimited">
            <xsd:annotation>
              <xsd:appinfo source="http://www.ogf.org/dfdl/">
                <!-- This assert passes only if free form works, and comments work. -->
                <dfdl:assert testKind='pattern'><![CDATA[(?x) # free form
abcd # a comment
# a line with only a comment
123 # another comment
]]></dfdl:assert>
              </xsd:appinfo>
            </xsd:annotation>
          </xsd:element>
        </tdml:defineSchema>
        <tdml:parserTestCase xmlns={ tdml } name="testRegex" root="data" model="mySchema">
          <tdml:document>
            <tdml:documentPart type="text"><![CDATA[abcdef]]></tdml:documentPart>
          </tdml:document>
          <tdml:errors>
            <tdml:error>assertion failed</tdml:error>
          </tdml:errors>
        </tdml:parserTestCase>
      </tdml:testSuite>
    val ts = new DFDLTestSuite(testSuite)
    ts.runOneTest("testRegex")
  }
{code}
Obviously this regex language, and many other embedded languages, must have the whitespace preserved (especially line endings).
The workaround is to put PCData nodes in explicitly:
{code}
 @Test def testRegexWithFreeFormAndComments3() = {
    val cdataText = """(?x) # free form
abcd # a comment
# a line with only a comment
123 # another comment
"""
    val cdata = new scala.xml.PCData(cdataText)
    val testSuite =
      <tdml:testSuite suiteName="theSuiteName" xmlns:tns={ tns } xmlns:tdml={ tdml } xmlns:dfdl={ dfdl } xmlns:xsd={ xsd } xmlns:xs={ xsd } xmlns:xsi={ xsi }>
        <tdml:defineSchema name="mySchema">
          <dfdl:format ref="tns:daffodilTest1"/>
          <xsd:element name="data" type="xsd:string" dfdl:lengthKind="delimited">
            <xsd:annotation>
              <xsd:appinfo source="http://www.ogf.org/dfdl/">
                <!-- This assert passes only if free form works, and comments work. -->
                <dfdl:assert testKind='pattern'>{ cdata }</dfdl:assert>
              </xsd:appinfo>
            </xsd:annotation>
          </xsd:element>
        </tdml:defineSchema>
        <tdml:parserTestCase xmlns={ tdml } name="testRegex" root="data" model="mySchema">
          <tdml:document>
            <tdml:documentPart type="text"><![CDATA[abcdef]]></tdml:documentPart>
          </tdml:document>
          <tdml:errors>
            <tdml:error>assertion failed</tdml:error>
          </tdml:errors>
        </tdml:parserTestCase>
      </tdml:testSuite>
    val ts = new DFDLTestSuite(testSuite)
    ts.runOneTest("testRegex")
  }
{code}
But.... then that fails because we pretty print these test suites to temp files, and the pretty printer doesn't preserve the contents of the PCData nodes either!
