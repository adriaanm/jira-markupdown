Suppose I have the following class:
{code}
  class VarArgTest(val a: Array[Int]) {
    def apply(i: Int) = a(i)
    def apply(ind: Int*) = for(i <- ind) yield a(i)
  }
{code}
The following works:
{code}
    val foo = new VarArgTest(Array(10,12,14));

    println(foo(1))   // prints: 12
    println(foo(0,2)) // prints: ArrayBuffer(10,14)
{code}
The following causes a compile time error
{code}
    val a = Array(1,2)
    println(foo(a:_*))
{code}
This gives:
{code}
    error: no `: _*' annotation allowed here
    (such annotations are only allowed in arguments to *-parameters)
       a(b:_*)
{code}
In other words, when using a:_*, it seems to match apply(i: Int) instead of apply(ind: Int*).

Note that the following is a workaround:
{code}
    val m:Seq[Int] = a(b:_*)  // prints: ArrayBuffer(12,14)
{code}
