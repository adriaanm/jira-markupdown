Some in progress notes. I've renamed class and object 'B' to 'buhB' to make it easier to do a search using contains. That's important because some names change along the way. All the following results come from the same run, which is important as ids aren't stable from one run to the next.

On the second and subsequent compiles, early in the process, we get symbol package$buhB from its class file. Here it has id 6946
```
*** package$buhB#6946
java.lang.Exception: Stack trace
  at java.lang.Thread.dumpStack(Thread.java:1273)
  at scala.reflect.internal.Symbols$Symbol.<init>(Symbols.scala:144)
  at scala.reflect.internal.Symbols$TermSymbol.<init>(Symbols.scala:2380)
  at scala.reflect.internal.Symbols$ModuleSymbol.<init>(Symbols.scala:2550)
  at scala.reflect.internal.Symbols$Symbol.createModuleSymbol(Symbols.scala:1089)
  at scala.reflect.internal.Symbols$Symbol.newTermSymbol(Symbols.scala:1106)
  at scala.reflect.internal.Symbols$Symbol.newModuleSymbol(Symbols.scala:252)
  at scala.reflect.internal.Symbols$Symbol.newModule(Symbols.scala:235)
  at scala.tools.nsc.symtab.SymbolLoaders.enterModule(SymbolLoaders.scala:47)
  at scala.tools.nsc.symtab.SymbolLoaders.enterClassAndModule(SymbolLoaders.scala:98)
  at scala.tools.nsc.symtab.SymbolLoaders.initializeFromClassPath(SymbolLoaders.scala:138)
  at scala.tools.nsc.symtab.SymbolLoaders$PackageLoader$$anonfun$doComplete$3.apply(SymbolLoaders.scala:231)
  at scala.tools.nsc.symtab.SymbolLoaders$PackageLoader$$anonfun$doComplete$3.apply(SymbolLoaders.scala:230)
  at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
  at scala.collection.Iterator$class.foreach(Iterator.scala:727)
  at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)
  at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)
  at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
  at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
  at scala.tools.nsc.symtab.SymbolLoaders$PackageLoader.doComplete(SymbolLoaders.scala:230)
  at scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(SymbolLoaders.scala:187)
  at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1224)
  at scala.reflect.internal.Types$TypeRef.decls(Types.scala:2406)
  at scala.tools.nsc.typechecker.Namers$Namer.enterPackage(Namers.scala:612)
  at scala.tools.nsc.typechecker.Namers$Namer.dispatch$1(Namers.scala:219)
  at scala.tools.nsc.typechecker.Namers$Namer.liftedTree1$1(Namers.scala:234)
  at scala.tools.nsc.typechecker.Namers$Namer.enterSym(Namers.scala:234)
  at scala.tools.nsc.typechecker.Analyzer$namerFactory$$anon$1.apply(Analyzer.scala:42)
  at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:463)
  at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:430)
  at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:430)
  at scala.collection.Iterator$class.foreach(Iterator.scala:727)
  at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)
  at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:430)
  ...
```

Somewhat later we get symbol buhB from Namer, here with id 7260.
```
*** buhB#7260
java.lang.Exception: Stack trace
	at java.lang.Thread.dumpStack(Thread.java:1273)
	at scala.reflect.internal.Symbols$Symbol.<init>(Symbols.scala:144)
	at scala.reflect.internal.Symbols$TermSymbol.<init>(Symbols.scala:2380)
	at scala.reflect.internal.Symbols$ModuleSymbol.<init>(Symbols.scala:2550)
	at scala.reflect.internal.Symbols$Symbol.createModuleSymbol(Symbols.scala:1089)
	at scala.reflect.internal.Symbols$Symbol.newTermSymbol(Symbols.scala:1106)
	at scala.reflect.internal.Symbols$Symbol.newModuleSymbol(Symbols.scala:252)
	at scala.reflect.internal.Symbols$Symbol.newModule(Symbols.scala:235)
	at scala.tools.nsc.typechecker.Namers$Namer.createMemberSymbol(Namers.scala:289)
	at scala.tools.nsc.typechecker.Namers$Namer.assignSymbol(Namers.scala:249)
	at scala.tools.nsc.typechecker.Namers$Namer.assignAndEnterSymbol(Namers.scala:252)
	at scala.tools.nsc.typechecker.Namers$Namer.enterModuleSymbol(Namers.scala:411)
	at scala.tools.nsc.typechecker.Namers$Namer.enterModuleDef(Namers.scala:390)
	at scala.tools.nsc.typechecker.Namers$Namer.dispatch$1(Namers.scala:221)
	at scala.tools.nsc.typechecker.Namers$Namer.liftedTree1$1(Namers.scala:234)
	at scala.tools.nsc.typechecker.Namers$Namer.enterSym(Namers.scala:234)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$enterSyms$1.apply(Namers.scala:425)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$enterSyms$1.apply(Namers.scala:424)
	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
	at scala.collection.immutable.List.foldLeft(List.scala:78)
	at scala.tools.nsc.typechecker.Namers$Namer.enterSyms(Namers.scala:424)
	at scala.tools.nsc.typechecker.Namers$Namer.templateSig(Namers.scala:860)
	at scala.tools.nsc.typechecker.Namers$Namer.getSig$1(Namers.scala:1298)
	at scala.tools.nsc.typechecker.Namers$Namer.typeSig(Namers.scala:1345)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply$mcV$sp(Namers.scala:707)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply(Namers.scala:706)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply(Namers.scala:706)
	at scala.tools.nsc.typechecker.Namers$Namer$LogTransitions.apply(Namers.scala:1374)
	at scala.tools.nsc.typechecker.Namers$Namer.scala$tools$nsc$typechecker$Namers$Namer$$logAndValidate(Namers.scala:1383)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1.apply(Namers.scala:706)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1.apply(Namers.scala:705)
	at scala.tools.nsc.typechecker.Namers$$anon$1.completeImpl(Namers.scala:1498)
	at scala.tools.nsc.typechecker.Namers$LockingTypeCompleter$class.complete(Namers.scala:1506)
	at scala.tools.nsc.typechecker.Namers$$anon$1.complete(Namers.scala:1496)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1224)
	at scala.reflect.internal.SymbolTable.openPackageModule(SymbolTable.scala:244)
	at scala.tools.nsc.typechecker.Analyzer$packageObjects$$anon$2$$anon$4.traverse(Analyzer.scala:61)
	at scala.tools.nsc.typechecker.Analyzer$packageObjects$$anon$2$$anon$4.traverse(Analyzer.scala:57)
	at scala.reflect.api.Trees$Traverser$$anonfun$traverseTrees$1.apply(Trees.scala:2853)
	at scala.reflect.api.Trees$Traverser$$anonfun$traverseTrees$1.apply(Trees.scala:2853)
	at scala.collection.immutable.List.foreach(List.scala:309)
	at scala.reflect.api.Trees$Traverser.traverseTrees(Trees.scala:2853)
	at scala.reflect.internal.Trees$$anonfun$itraverse$1.apply$mcV$sp(Trees.scala:1095)
	at scala.reflect.api.Trees$Traverser.atOwner(Trees.scala:2873)
	at scala.reflect.internal.Trees$class.itraverse(Trees.scala:1094)
	at scala.reflect.internal.SymbolTable.itraverse(SymbolTable.scala:13)
	at scala.reflect.internal.SymbolTable.itraverse(SymbolTable.scala:13)
	at scala.reflect.api.Trees$Traverser.traverse(Trees.scala:2849)
	at scala.tools.nsc.typechecker.Analyzer$packageObjects$$anon$2$$anon$4.traverse(Analyzer.scala:64)
	at scala.tools.nsc.typechecker.Analyzer$packageObjects$$anon$2$$anon$4.traverse(Analyzer.scala:57)
	at scala.reflect.api.Trees$Traverser.apply(Trees.scala:2879)
	at scala.tools.nsc.typechecker.Analyzer$packageObjects$$anon$2.apply(Analyzer.scala:69)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:463)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:430)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:430)
	at scala.collection.Iterator$class.foreach(Iterator.scala:727)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:430)
        ...
```

Finally, during code gen we get our assert saying that symbols 6946 and 7260 are overloaded alternatives. Same name, same type, same owner.
```
assertion failed: Symbol is unexpectedly overloaded with alternatives 'object package$buhB#6946#MOD (object package$buhB#6946#MOD->package buhbase#29#PK->package <root>#2#PK)'and'object package$buhB#7260#MOD (object package$buhB#7260#MOD->package buhbase#29#PK->package <root>#2#PK)'.
	at scala.Predef$.assert(Predef.scala:179)
	at scala.reflect.internal.Symbols$Symbol.suchThat(Symbols.scala:1651)
	at scala.reflect.internal.Symbols$ClassSymbol.companionModule0(Symbols.scala:2937)
	at scala.reflect.internal.Symbols$ClassSymbol.companionModule(Symbols.scala:2940)
	at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genClass(GenASM.scala:1369)
	at scala.tools.nsc.backend.jvm.GenASM$AsmPhase.run(GenASM.scala:119)
        ...
}
```

So, Namer tried to look up buhB, didn't find it, created #7260. Later #7260 was renamed to package$buhB and by then the damage was done. I don't yet know where the name gets changed.

Some investigation I need to do: do all inner classes get loaded with mangled name symbols? Or is that something special about objects inside package objects? If the later, is that deliberate or a mistake? If the former, then shouldn't Namer be figuring out the mangling in order to do the lookup properly?
