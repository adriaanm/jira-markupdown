Here are some of the tools you need:
```
scalac-hash origin/master -Xprint:typer -Yrangepos -Xprint-pos sandbox/test.scala
[info] downloading http://scala-webapps.epfl.ch/artifacts/2c1e9af40e252bd9ed5bfe4305991ee6f7d25636/pack.tgz ...done.
[info] scala revision from 2013-10-29 05:39:42 -0700 downloaded to /Users/jason/usr/scala-v2.11.0-M6-134-g2c1e9af
Password:
[info] origin/mas => /Users/jason/usr/scala-v2.11.0-M6-134-g2c1e9af
[[syntax trees at end of                     typer]] // test.scala
[0:201]package [8:11]foo {
  [14:160]class Foo extends [24:160][163]scala.AnyRef {
    [163]def <init>(): [24]foo.Foo = [163]{
      [163][163][163]Foo.super.<init>();
      [24]()
    };
    [28:158]def foo(): [32]Unit = <44:59>{
      [44:53]<artifact> val qual$1: [44]foo.Bar = [44:53][44:53][44:53]new [48:51]Bar();
      [54]<artifact> val x$1: [54]Int = [54]qual$1.bar$default$1;
      <44:59><44:57>qual$1.bar([54]x$1)
    }
  };
  [163:201]class Bar extends [173:201][201]scala.AnyRef {
    [201]def <init>(): [173]foo.Bar = [201]{
      [201][201][201]Bar.super.<init>();
      [173]()
    };
    [177:199]def bar([185:195]b: [188:191]<type: [188:191]scala.Int> = [194:195]2): [181]Unit = [197:199]();
    [185]<synthetic> def bar$default$1: [185]Int = [194]2
  }
}

% ack  makeTrans /Users/jason/code/scala3/src/compiler/scala/tools/nsc/typechecker/NamesDefaults.scala
        val baseFunTransformed = atPos(baseFun.pos.makeTransparent) {
              res.setPos(res.pos.makeTransparent)
              val block = Block(stats ::: valDefs.flatten, res).setType(res.tpe).setPos(tree.pos.makeTransparent)
```
