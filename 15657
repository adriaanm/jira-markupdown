```scala
class BipClass { }
trait BipTrait {
  self: BipClass =>
  
  private[this] def foo() = 5  
  def bar() = this.foo()
}
// error: value foo is not a member of BipTrait with BipClass
//   def bar() = this.foo()
//                    ^
```
OK, maybe (?) that is logical, but there must be some way to specify a self-type and still call the method, right?
```scala
  self: BipClass with BipTrait =>
  // error: value foo is not a member of BipClass with BipTrait
  //   def bar() = this.foo()
  //                    ^

  self: BipTrait with this.type =>
  // error: this can be used only in a class, object, or template
  //   self: BipClass with this.type =>
  //                       ^
```
Without being able to define private[this] I can't sidestep variance restrictions without dragging in @uncheckedVariance.
