Exists in 2.6.0 && trunc

Code:
```scala
package test3
class Global {
  object generateIdeMaps {
    sealed abstract class IdeRef 
    object NoRef extends IdeRef
    case class Internal(offset : Int) extends IdeRef
  }
}
trait Typers0 {
  val compiler : Compiler
  trait Compiler extends Global {self : compiler.type =>}
  import compiler.generateIdeMaps._
  def foo(ref : IdeRef) = ref match {case NoRef => None}
}
object Go {
  def main(args : Array[String]) : Unit = {
    new Typers0 {
      val compiler : compiler0.type = compiler0
      object compiler0 extends Compiler
    }
  }
}
```
```scala
sean-mcdirmid:~/workspace/test15/src mcdirmid$$ ../../scala/build/quick/bin/scalac -d ../bin -classpath ../bin test3/Go.scala 
test3/Go.scala:13: warning: match is not exhaustive!
missing combination       Internal

  def foo(ref : IdeRef) = ref match {case NoRef => None}
                          ^
one warning found
sean-mcdirmid:~/workspace/test15/src mcdirmid$$ ../../scala/build/quick/bin/scala -classpath ../bin test3.Go
java.lang.VerifyError: (class: test3/Typers0$$class, method: foo signature: (Ltest3/Typers0;Ltest3/Global$$generateIdeMaps$$IdeRef;)Lscala/None$$;) Incompatible object argument for function call
	at test3.Go$$$$anon$$0.<init>(Go.scala:17)
	at test3.Go$$.main(Go.scala:17)
	at test3.Go.main(Go.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at scala.tools.nsc.ObjectRunner$$$$anonfun$$0.apply(ObjectRunner.scala:75)
	at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
	at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:154)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
sean-mcdirmid:~/workspace/test15/src mcdirmid$$ 
```

Looking at the bytecode, compiler is used to load generateIdeMaps without casting it to Global. Because compiler's type is a trait type, it has to be cast to Global.
