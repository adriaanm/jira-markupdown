{code}
trait Universe {
  type Tree

  type SymTree <: Tree
  type NameTree <: Tree
  type RefTree <: SymTree with NameTree

  type Ident <: RefTree
  type Select <: RefTree
}

object Test extends App {
  val universe: Universe = null
  import universe._
  def select: Select = ???
  def ident: Ident = ???
  List(select, ident)
}
{code}

{code}
C:\Projects\KeplerUnderRefactoring\sandbox @ topic/reflection>myke compile Test.scala
Test.scala:17: error: no type parameters for method apply: (xs: A*)List[A] in object List exist so that it can be applied to arguments (Test.universe.Select, Test.universe.Ident)
 --- because ---
undetermined type
  List(select, ident)
  ^
{code}
