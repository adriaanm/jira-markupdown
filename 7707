A prototype to evaluate delta-based typeflow-analysis can be found at

    https://github.com/magarciaEPFL/scala/compare/master...inliner211 

It also performs two micro-optimizations for speed:

# Inlining ascribes type-flow-computed type to added locals, giving them in general more specific types than those declared in the callee's formal params.
# Some methods calls are resolved as by-product of inlining analysis.
  However those calls to a more specific method (say, {{j.l.String.equals()}} instead of its {{Object}} counterpart) can't be devirtualized (ie made {{invokespecial}} instead of {{invokevirtual}}) because the JVM verifier complains (looks like our type-flow analysis, which tracks non-nullness, is more precise).

All in all, the single-pass approach isn't much faster than the current implementation. Therefore looks like we'll stick to the current implementation. Closing this ticket as Won't fix.

The technique to track non-nullness should be added to the current implementation, SI-5850 .



