1. REPL displays types of higher-order curried functions ambiguously, for example:

scala> Set(1).fold _
res8: Int => (Int, Int) => Int => Int = <function1>

At the first glance, res8 looks like a function that should be called like this: res8(0)((1,2))(3)(4)

To remove ambiguity, this type should be displayed as following:
res8: Int => ((Int, Int) => Int) => Int = <function1>

2. REPL displays types of function with n parameters and with one n-tuple parameter identically:

scala> var a: ((Int,Int))=>Int = null
a: (Int, Int) => Int = null
scala> var b: (Int,Int)=>Int = null
b: (Int, Int) => Int = null
scala> val t = (0,0)
t: (Int, Int) = (0,0)
scala> b(t)
<console>:16: error: not enough arguments for method apply: (v1: Int, v2: Int)Int in trait Function2.
scala> a(t)
java.lang.NullPointerException

To remove ambiguity, these types should be displayed as following:
a: ((Int, Int)) => Int = null
b: (Int, Int) => Int = null
