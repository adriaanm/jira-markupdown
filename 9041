I've analysed this, from the commit comment:

  https://github.com/retronym/scala/compare/ticket/6948

{quote}
In a0a045f, a variety of abstract classes were inserted
into the collections hierarchy to centralize the instantiation
of traits, and thereby shed a few pounds from the JAR size.

These appear to have been carefully added into the right
place in the linearization order, and were kept private,
so it was hard to forsee any downside.

Turns out there was a small downside: type constructor
inference doesn't start by walking up the base type sequence,
instead it first tries the direct parents. This is done
in See TypeVar#registerBound.

For most collections this subtlety isn't visible, as
they typically match the kind CC[x] <: TraversableOnce[x],
and the search of the parents doesn't happen.

But for types like BitSet, Range, and WrappedString,
type inference must work up the heirarchy to find
a suitable type constructor. Not, it finds the newly
inserted AbstractSeq or the like, infers this, and
subsequently fails to find a corresponing CanBuildFrom.

    scala> val rand = new util.Random
    rand: scala.util.Random = scala.util.Random@7adc28b

    scala> rand.shuffle(collection.immutable.BitSet(1))
    <console>:9: error: Cannot construct a collection of type scala.collection.AbstractSet[Int] with elements of type Int based on a collection of type scala.collection.AbstractSet[Int].
                  rand.shuffle(collection.immutable.BitSet(1))
                              ^

    scala> rand.shuffle("": collection.immutable.WrappedString)
    <console>:9: error: Cannot construct a collection of type scala.collection.AbstractSeq[Char] with elements of type Char based on a collection of type scala.collection.AbstractSeq[Char].
                  rand.shuffle("": collection.immutable.WrappedString)
                              ^

    scala> rand.shuffle(1 until 2)
    <console>:9: error: Cannot construct a collection of type scala.collection.AbstractSeq[Int] with elements of type Int based on a collection of type scala.collection.AbstractSeq[Int].
                  rand.shuffle(1 until 2)
                              ^
{quote}
