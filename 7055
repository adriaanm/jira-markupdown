In my example:

2.9.2
```scala
        typed xs.map: (f: Any => Any)Unit
        adapted xs.map: (f: Any => Any)Unit to ?, 
        typing ((x) => ()): pt = Any => Any: undetparams=, implicitsEnabled=true, silent=true, context.owner=method kaboom
[loaded class file /Users/jason/usr/scala-2.9.1/lib/scala-library.jar(scala/reflect/Code.class) in 2ms]
            typing (): pt = Any: undetparams=, implicitsEnabled=true, silent=true, context.owner=value $anonfun
            typed (): Unit
[loaded class file /Users/jason/usr/scala-2.9.1/lib/scala-library.jar(scala/AnyVal.class) in 2ms]
            adapted (): Unit to Any, 
        typed ((x: Any) => ()): Any => Unit
        adapted ((x: Any) => ()): Any => Unit to Any => Any, 
```

2.10
```scala
        typed xs.map: (f: _$1 => Any)Unit <and> (f: _$1 => Any)Unit
        adapted xs.map: (f: _$1 => Any)Unit <and> (f: _$1 => Any)Unit to ?, 
        typing ((x) => ()): pt = ?: undetparams=, implicitsEnabled=true, enrichmentEnabled=true, mode=EXPRmode BYVALmode, silent=true, context.owner=method kaboom
            typing (): pt = ?: undetparams=, implicitsEnabled=true, enrichmentEnabled=true, mode=EXPRmode, silent=true, context.owner=value $anonfun
            typed (): Unit
            adapted (): Unit to ?, 
        typed ((x: <error>) => ()): <error> => Unit
        adapted ((x: <error>) => ()): <error> => Unit to ?, 
    no second try: xs.map and ((x: <error>) => ()) because error not in result:
```

Disturbingly, `map` is treated as an overloaded type.
