Reopening. Special casing {{Any}} doesn't seem to be the right course of action.

{noformat}
git diff /Users/jason/code/scala/test/files/neg/t7886.scala
diff --git a/test/files/neg/t7886.scala b/test/files/neg/t7886.scala
index 55d80a0..1db8be9 100644
--- a/test/files/neg/t7886.scala
+++ b/test/files/neg/t7886.scala
@@ -2,11 +2,12 @@ trait Covariant[+A]
 trait Contra[-A] { def accept(p: A): Unit }
 trait Invariant[A] extends Covariant[A] with Contra[A]

-case class Unravel[A](m: Contra[A], msg: A)
+trait T
+case class Unravel[A](m: Contra[A], msg: A) extends T

 object Test extends Covariant[Any] {
   def g(m: Contra[Any]): Unit = m accept 5
-  def f(x: Any): Unit = x match {
+  def f(x: T): Unit = x match {
     case Unravel(m, msg) => g(m)
     case _               =>
   }
ticket/5900-2 ~/code/scala scalac-hash v2.11.0-M7 test/files/neg/t7886.scala && scala-hash v2.11.0-M7 Test
java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String
	at Test$$anon$1.accept(t7886.scala:15)
{noformat}
