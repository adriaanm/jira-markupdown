```scala
trait TreesBase {

  type TypeTree >: Null

  val TypeTree: TypeTreeExtractor

  abstract class TypeTreeExtractor {
    def apply(): TypeTree
    def unapply(typeTree: TypeTree): Boolean
  }
}

trait TreesInternal extends TreesBase {

  case class TypeTree()

  object TypeTree extends TypeTreeExtractor
}

class Universe extends TreesInternal

object Test extends App {
  val u: TreesBase = new Universe()
  import u._
  val tt = TypeTree()
  null match {
    case tt @ TypeTree() => println("WAT")
    case _ => println("it works")
  }
}
```
```scala
C:\Projects\Kepler\sandbox @ topic/reflectionstarr>myke run Test.scala
java.lang.ClassCastException: scala.None$ cannot be cast to java.lang.Boolean
        at scala.runtime.BoxesRunTime.unboxToBoolean(Unknown Source)
        at TreesInternal$TypeTree$.unapply(Test.scala:17)
        at Test$delayedInit$body.apply(Test.scala:27)
        at scala.Function0$class.apply$mcV$sp(Function0.scala:40)
        at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
        at scala.App$$anonfun$main$1.apply(App.scala:61)
        at scala.App$$anonfun$main$1.apply(App.scala:61)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:77)
        at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:31)
        at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45)
        at scala.App$class.main(App.scala:61)
        at Test$.main(Test.scala:22)
        at Test.main(Test.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:92)
        at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:40)
        at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:161)
        at scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:92)
        at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:161)
        at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:28)
        at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:45)
        at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:35)
        at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:45)
        at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:70)
        at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:92)
        at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:101)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
```
```scala
  object TreesInternal$TypeTree extends TreesBase$TypeTreeExtractor with Serializable {
    case <synthetic> def apply(): TreesInternal$TypeTree = new TreesInternal$TypeTree(TreesInternal$TypeTree.this.TreesInternal$TypeTree$$$outer());
    case <synthetic> def unapply(x$0: TreesInternal$TypeTree): Boolean = if (x$0.==(null))
      false
    else
      true;
    <synthetic> private def readResolve(): Object = TreesInternal$TypeTree.this.TreesInternal$TypeTree$$$outer().TypeTree();
    <synthetic> <paramaccessor> protected val $outer: TreesInternal = _;
    <synthetic> <stable> def TreesInternal$TypeTree$$$outer(): TreesInternal = TreesInternal$TypeTree.this.$outer;
    case <synthetic> <bridge> def unapply(typeTree: Object): Boolean = if (typeTree.$isInstanceOf[TreesInternal$TypeTree]())
      TreesInternal$TypeTree.this.unapply(typeTree.$asInstanceOf[TreesInternal$TypeTree]())
    else
      scala.Boolean.unbox(scala.None);
    case <synthetic> <bridge> def apply(): Object = TreesInternal$TypeTree.this.apply();
    def <init>($outer: TreesInternal): ... = {
      if ($outer.eq(null))
        throw new NullPointerException()
      else
        TreesInternal$TypeTree.this.$outer = $outer;
      TreesInternal$TypeTree.super.<init>($outer);
      ()
    }
  };
```
