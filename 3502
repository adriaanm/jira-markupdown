Stream should perhaps override it and provide a lazy version. Something like (those casts hurt my eyes):

{code}
  override final def scanLeft[B, That](z: B)(op: (B, A) => B)(implicit bf: CanBuildFrom[Stream[A], B, That]): That = {
    (if (this.isEmpty) Stream(z)
    else new Stream.Cons(z, tail.scanLeft(op(z, head))(op).asInstanceOf[Stream[B]])).asInstanceOf[That]
  }
{code}

Otherwise this will blow the stack:
{code}
  Stream.from(0).scanLeft(0)(_+_).take(10)
{code}
