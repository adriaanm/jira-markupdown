I went back to investigate why I hadn't been able to figure out how to get a classtag into a macro, but erik had done it no problem.  This is why:
{code}
import scala.language.experimental.macros
import scala.reflect.macros.Context
import scala.reflect.ClassTag

object Mmm {
  def f[T](x: Int)(implicit ev: ClassTag[T]) = macro f_impl[T]
  def f_impl[T](c: Context)(x: c.Expr[Int])(implicit ev: c.Expr[ClassTag[T]]) = null
}

// ./a.scala:6: error: macro implementation has wrong shape:
//  required: (c: scala.reflect.macros.Context)(x: c.Expr[Int])(ev: c.Expr[scala.reflect.ClassTag[T]]): c.Expr[Any]
//  found   : (c: scala.reflect.macros.Context)(x: c.Expr[Int])(implicit ev: c.Expr[scala.reflect.ClassTag[T]]): Null
// macro implementations cannot have implicit parameters other than WeakTypeTag evidences
//   def f[T](x: Int)(implicit ev: ClassTag[T]) = macro f_impl[T]
//                                                      ^
// one error found
{code}

"macro implementations cannot have implicit parameters other than WeakTypeTag evidences" does not at all clue me in to why I have displeased the compiler.  It turns out it is because I have mimicked the signature with too much fidelity - I am allowed the implicit parameter, only I'm not allowed to say so.
{code}
// now it compiles
object Mmm {
  def f[T](x: Int)(implicit ev: ClassTag[T]) = macro f_impl[T]
  def f_impl[T](c: Context)(x: c.Expr[Int])(ev: c.Expr[ClassTag[T]]) = null
}
{code}
This warrants a very specific error message.
