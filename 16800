If you specify the class path using -cp, scala
will nonetheless use "." to get class files if they are there.
I have a simple test case with a JAR file with the results of compiling
two Scala files that print #1 when invoked.  The #2 versions are the
same but print #2.  If I execute "scala -cp <JARFILE>" in the directory
with the compiled versions of the #2 files, it gets those rather than the
ones from the JAR files: . takes precedence over the class path.
I unset the CLASSPATH environment variable.

I suspected a java bug, but I have been unable to duplicate a Java only
situation.  It may have something to do with the very large number of
JAR files passed to -Xbootclasspath/a in scala 2.9.1

Workaround: use the -nobootcp option.

See the following script.
{noformat}
pabst.cs 593 % cat Test.scala
object Test {
   var f : Foo = new Foo()
   def main(s : Array[String]) : Unit = { println("Test #2"); }
}
pabst.cs 594 % cat Foo.scala
class Foo() {
  { println("Foo #2"); }
}
pabst.cs 595 % ls
Foo.class    Foo.scala    Test$.class  Test.class   Test.scala
pabst.cs 596 % scala -cp ../src1/one.jar Test
Foo #2
Test #2
pabst.cs 597 % \rm *.class
pabst.cs 598 % scala -cp ../src1/one.jar Test
Foo #1
Test #1
pabst.cs 599 % java -version
java version "1.6.0_05"
Java(TM) SE Runtime Environment (build 1.6.0_05-b13)
Java HotSpot(TM) Server VM (build 10.0-b19, mixed mode)
pabst.cs 600 % scala -version
Scala code runner version 2.9.1.final -- Copyright 2002-2011, LAMP/EPFL
pabst.cs 601 % more ~/.profile
user=boyland
pabst.cs 602 % uname -a
SunOS pabst.cs.uwm.edu 5.10 Generic_141445-09 i86pc i386 i86pc
pabst.cs 603 % echo $CLASSPATH
CLASSPATH: Undefined variable
pabst.cs 604 % scalac *.scala
pabst.cs 605 % scala -cp ../src1/one.jar Test
Foo #2
Test #2
pabst.cs 606 % scala -nobootcp -cp ../src1/one.jar Test
Foo #1
Test #1
{noformat}
