The problem is not the amount of code, but how many times the regex is matched.

In the example you mentioned, for instance, the Date regex will be matched against text, and then the same Date regex will be matched again against the result of the previous match.

In other words, in order to be able to extract the groups one has to match (as in, regex matching, not pattern matching) twice. For heavy duty text algorithms, the main use of regex, that's very bad for performance.

If you still do not understand the problem, please look at the implementation of findFirstIn and unapplySeq, and note the code that is duplicated between them. An optimized code could then be written like this, with the addition of Groups:

{code}
for (Groups(a, b, c) <- Date findFirstMatchIn text) yield (a, b, c)
{code}

