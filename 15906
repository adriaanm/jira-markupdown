Note: I am not sure if I should mark this a defect or an enhancement, to me it feels more like a compiler-defect.

= problem =

It's been said about Scala that you can program in an (almost) pure functional style if you don't use mutable state, implying no vars, only vals.

However, it can be negatively experienced that a val is also mutable in Scala: In an template ('initializer') statement, a reference to a val, which is defined *later* in the same template, equals the default value for the type of the val, NOT the value that it is given in its definition.

e.g
```scala

object ValRefInInitializer extends Application {
	
  // static initializer	
  println(a) // compiles but prints 0! (expected: 1!)
  val a = 1	
	
  new {	
    //object initializer
    println(a) // same here (compiles but prints 0, expected: 1)
    val a = 1
  }
	
}
```

If one is not aware of this mutability of vals, this can lead to unexpected misbehaviour, leading to a significant debugging effort.

= analysis =

I think this is very misleading, one should be able to see [the expansion of] a reference to a val as a constant, to reflect the one and only value the val can have.

In comparison, the compiler will disallow the same construct in another type of block statement:
```scala

object CompileError extends Application {

  def b() {
    println(a) // compile error:
	       // "forward reference extends over
               // definition of value o".
    val a = 2
  }

}
```

I am aware that this issue also exists in Java with final variables in the same position, but this is another place where Scala can improve over the old Java.

*(Java example)*
```scala
public class FinalVarTestJava {

  static class A {
    {
      useB();
    }
    
    final Object b = new Object();
		
    void useB() {
      System.out.println("b=" + b);
    }
  }
	
  public static void main(String[] args) {
    new A();
  }
	
  /* 
   * in comparison, in normal blocks a compile-error occurs for 
   * the same construct.
   * (Uncomment and compile to see.)
	 
   static void c() {
     System.out.println(o); // compile-error:
                            // "o can not be resolved".
     Object o = new Object();
   }
   */
}
```


= enhancement recommendation =

The compiler should either not allow the reference, with a message similar to what happens in other types of statements: *"forward reference extends over definition of value [x]"*

or it should use the correct value of the val without complaining, maybe by doing the assignment to the val on first reference, in that case like a lazy val.

A lazy val is a work-around for the issue, apart from reordering the  definitions. But then at least give an error to the user. 

Or maybe I am not aware now of proper use-cases for an un-initialized val and it should remain like it is? (No cynical intention here!)
