Hi,

the bug is in:
def sliding[B >: A](size: Int, step: Int): Iterator[Repr] in Trait Iterable

This function does not seem to work with size=1. With size>1 everything seems to be ok.

The following code with size=1 produces an emtpy iterator:
{code}
scala> val foo = Seq(1,2,3,4,5,6,7,8,9)
foo: Seq[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)

scala> foo.sliding(1,2)
res0: Iterator[Seq[Int]] = empty iterator
{code}

This seems to be wrong. AFAIK this should instead produce one List which holds multiple Lists with one element each.
It seems to work with a size>1

This code shows the correct result with size >1 This is also what I would expect with size = 1. 
{code}
scala> val foo = Seq(1,2,3,4,5,6,7,8,9)
foo: Seq[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)

scala> foo.sliding(2,3)
res1: Iterator[Seq[Int]] = non-empty iterator
{code} 

Only had time for a quick glance at the GroupedIterator Source (which seems to be implementing this behind the scene) there is a test for size >= 1 and step >= 1. So size = 1 should be legal. 

Regards
Oliver
