That formula can be made to work for 32 bit ints.  The only difficulty is dividing by pow(k-1,2) = 64 * 25.  The problem of dividing by 64 can be solved by using longs for intermediate results.  The inverse of 25 mod 2**32 is -1030792151.  So a much faster way of computing {{ (0 /: (1 to n)) (_ * 41 + _) }} is:

{code}
	def power(x : Long, power : Long) = {
		var ans = 1L
		var xp = x
		var p = power
		while(p > 0) {
			if((p&1L)!=0) {
				ans *= xp
			}
			p >>= 1
			xp *= xp
		}
		ans
	}

	def rangeHashCode(n : Int) = {
		val numerator = power(41L,n+1L) + n - 41L * (n+1L)
		(numerator / 64).toInt * (-1030792151) 
	}
{code}

This can of course be generalized to arbitrary start, limit, and step, but I don't remember the formula offhand.
