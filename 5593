Umm... seriously?

As I hope you're both aware, JVMs have to insert null checks _every time they dereference a pointer_. Consequently, they've got pretty good at eliminating repeated checks on the same pointer. Further, null checks (implicit or not) can generally be folded into another instruction using the bus logic.

So, what we're talking about here is replacing the current effective code:

`if (x == null) throw new NPE() else x.hashCode`

With:

`if (x == null) 0 else x.hashCode`

That's no change to the main code path and a probable reduction in bytes of machine code emitted...

Of course theory demands experimentation. So, Scala 2.8.1 compiling itself, which calls `hash` over 170 million (!) times:

Unmodified: 7m 23s

With null check: 7m 23s

Additionally, a microbenchmark (attached) showed a ~4% speedup with the change.
