Martin, I propose to fix this as follows, assuming this time I understood correctly when types without arguments are considered to be raw (briefly, when they are the type of a symbol that occurs in java code, not necessarily when they refer to a java symbol)
So, I think the original rawToExistential is wrong. 

add to Symbol:
```scala
+    /** Modify term symbol's type so that a raw type C is converted to an existential C[_]
+     *
+     * This is done in checkAccessible and overriding checks in refchecks
+     * We can't do this on class loading because it would result in infinite cycles.
+     */
+    private var triedCooking: Boolean = false
+    final def cookJavaRawInfo() {
+      require(isTerm)
+      // println("cookJavaRawInfo: "+(rawname, triedCooking))
+
+      if(triedCooking) return else triedCooking = true // only try once...
+
+      def cook(sym: Symbol) {
+        require(sym hasFlag JAVA)
+
+        object rawToExistentialInJava extends TypeMap {
+          def apply(tp: Type): Type = tp match {
+            // any symbol that occurs in a java sig, not just java symbols
+            // see http://lampsvn.epfl.ch/trac/scala/ticket/2454#comment:14
+            case TypeRef(pre, sym, List()) if !sym.typeParams.isEmpty =>
+              val eparams = typeParamsToExistentials(sym, sym.typeParams)
+              existentialAbstraction(eparams, TypeRef(pre, sym, eparams map (_.tpe)))
+            case _ =>
+              mapOver(tp)
+          }
+        }
+        val tpe1 = rawToExistentialInJava(sym.tpe)
+        // println("cooking: "+ sym +": "+ sym.tpe +" to "+ tpe1)
+        if (tpe1 ne sym.tpe) {
+          sym.setInfo(tpe1)
+        }
+      }
+
+      if (hasFlag(JAVA))
+        cook(this)
+      else if (hasFlag(OVERLOADED))
+        for (sym2 <- alternatives)
+          if (sym2 hasFlag JAVA)
+            cook(sym2)
+    }
```

in TypeRef, isHigherKinded is now again:
```scala
override def isHigherKinded = (args.isEmpty && !typeParamsDirect.isEmpty)
```

checkAccessible in Infer becomes:
```scala
...
         if (sym1 == NoSymbol) {
...
         } else {
+        if(sym1.isTerm)
+          sym1.cookJavaRawInfo() // xform java rawtypes into existentials
+
           var owntype = try{ 
             pre.memberType(sym1)
           } catch {
```

and checkOverride must also cook:
```scala
....
          } else if (other.isTerm) {
            other.cookJavaRawInfo() // SI-2454
...
```

I'm not sure if this is what you had in mind. Please advise and re-assign.
