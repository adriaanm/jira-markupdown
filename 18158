The compiler emits an exhaustion error in the following code:

{code}
sealed trait EthernetType
object EthernetType {
  final case object Gigabit extends EthernetType
  final case object FastEthernet extends EthernetType

  final def toInt(t: EthernetType) = t match {
    case Gigabit => 1
    case FastEthernet => 2
  }
}
{code}

{noformat}
matching.scala:7: warning: match may not be exhaustive.
It would fail on the following inputs: FastEthernet, Gigabit
   final def toInt(t: EthernetType) = t match {
                                          ^
                                          one warning found
{noformat}

If the match code is moved *outside* of the companion object, there is no exhaustion error.

