```
ase: <no phase>] Please file a ticket with the current stack trace at https://www.assembla.com/spaces/scala-ide/support/tickets
	at scala.tools.nsc.interactive.Global.assertCorrectThread(Global.scala:517)
	at scala.reflect.internal.Symbols$Symbol.rawInfo(Symbols.scala:1395)
	at scala.reflect.internal.Symbols$Symbol.isCoDefinedWith(Symbols.scala:2041)
	at scala.reflect.internal.Symbols$ClassSymbol$$anonfun$companionModule0$1.apply(Symbols.scala:3085)
	at scala.reflect.internal.Symbols$ClassSymbol$$anonfun$companionModule0$1.apply(Symbols.scala:3085)
	at scala.reflect.internal.Symbols$Symbol.filter(Symbols.scala:1788)
	at scala.reflect.internal.Symbols$Symbol.suchThat(Symbols.scala:1792)
	at scala.reflect.internal.Symbols$ClassSymbol.companionModule0(Symbols.scala:3085)
	at scala.reflect.internal.Symbols$ClassSymbol.companionModule(Symbols.scala:3087)
	at scala.reflect.internal.TreeGen.mkTuple(TreeGen.scala:289)
	at scala.tools.nsc.ast.parser.TreeBuilder.makeTupleTerm(TreeBuilder.scala:42)
	at scala.tools.nsc.ast.parser.TreeBuilder.stripParens(TreeBuilder.scala:47)
	at scala.tools.nsc.ast.parser.Parsers$Parser.parseOther$1(Parsers.scala:1475)
	at scala.tools.nsc.ast.parser.Parsers$Parser.expr0(Parsers.scala:1477)
```

Seems like we need to force a few lazies in Definitions to make this work.
```scala
// On presentation compiler startup
definitions.TupleClass.seq.foreach(sym => fullyInitializeSymbol(sym))
// same for any other symbols used by Parsers.
```

This workaround could be done in the IDE in the meantime.
