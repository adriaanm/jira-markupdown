Replying to [comment:5 extempore]:
> Replying to [comment:1 archontophoenix]:
> > I should have specified that I'm using Scala version 2.7.7.RC2.
> 
> I checked in something like what you describe in r19392 but it's not enabled by default, you have to compile with -Yjenkins-hashCodes.  If you or anyone reading this would like to sanity check it, maybe if I collect a few approval stamps it'll sound good to switch for real.

I haven't tried running your code, but after looking at it I saw a couple of things you might want to do a little bit differently:

  * You seem to be doing some object allocation in computing the hash codes for non-refs, turning them into a `ByteBuffer`. Ideally, computing a hash code wouldn't involve any allocation.
  * Assuming that Scala's 32-bit integer semantics are the same as Java's, you don't need to use `Long` arithmetic to get the effect of unsigned C `int`s; ordinary `Int`s will work just fine.

The `Hash.java` file I've attached is from a not-yet-completed Java project where I'm planning to generate hash codes automatically for some classes. The approach I'm taking uses thread-safe immutable adapters (of type `intsFrom`) to wrap objects to make them look like a list of `int`s.
The plan (not yet carried out) is to generate an auxiliary subclass *A* of `IntsFrom` for each class *C* for which the hash code is generated automatically, and to allocate a single instance of *A* and store it in a `static` variable in *C*, to use when `hashCode` is called. This approach allocates just one extra object per class loaded, not multiple objects per invocation of `hashCode`.
