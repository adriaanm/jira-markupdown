In one of the examples at simplyscala.com there's a piece of code that looks like this:
```scala
ltrs.foldLeft(List[(Char,Int)]()){
  case ((prevchr,cnt)::tl,chr) if(prevchr==chr)=>(prevchr,cnt+1)::tl
  case (tbl,chr) => (chr,1)::tbl
}
```

I believe it would look much better if one could simply write
```scala
ltrs.foldLeft(List[(Char,Int)]()){
  case ((prevchr,cnt)::tl,prevchr)=>(prevchr,cnt+1)::tl
  case (tbl,chr) => (chr,1)::tbl
}
```

This is not possible though due to pattern matchers being linear. In such cases pattern guards have to be used, but are they really necessary if the guard's expression is as simple as (prevchr==chr)?

Best regards, Jacek Rogoznicki
