As discussed with Martin, I'm attaching a bunch of additional collections implementations for inclusion in the standard library. Trunk appears to currently be broken, so I decided to submit these with an astonishingly long compile error message, so I'm just submitting these as a bunch of files. 

- IntMap is a specialised immutable map for integer keys. It's based on "Fast Mergeable Integer Maps" Okasaki and Gill. It stores things in unsigned order and does substantially better than the standard tree map (though doesn't do as well as the hash implementations on individual operations).

- LongMap is the same as IntMap but for Long keys.

- TreeHashMap is an alternative implementation of immutable hash maps. It has better sharing properties than the standard immutable hash map and isn't synchronised. Its performance seems very dependent on the computer it's running on - on my home desktop it's about a factor of two slower on reads and writes compared to the standard immutable hash map, but does a lot better on bulk operations. On some computers it has been observed being faster than the standard one. I think this is to do with cache sizes and number of cores

- ArrayStack is an alternative implementation of a mutable stack, based on an index into a growable array. It should be much faster than the one currently in the standard library. 

There was going to be an additional one: a mutable Map implementation based on open hashing, but I discovered some bugs this evening and decided this left me insufficiently confident in the implementation to submit it for this release. I'll try to get it working, tested and ready and submit it as an additional patch at some point, but it won't be in time for 2.7.2. 

I have pretty extensive tests for these things, but I'm not really sure how to integrate them into the standard test suite. In particular appropriateness of dependencies, etc. (I use both scalax and scalacheck in my tests, because it's massively convenient to do so, but I don't think you want those as test dependencies?).  Let me know what I should do about that.
