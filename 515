Recording a mail from miles sabin to scala-user in case it's useful when/if someone implements this:
{code}
The trick here is to factor out the recursion as an additional type
parameter (type-level Y combinator anyone?). For 2.7.5 the following
works,

object Fors {
  
  type Comprehendable[C[+_], +A] = {
    def map[B](f: A => B): C[B]
    def flatMap[B](f: A => Iterable[B]): C[B]
    def filter(p: A => Boolean): C[A]
    def foreach(f : (A) => Unit) : Unit
  }                                                                             

  def four[C[+_], A](c : Comprehendable[C, A]) {
    for(e <- c)
      println(e)
  }                                                                             

  def main(args : Array[String]) {
    val l = List(1, 2, 3)
    four[List, Int](l)
  }                                                                             
}                                                                               

Note that because of the lack of inference for higher-kinded types you
have to supply explicit type parameters at the call site of "four".

Interestingly the version for 2.8.0 is completely different as a
result of the collections redesign. The following works relative to
trunk,

object Fors {

  type TT[+A, +This] = TraversableTemplate[A, This] with Traversable[A]
  type BF[B, That, This] = BuilderFactory[B, That, This]

  type Comprehendable[+A, +This <: TT[A, This]] = {
    def map[B, That](f : (A) => B)
      (implicit bf : BF[B, That, This]) : That
    def flatMap[B, That](f : (A) => Traversable[B])
      (implicit bf : BF[B, That, This]) : That
    def filter(p: A => Boolean): This
    def foreach[U](f : (A) => U) : Unit
  }                                                                             

  def four[A, This <: TT[A, This]](c : Comprehendable[A, This]) {
    for(e <- c)
      println(e)
  }                                                                             

  def main(args : Array[String]) {
    val l = List(1, 2, 3)
    four(l)
  }                                                                             
}
{code}
