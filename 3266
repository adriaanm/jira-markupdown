Yeah, I was wondering about that. I admit I was "scala" in both stack traces involving locks and stopped doing any other analysis.

If it is a bug in the viplugin, are you seeing something I'm not? Or have a brief description of what its doing wrong, and I'll go report the bug against it?

I parsed apart the stack traces a bit (which I should have done this for you first anyway). Here's what I'm seeing:

{code}
So the hover thread is blocked, with my comments reading from the bottom up:

"Text Viewer Hover Presenter" daemon waiting for monitor entry [0x00007f57c4e97000]
   java.lang.Thread.State: BLOCKED (on object monitor)
	at org.eclipse.core.internal.filebuffers.SynchronizableDocument.get(SynchronizableDocument.java:127)
	- waiting to lock <0x00007f58099777a0> (a java.lang.Object)
(But the document is locked...so we wait. Makes sense.)
	at org.eclipse.jdt.internal.ui.javaeditor.DocumentAdapter.getCharacters(DocumentAdapter.java:368)
(Which touched the java editor to get some text)
	at org.eclipse.jdt.internal.core.CompilationUnit.getContents(CompilationUnit.java:661)
	at scala.tools.eclipse.javaelements.ScalaSelectionEngine$$$$anonfun$$select$$1.apply(ScalaSelectionEngine.scala:48)
	at scala.tools.eclipse.javaelements.ScalaSelectionEngine$$$$anonfun$$select$$1.apply(ScalaSelectionEngine.scala:43)
	at scala.tools.eclipse.util.Cached$$$$anonfun$$apply$$1.apply(Cached.scala:22)
(Which touched scala)
	at scala.tools.eclipse.javaelements.ScalaSourceFile.codeSelect(ScalaSourceFile.scala:70)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:369)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getJavaElementsAt(AbstractJavaEditorTextHover.java:115)
(Hovering caused the scala compiler to kick in)
	at org.eclipse.jface.text.TextViewerHoverManager$$4.run(TextViewerHoverManager.java:166)

And now the main UI thread, comments from the bottom up:

"main" waiting on condition [0x00007f5844829000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00007f580a03e088> (a java.util.concurrent.locks.ReentrantReadWriteLock$$NonfairSync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
(And the cache wants this reader/write lock...what lock is this?)
	at java.util.concurrent.locks.ReentrantReadWriteLock$$WriteLock.lock(ReentrantReadWriteLock.java:807)
	at scala.tools.eclipse.util.Cached$$class.locked(Cached.scala:82)
	at scala.tools.eclipse.util.Cached$$class.invalidate(Cached.scala:64)
	at scala.tools.eclipse.ScalaPresentationCompiler$$CachedCompilerResult.invalidate(ScalaPresentationCompiler.scala:67)
(The scala compiler is invalidating something...)
	at scala.tools.eclipse.javaelements.ScalaSourceFile.bufferChanged(ScalaSourceFile.scala:40)
(Changing the document causes scala compiler to kick off)
	at org.eclipse.jface.text.AbstractDocument.replace(AbstractDocument.java:1157)
	at org.eclipse.core.internal.filebuffers.SynchronizableDocument.replace(SynchronizableDocument.java:195)
	- locked <0x00007f58099777a0> (a java.lang.Object)
	at org.eclipse.jface.text.AbstractDocument.replace(AbstractDocument.java:1176)
	at org.eclipse.core.internal.filebuffers.SynchronizableDocument.replace(SynchronizableDocument.java:181)
	- locked <0x00007f58099777a0> (a java.lang.Object)
(jface wants to change the document and so grabs the lock that the hover thread is blocked on)
	at org.eclipse.jface.text.projection.ProjectionTextStore.replace(ProjectionTextStore.java:111)
	at org.eclipse.jface.text.AbstractDocument.replace(AbstractDocument.java:1150)
	at org.eclipse.jface.text.AbstractDocument.replace(AbstractDocument.java:1176)
	at org.eclipse.jface.text.projection.ProjectionDocument.replace(ProjectionDocument.java:630)
	at org.eclipse.jface.text.DefaultDocumentAdapter.replaceTextRange(DefaultDocumentAdapter.java:248)
	at org.eclipse.swt.custom.StyledText.modifyContent(StyledText.java:6634)
(viplugin tells eclipse to do the new line)
	at org.eclipse.swt.custom.StyledText.replaceTextRange(StyledText.java:7216)
	at org.eclipse.ui.texteditor.InsertLineAction.run(InsertLineAction.java:144)
	at com.mbartl.viplugineclipse.EditorImplementation.callAction(EditorImplementation.java:311)
	at com.mbartl.viimplementation.command.actions.change.NewLineBelow.execute(NewLineBelow.java:35)
(viplugin is added a new line)
	at com.mbartl.viimplementation.layer.ViLayer.verifyKeyEvent(ViLayer.java:279)
(viplugin saw the type)
	at org.eclipse.swt.widgets.Widget.sendIMKeyEvent(Widget.java:1262)
(I was typing)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1287)
{code}

I don't see the lock:

{code}
	- parking to wait for  <0x00007f580a03e088> (a java.util.concurrent.locks.ReentrantReadWriteLock$$NonfairSync)
{code}

That scala.tools.eclipse.util.Cached is trying to get anywhere else in the thread dump. Do you know, either specifically or generally, what lock this is so I can report to the viplugin people which one they shouldn't be getting?

Thanks!
