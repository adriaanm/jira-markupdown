For future generations of compiler engineers:

- companions for existing classes are created by the symbol loader, and they may in fact not exist. When the class is loaded, if there is no companion its companion symbol type is set to `NoType` (the symbol can't be wiped out anymore)

- The logic to set it to `NoType` is therefore correct

- The fix was in the validation check: before calling `isCoDefinedWith`, check that both symbols exist

- isCoDefinedWith remains asymmetrical. My attempts to "fix" it hit too many errors/crashes in the compiler. It's caller's responsibility to make sure the symbols exist **before** calling `isCoDefinedWith`.
