I am a little surprised by this last response and I'd appreciate understanding it.

I recognise that I am coming at this from a developer perspective and not from a knowledge of the Scala compiler, but it seems to me that the current behaviour is inconsistent and that there is a potential solution that would make the behaviour consistent without limiting anything that is currently possible with the language.

Are you saying that this should not be fixed because it is already being used in the 'offending' way enough that the change would be disruptive, or are you saying that the current behaviour is reasonable and expected?

In all cases of class parameters without explicit defaults, a parameter is required for the constructor with the ONE exception of this case of "by name" parameters.  This exception for "by name" parameters ONLY applies for class parameters, it does NOT apply for "by name" parameter of functions which ARE required to be passed explicitly UNLESS they are explicitly provided with a default.

When passing parameters to any function it appears to be possible to use curly brackets in any place where round brackets would be used and it seems reasonable to expect that the same would be the case for class constructors.

If you create a class with currying style parameters like:
{code}
scala> class Test(x: Int)(code: => Unit) { code }
defined class Test
{code}
a call such as:
{code}
scala> new Test(1) { println("Hello") }
<console>:7: error: missing arguments for constructor Test in class Test
       new Test(1) { println("Hello") }
{code}
fails, claiming that a parameter is missing rather than interpreting the following expression in curly brackets as either the parameter or the instantiation of an anonymous class.
