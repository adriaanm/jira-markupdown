A.scala:
{code}
sealed trait A
class B extends A
class C extends A
// class E extends A
{code}

D.scala:
{code}
object D {
	def x(a: A) =
	    a match {
	        case _: B => ()
	        case _: C => ()
	    }
}
{code}

 1. Compile.
 1. Uncomment class E in A.scala
 1. Mark A.scala modified
 1. Manager recompiles A.scala but not D.scala.  The compile warning about non-exhaustiveness is missed.
