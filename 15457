The behavior of the three-parameter variant of mkString is odd to me because the start and end strings are always added to the output string and don't depend on the state of the collection.

It would be more useful if the start and end strings were only added if the collection was not empty.  In that case the output of mkString will simply be an empty string.  If the developer wants to unconditionally add a prefix or suffix string then just use the "+" operator outside of mkString.  I realize that that would cause the creation of a new StringBuilder, so passing start and end to mkString is a performance optimization, but by that standard, any function that creates a string should also arbitrary start and end strings, and by and large they don't.  If performance is truly a concern, then the app can create its own StringBuilder and use the addString method (which should also ignore start and end if the collection is empty).

If we're concerned about breaking existing code then maybe there could be an optional fourth parameter that tells mkString not to add the start and end strings if the collection is false?

{code}
def mkString(start: String, sep: String, end: String, skipIfEmpty: Boolean = false): String = ...
{code}
