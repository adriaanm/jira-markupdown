I realize I'm pushing the envelope here, but it would be really useful, plus it just bugs me when the compiler's left hand doesn't know what the right hand is transforming.
{code}
import scala.language.experimental.macros
import scala.reflect.macros.Context

final class Ops[T](val x: T) extends AnyVal {
  def f = macro Macros.crash
}

object Macros {
  def crash(c: Context): c.Expr[Unit] = c.universe.reify(())
}
{code}
{noformat}
uncaught exception during compilation: scala.reflect.internal.Types$TypeError
error: scala.reflect.internal.Types$TypeError: macro implementation not found: extension$f (the most common reason for that is that you cannot use macro implementations in the same compilation run that defines them)
  at scala.tools.nsc.typechecker.Contexts$Context.error(Contexts.scala:403)
{noformat}
