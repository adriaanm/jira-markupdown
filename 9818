Leaving away the explicit type of the anonymous function's parameter `x` triggers it to be inferred as `Int`:
```
6.23 Anonymous functions

If the expected type of the anonymous function is of the form scala.Functionn[S1,...,Sn, R], the expected type of e is R and the type Ti of any of the parameters xi can be omitted, in which case Ti = Si is assumed.
```

Eta expansion drives the type of the parameter from the `MethodType` being expanded:
```
Second, one creates a fresh name yi for every argument type Ti of the method (i = 1, ..., n). The result of eta-conversion is then:

{
   val x1 = e1; ... val xm = em;
  (y1:T1,...,yn:Tn) => eâ€²(y1,...,yn) 
}
```

In the example about, that gives:
```scala
(t: T) => bar(t)
```

where `T` is an abstract type corresponding to the method type parameter.

I'm not sure yet whether we can make the two behave uniformly. I'll leave this ticket open in the hope that someone finds a way.

For future reference, the interesting stuff is in `instantiateToMethodType`, `instantiateToMethodType`, and `etaExansion`.

Even though the expected type is `Int => Int`, we 
