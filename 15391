from the spec:

A compound type T1 with...with Tn {R} represents objects with members as 
given in the component types T1 ,..., Tn and the refinement {R}. A refinement {R} 
contains declarations and type definitions. If a declaration or definition overrides a 
declaration or definition in one of the component types T1 ,..., Tn , the usual rules 
for overriding (�5.1.4) apply;

5.1.4 Overriding 
A member M of class C that matches (�5.1.3) a non-private member M' of a base 
class of C is said to override that member. In this case the binding of the overriding
member M must subsume (�3.5.2) the binding of the overridden member M' . 

5.1.3 Definition 5.1.4 A member definition M matches a member definition M' , if M and 
M' bind the same name, and one of following holds. 
1. Neither M nor M' is a method definition. 

3.5.2 A declaration or definition in some compound type of class type C subsumes an- 
other declaration of the same name in some compound type or class type C' , if one 
of the following holds. 
   * A type alias type t [T1 ,..., Tn ] = T subsumes a type alias 
         type t [T1 ,..., Tn ] = T' if T ≡ T' . 
   * A type declaration type t [T1 ,..., Tn ] >: L <: U subsumes a type declaration 
         type t [T1 ,..., Tn ] >: L′ <: U' if L′ <: L and U <: U' . 

code examples that say otherwise:
```scala
object T {
  trait A {
    type X <: Int
  }
  
  type S = A{type X = String}
}
```

this should give a type error according the spec; 
since it is not specified when compound types need to adhere to the rules from the first paragraph above, 
it would be reasonable to assume they should always adhere
I guess it's a spec issue, not an implementation one
see also scala/bug#3419 and neg/bug1275
```scala
object Bug1275 {
  trait Seq[+t] {
    type MyType[+t] <: Seq[t]

    def f: MyType[t]
  }

  // illegal abstract type member refinement: changes the arity of MyType
  // the error is pretty strange, since the compiler forms the illegal type xs.MyType[a] anyway
  def span[a, s <: Seq[a] { type MyType/*look ma, no type parameters!*/ <: s } ](xs: s): s
     = xs f
//        ^
// found   : xs.MyType[a]
// required: s  
}
```
