Hmm. It prints copy/pasteable repros of macro expansions. I use it myself all the time, because -Ymacro-debug is very heavyweight:

{code}
D:\Dropbox\Scratchpad\Scala>cat Test.scala
object Test extends App {
  val tree = scala.reflect.mirror.reify(42)
}

D:\Dropbox\Scratchpad\Scala>scalac Test.scala

D:\Dropbox\Scratchpad\Scala>scalac -Ymacro-copypaste Test.scala
typechecking macro expansion scala.reflect.`package`.mirror.reify[Int](42) at source-D:\Dropbox\Scratchpad\Scala\Test.scala,line-2,offset=65
{
  val $mr: reflect.mirror.type = scala.reflect.`package`.mirror;
  $mr.Expr.apply[Int(42)]($mr.Literal.apply($mr.Constant.apply(42)))($mr.ConcreteTypeTag.apply[Int(42)]($mr.ConstantType.apply($mr.Constant.apply(42)), classOf[scala.Int]))
}
Block(List(ValDef(Modifiers(), newTermName("$mr"), TypeTree().setType(reflect.mirror.type), Select(Select(Select(Ident(newTermName("scala")), newTermName("reflect")), newTermName("package")), newTermName("mir
ror")))), Apply(Apply(TypeApply(Select(Select(Ident(newTermName("$mr")), newTermName("Expr")), newTermName("apply")), List(TypeTree().setType(Int(42)))), List(Apply(Select(Select(Ident(newTermName("$mr")), ne
wTermName("Literal")), newTermName("apply")), List(Apply(Select(Select(Ident(newTermName("$mr")), newTermName("Constant")), newTermName("apply")), List(Literal(Constant(42)))))))), List(Apply(TypeApply(Select
(Select(Ident(newTermName("$mr")), newTermName("ConcreteTypeTag")), newTermName("apply")), List(TypeTree().setType(Int(42)))), List(Apply(Select(Select(Ident(newTermName("$mr")), newTermName("ConstantType")),
 newTermName("apply")), List(Apply(Select(Select(Ident(newTermName("$mr")), newTermName("Constant")), newTermName("apply")), List(Literal(Constant(42)))))), Literal(Constant(Int)))))))
{code}

Could you, please, elaborate on what exactly isn't working for you? I will fix that.

upd. Oh, you're using M1. No idea what things were in M1 - that was ages ago :)
