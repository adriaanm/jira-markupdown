```scala
var xs: Array[AnyRef] = new Array(0)
var ys: Array[Int] = new Array(0)
xs eq ys
```
I agree it might not be good programming practice, but it shouldn't produce this wonderful exception:
```scala
Exception in thread "main" java.lang.Error: Uncomparbale type kinds: REFERENCE with INT
	at scala.tools.nsc.Global.abort(Global.scala:186)
	at scala.tools.nsc.backend.icode.TypeKinds$$REFERENCE.maxType(TypeKinds.scala:265)
	at scala.tools.nsc.backend.icode.TypeKinds$$ARRAY.maxType(TypeKinds.scala:333)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.maxType$$1(GenICode.scala:1656)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase$$$$anonfun$$getMaxType$$1.apply(GenICode.scala:1659)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase$$$$anonfun$$getMaxType$$1.apply(GenICode.scala:1659)
	at scala.collection.generic.LinearSequenceTemplate$$class.foldLeft(LinearSequenceTemplate.scala:162)
	at scala.collection.immutable.List.foldLeft(List.scala:27)
	at scala.collection.generic.LinearSequenceTemplate$$class.reduceLeft(LinearSequenceTemplate.scala:189)
	at scala.collection.immutable.List.reduceLeft(List.scala:27)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.getMaxType(GenICode.scala:1659)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.genComparisonOp$$1(GenICode.scala:1342)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.genCond(GenICode.scala:1374)
```
Casting one of the arrays to AnyRef makes it work.
