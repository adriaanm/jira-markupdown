Here's another way of looking at it:
```scala
scala> class In[+T] { type MyType = T }
defined class In

scala> trait Out[T] { val tc: In[T] ; def f(x: tc.MyType): Unit }
defined trait Out

scala> val o1: Out[String] { val tc: In[AnyRef] } = new Out[String] { val tc = new In[String] ; def f(s: String) = () }
o1: Out[String]{val tc: In[AnyRef]} = $anon$1@42929c90

scala> o1.f('hi)
java.lang.ClassCastException: scala.Symbol cannot be cast to java.lang.String
	at $anon$1.f(<console>:9)
	at .<init>(<console>:11)
	at .<clinit>(<console>)
```
I was amazed to see this had gone undiscovered for so long, but then I saw it's a regression... from scala 2.7. Same failure in 2.8 and beyond, but in 2.7 it makes the seemingly correct observation that
```
scala> class In[+T] { type MyType = T }
<console>:4: error: covariant type T occurs in invariant position in type T of type MyType
       class In[+T] { type MyType = T }
                           ^
```
