Scala 2.10.2
{code}
  import collection.mutable.{BitSet => mBitSet}
  import collection.immutable.{BitSet => iBitSet}

  val a: mBitSet = mBitSet(0, 1, 2)
  val b: iBitSet = a.toImmutable
  println(a) //BitSet(0, 1, 2)
  println(b) //BitSet(0, 1, 2)
  a += 3
  println(a) //BitSet(0, 1, 2, 3)
  println(b) //BitSet(0, 1, 2)

  val c: mBitSet = mBitSet(128)
  val d: iBitSet = c.toImmutable
  println(c) //BitSet(128)
  println(d) //BitSet(128)
  c += 3
  println(c) //BitSet(3, 128)
  println(d) //BitSet(3, 128)
{code}

It's not obvious to me that, if I write a function receiving an immutable.Set[Int], I should expect that it might start changing underneath me. 

Also, a comment in the scaladoc of a class I might not actually even end up looking at is probably not sufficient documentation that immutable Sets actually aren't.

