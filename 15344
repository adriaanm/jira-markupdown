Calling Responder.run on Futures does not work.

Running this
```scala
import actors.Actor._
import actors.Futures._
import Responder._

println("Result:" + run( constant(42) ) )

println("Result: " +  run( future{Thread.sleep(1000); 42} ) )

actor{ println("Result: " +  run( future{Thread.sleep(1000); 42} ) ) }
```

in the REPL yields
```scala
Welcome to Scala version 2.8.0.RC2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_20).

scala> import actors.Actor._
scala> import actors.Futures._
scala> import Responder._

scala> println("Result:" + run( constant(42) ) )
Result:Some(42)

scala> println("Result: " +  run( future{Thread.sleep(1000); 42} ) )
scala.actors.SuspendActorControl

scala.actors.ActorProxy@2026c088: caught java.lang.InterruptedException
java.lang.InterruptedException
	at scala.actors.ActorProxy.exit(ActorProxy.scala:33)
	at scala.actors.Reactor$$$$anonfun$$2.apply(Reactor.scala:253)
	at scala.actors.Reactor$$$$anonfun$$2.apply(Reactor.scala:253)
    ...

scala> actor{ println("Result: " +  run( future{Thread.sleep(1000); 42} ) ) }
res3: scala.actors.Actor = scala.actors.Actor$$$$anon$$1@69beea90
    ... NO OUTPUT ...
```

So running the future works neither in the main thread, nor inside an
actor. This is because Responder.run calls respond on the future,
which never returns for Futures:
```scala
object Responder {
  ...
  def run[A](r: Responder[A]): Option[A] = {
    var result: Option[A] = None
    r.foreach(x => result = Some(x))
    result
  }
  ...
}

abstract class Responder[+A] {
  ...
  def foreach(k: A => Unit) { respond(k) }
  ...
}
```


An ugly workaround would be to define
```scala
def run2[A](r: Responder[A]): Option[A] = r match {
  case f: actors.Future[_] => Some[A](f())
  case r => run(r)
}
```

using apply() in case of futures. Then this works:
```scala
scala> println("Result: " +  run2( future{Thread.sleep(1000); 42} ) )
Result: Some(42)
```


Proposed solution:

Obviously, run needs to do different things for different kinds
of Responders. But actually, Future provides the same functionality
with apply() that Responder.run() does for "normal" Responders.

An elegant solution would be to simply add an apply() method
to Responder, too, and have Responder.run just call apply on
the responder in question:
```scala
object Responder {
  ...
  def run[A](r: Responder[A]): Option[A] = Option(r())
  ...
}

abstract class Responder[+A] {
  ...
  def apply(): A = {
    var result: Option[A] = None
    r.foreach(x => result = Some(x))
    result orNull
  }
  ...
}
```

I'm not sure if the Option stuff in apply is strictly necessary, I just tried to preserve the current implementation of run as much as possible.

This would require very litte code changes. It also shouldn't break anything, should it?
