The method m1 and m2 are logically equivalent and the type inference should be able to handle them with the same level of success. However for the second one, the type inference fails and requires type annotation for the argument. I think that it should not. If you are able to handle m1, there should be no problem with handling m2.
```scala
class ParamTest {

  def m1[A,B](a : => A)(b : A => B) : B = b(a)

  def m2[A,B](a : => A, b : A => B) : B = m1(a)(b)

  def test1() {
    m1(1+2)(println(_)) // compiles successfully
    m2(1+2, println(_ : Int)) // compiles successfully
    m2(1+2, println(_)) // does not compile
  }
}
```
