This code:

{code}
class Test[@specialized A] {
  def test(x: A): Boolean = x eq null
}
{code}

produces the following error with -Yspecialize flag:

{code}
Test.scala:2: error: type mismatch;
 found   : A
 required: ?{val eq: ?}
Note that implicit conversions are not applicable because they are ambiguous:
 both method any2stringadd in object Predef of type (x: Any)scala.runtime.StringAdd
 and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
 are possible conversion functions from A to ?{val eq: ?}
  def test(x: A): Boolean = x eq null
                            ^
one error found
{code}

Is it possible to use eq on @specialized types? This code does not work either:

{code}
class Test[@specialized A] {
  val theNull: A = null.asInstanceOf[A]
  def test(x: A): Boolean = x eq theNull
}
{code}

What I want to do is test referential equality to null on Object-based types or compare to 0 in case of int, false/Boolean, etc. I don't want to use == because of speed: I want to use it in very optimized code. And when I decompile "x == theNull" I see (for int):

{code}
    public boolean test$$mcI$$sp(int x)
    {
        return BoxesRunTime.equals(BoxesRunTime.boxToInteger(x), BoxesRunTime.boxToInteger(theNull()));
    }
{code}

I don't want boxing and boxed-equals to compare 2 integers, what's the point in specialization then?

Also, is it possible to do some kind of conditional compilation to write different code for different @specialized types? I don't mean #ifdef but maybe manually specify different source files for different types? Or specify for what type this piece of code with some annotation?
