The for-comprehension in the attempt method fails to compile, despite the fact that the nearly-equivalent desugared version works fine.

{noformat}
object Test extends App {
  def attempt(in: Int): Either[Int, (String, Int)] = in match {
    case 0 => Right("fubar", 13)
    
    case n => {
      val recLeft = attempt(math.abs(n) - 1)
      val recRight = attempt(-math.abs(n) + 1)
      
      // compiles!
      recLeft.right flatMap {
        case (strLeft, numLeft) => {
          recRight.right map {
            case (strRight, numRight) =>
              (strLeft + strRight, numLeft + numRight)
          }
        }
      }
      
      // doesn't compile!
      /* for {
        (strLeft, numLeft) <- recLeft.right
        (strRight, numRight) <- recRight.right
      } yield (strLeft + strRight, numLeft + numRight) */
    }
  }
  
  attempt(42)
  println("Nothing happens")
}
{noformat}

I'm guessing it has something to do with filter, since that's one thing that's missing from my desugared version.
