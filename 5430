Paul,

I sent you the project. 

I have additional input from the AspectJ lead. Problem still looks like StringBuilder.  The signature of minBy (and similarly maxBy) in the bytecode is:

public Object minBy(scala.Function1 f, scala.math.Ordering cmp)

but the generic signature attribute for it is:

<B:Ljava/lang/Object;>(Lscala/Function1<Ljava/lang/Object;TB;>;Lscala/math/Ordering<TB;>;)C

The trailing 'C' indicating the return type is of type primitive char
- this doesn't match the bytecode return type of Object.

Here is a crude reflection test program - it discovers the bytecode
return type and the generic return type.

{code}
import java.lang.reflect.Method;
import java.lang.reflect.Type;

import scala.collection.mutable.StringBuilder;

public class Main {
       public static void main(String[] args) {
               StringBuilder sb = new StringBuilder();
               Method[] ms = StringBuilder.class.getDeclaredMethods();
               for (Method m : ms) {
                       if (m.getName().equals("minBy")) {
                               Class<?> c = m.getReturnType();
                               System.out.println("Bytecode return type: " + c);
                               Type t = m.getGenericReturnType();
                               System.out.println("Generic return type : " + t);
                               if (t instanceof Class) {
                                       if (((Class) t).isPrimitive() && !c.isPrimitive()) {
                                               System.out.println("Incompatible");
                                       }
                               }
                       }
               }
       }
}
{code}
