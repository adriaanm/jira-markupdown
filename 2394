



Here's an exhaustive test for short lists.

{code}

import scala.annotation.tailrec
import scala.collection.mutable.ListBuffer

class RichList[A](val underlying: List[A])
{
  /** Like xs map f, but returns <code>xs</code> unchanged if function
   *  <code>f</code> maps all elements to themselves (wrt ==).
   */
  def mapConserve2[B >: A <: AnyRef] (f: A => B): List[B] = {
    @tailrec
    def loop(mapped: ListBuffer[B], unchanged: List[A], pending: List[A]): List[B] =
      if (pending.isEmpty) {
        if (mapped eq null) unchanged else mapped.prependToList(unchanged)
      } else {
        val head0 = pending.head
        val head1 = f(head0)
        if (head1 == head0) {
          loop(mapped, unchanged, pending.tail)
        } else {
          val b = if (mapped eq null) new ListBuffer[B] else mapped
          var xc = unchanged
          while (xc ne pending) {
            b += xc.head
            xc = xc.tail
          }
          b += head1
          val tail0 = pending.tail
          loop(b, tail0, tail0)
        }
      }
    loop(null, this.underlying, this.underlying)
  }
}

object RichList
{
    implicit def list2richList[A](xs: List[A]) = new RichList(xs)
}

object Test
{
    import RichList._

    val maxListLength = 7 // up to 16, but larger is slower

    def checkBehaviourUnchanged(input: List[_], oldOutput: List[_], newOutput: List[_])
    {
        if (oldOutput eq input)
        {
            assert(newOutput eq oldOutput)
        }
        else
        {
            assert(newOutput.head == oldOutput.head)
            checkBehaviourUnchanged(input.tail, oldOutput.tail, newOutput.tail)
        }
    }

    var callCount = 0
    val lastHexDigit: Function1[BigInt, AnyRef] = { x: BigInt => callCount+=1; if (x < 16) x else x % 16 }

    def main(args: Array[String])
    {
        for (length <- 0 to maxListLength;
             bitmap <- 0 until (1 << length);
             data = (List.range(0, length).map{ x: Int => if ((bitmap & (1 << x)) != 0) BigInt(x+16) else BigInt(x) }))
        {
            // Behaves like map with respect to  ==
            callCount = 0
            val numUnconserved = data.reverse.dropWhile(_ < 16).length
            val result = data mapConserve2 lastHexDigit
            val mapResult = data map lastHexDigit
            assert(result == mapResult)
            assert((result drop numUnconserved) eq (data drop numUnconserved))
            assert(callCount == 2 * length) // map, mapConserve2 call transform for each element in the list

            // Behaves like existing mapConserve with respect to  eq
            checkBehaviourUnchanged(data, data mapConserve lastHexDigit, data mapConserve2 lastHexDigit)
        }
    }
}
{code}


Eliminate richList and checkBehaviourUnchanged,  and the above becomes a good unit test for mapConserve.
