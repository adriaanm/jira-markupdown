```scala
def concreteTypeTagToManifest[T](tag: ConcreteTypeTag[T]): Manifest[T] = {
  // todo. reproduce manifest generation code here. toolboxes are too slow.
  val implicitly = PredefModule.typeSignature.member(newTermName("implicitly"))
  val taggedTpe = appliedType(staticClass("scala.reflect.Manifest").asTypeConstructor, List(tag.tpe))
  val materializer = TypeApply(Ident(implicitly), List(TypeTree(taggedTpe)))
  try mkToolBox().runExpr(materializer).asInstanceOf[Manifest[T]]
  catch { case ex: Throwable => Manifest.classType(tag.erasure).asInstanceOf[Manifest[T]] }
}
```
