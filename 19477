{code}
trait Ach {
  def f(b: Boolean) = ???
  def f(d: Double)  = ???
  def g[@specialized(Boolean, Double) A <: AnyVal](a: A) = a match {
    case b: Boolean => f(b)
    case d: Double  => f(d)
  }
}
{code}
GenASM says:
{noformat}
error: java.lang.AssertionError: assertion failed: inconvertible types : BOOL -> DOUBLE
	at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.emitT2T$1(GenASM.scala:2545)
	at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.genPrimitive$1(GenASM.scala:2709)
	at scala.tools.nsc.backend.jvm.GenASM$JPlainBuilder.scala$tools$nsc$backend$jvm$GenASM$JPlainBuilder$$genInstr$1(GenASM.scala:2296)
{noformat}
GenBCode is more succinct:
{noformat}
java.lang.AssertionError: assertion failed: inconvertible types : Z -> D
	at scala.tools.nsc.backend.jvm.BCodeIdiomatic$JCodeMethodN.emitT2T(BCodeIdiomatic.scala:271)
{noformat}
