On 'if' and 'match' expressions that return some value it is possible to improve the compiled code by changing 'goto' instructions that point to a 'ireturn' instruction by an 'ireturn'. 

In the examples bellow f1 and f2 are identical except for a redundant explicit return statement. We should get the code generated by f2 in both cases.
```scala
class A {

    def f1(n: Int): Int = {
        if (n == 0) 1
        else 2
    }

    def f2(n: Int): Int = {
        if (n == 0) return 1
        else 2
    }
}
```
```scala
$ javap -c A.class
Compiled from "A.scala"
public class scala.A {
  public int f1(int);
    Code:
       0: iload_1       
       1: iconst_0      
       2: if_icmpne     9
       5: iconst_1      
       6: goto          10
       9: iconst_2      
      10: ireturn       

  public int f2(int);
    Code:
       0: iload_1       
       1: iconst_0      
       2: if_icmpne     7
       5: iconst_1      
       6: ireturn       
       7: iconst_2      
       8: ireturn       
...
```

The same with a match expression:
```scala
class B {

    def f1(n: Int): Int = {
        n match {
            case 0 => 1
            case _ => 2
        }
    }

    def f2(n: Int): Int = {
        n match {
            case 0 => return 1
            case _ => 2
        }
    }
}
```
```scala
$ javap -c B.class
Compiled from "A.scala"
public class scala.B {
  public int f1(int);
    Code:
       0: iload_1       
       1: istore_2      
       2: iload_2       
       3: tableswitch   { // 0 to 0
                     0: 24
               default: 20
          }
      20: iconst_2      
      21: goto          25
      24: iconst_1      
      25: ireturn       

  public int f2(int);
    Code:
       0: iload_1       
       1: istore_2      
       2: iload_2       
       3: tableswitch   { // 0 to 0
                     0: 22
               default: 20
          }
      20: iconst_2      
      21: ireturn       
      22: iconst_1      
      23: ireturn       
...
```

I do believe that the solution to this is to simply replace any 'goto' that point to a 'return' instruction by a 'return' just before generation the bytecode.
