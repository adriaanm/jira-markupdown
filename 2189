Replying to [comment:3 cherro]:
> Having thought about this more, I think that while it would be safe (and correct) to omit a field's annotations on a getter/setter generated by `@BeanProperty` and `@BooleanBeanProperty`, it *would not* be safe to omit them on the regular Scala generated accessor/mutator (`def x():Foo` and `def x_(foo:Foo)`). I suspect that this would impact Scala's adherence to the Uniform Access Principle, and the assumptions that come with it.

I don't know about the UAP (I don't think that has any relation with annotations), but I do know about the *actual* trouble with field annotations getting replicated to accessors. JPA, JSR-299, Spring: there are lots of frameworks and standards using annotations to say *inject a value here*. What does it mean to have such an annotation on a getter/accessor? Do you know what these existing frameworks do when they encounter one? I'll tell you: they break.
