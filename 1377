The interpreter is going out of its way to display an exception that isn't the one it actually caught. In doing so, it silently discards potentially valuable debugging information, such as the classes of the outer exceptions, and any messages that might be associated with them. As a more detailed example:
```scala
throw new IllegalArgumentException("argument foo has the wrong type", new ClassCastException)
```

If this example line is entered into the interpreter, the following stack trace is printed:
```scala
java.lang.ClassCastException
	at .<init>(<console>:5)
	at .<clinit>(<console>)
	at RequestResult$$.<init>(<console>:3)
	at RequestResult$$.<clinit>(<console>)
	at RequestResult$$result(<console>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.inv...
```

As you can see, the diagnostic message about "argument foo" is completely lost, as is the fact that the exception in question is actually an `IllegalArgumentException` and not a `ClassCastException`. This makes it much more difficult to diagnose the cause of the exception, especially if the user is not expecting the silent unwrapping to take place.

The change I am proposing is simply that instead of printing the inner exception (`orig.printStackTrace(str)`), the outer exception should be printed instead (`e.printStackTrace(str)`), since the information provided by the inner exception(s) will still be included in the outer exception's stack trace.

Since this change only affects the stack trace displayed to the user, I don't anticipate it breaking any other component. I don't know if the interpreter relies on this behaviour for some other internal reason, but if it does it is still incorrect for it to be discarding user-thrown exceptions. I cannot see how the existing behaviour could be considered correct or desirable.
