scala.sys.SystemProperties has an override on the empty method:
```scala
override def empty = new SystemProperties
```

which basically breaks the Map.empty contract, providing a non-empty map.

When trying to filter through SystemProperties this will result in unwanted behaviour:
```
Welcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_11).
Type in expressions to have them evaluated.
Type :help for more information.

scala> sys.props.filter(_ eq "impossible")
<console>:8: warning: comparing values of types (String, String) and String using `eq' will always yield false
              sys.props.filter(_ eq "impossible")
                                 ^
res0: scala.collection.mutable.Map[String,String] =
Map(env.emacs -> "", java.runtime.name -> Java(TM) SE Runtime Environment, sun.boot.library.path -> d:\Java\JDK\JDK-8u11-x64\jre\bin, java.vm.version -> 25.11-
le.encoding.pkg -> sun.io, user.country -> US, user.script -> "", sun.java.launcher -> SUN_STANDARD, sun.os.patch.level -> "", java.vm.specification.name -> Ja
, java.endorsed.dirs -> d:\Java\JDK\JDK-8u11-x64\jre\lib\endorsed, os.arch -> amd64, java.io.tmpdir -> C...
```

Currently, one must remember this gotcha by converting the instance of SystemProperties to a regular Map beforehand:
```
scala> sys.props.toMap.filter(_ eq "possible")
<console>:8: warning: comparing values of types (String, String) and String using `eq' will always yield false
              sys.props.toMap.filter(_ eq "possible")
                                       ^
res1: scala.collection.immutable.Map[String,String] = Map()
```

This would be resolved by removing the empty override.
sys.props and new SystemProperties would still function as expected, but breaking functionality that depends on empty not being empty
```
scala> sys.props.size
res0: Int = 59
scala> sys.props.empty
res1: scala.sys.SystemProperties = Map()
scala> sys.props.filter(_._1 startsWith "os.").foreach(println)
(os.arch,amd64)
(os.version,6.3)
(os.name,Windows 8.1)
```
