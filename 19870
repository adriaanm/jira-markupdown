In this case:
```scala
trait Foo { //self: Foo1 =>
  //abstract class Bar(val x: String = "")
  object Bar
}

trait Foo1 extends Foo {
  def Bar: Int
  def bar1Op(p: Int): Int

  bar1Op(Bar)
}
```
I would expect an error message like
```scala
Error:(6, 8) overriding method Bar in trait Foo1 of type => Int;
 object Bar in trait Foo has incompatible type;
 (Note that method Bar in trait Foo1 of type => Int is abstract,
  and is therefore overridden by concrete object Bar in trait Foo)
trait Foo1 extends Foo {
      ^
```
In fact, that's what we get by removing the `bar1Op(Bar)` call. But with it, we have instead
```scala
Error:(10, 11) type mismatch;
 found   : Foo1.this.Bar.type
 required: Int
  bar1Op(Bar)
         ^
```
It was rather hard to figure out what was going on in my actual situation, with `object Bar` compiler-generated.
