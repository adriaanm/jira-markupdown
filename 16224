I am writing a Scala class to inherit from a Java class, and I must override a method that takes a protected Java inner class as a parameter. The Java dependency comes as a jar without source code.

I have the exact same setup as found in scala/bug#3120 except that I do not have the Java source code available, so scalac only knows about the Java dependency by looking at the byte code (in jar or class files).

This is how I replicate the problem in a simple setting without my jar dependency:

{code:title=javapkg/JavaSuperClass.java|borderStyle=solid}
package javapkg;
public class JavaSuperClass {
    protected class JavaInnerClass {
    }
    public void method(JavaInnerClass javaInnerclass) {
        System.out.println("hello");
    }
}
```scala

{code:title=scalapkg/ScalaSubClass.java|borderStyle=solid}
package scalapkg
import javapkg.JavaSuperClass
class ScalaSubClass extends JavaSuperClass {
  override def method(javaInnerClass: JavaSuperClass#JavaInnerClass) {
    println("world")
  }
}
```

This is what happens:
```scala
$ cd javapkg
$ javac JavaSuperClass.java
$ cd ../scalapkg
$ scalac -cp .. ScalaSubClass.scala
ScalaSubClass.scala:6: error: class JavaInnerClass in class JavaSuperClass cannot be accessed in javapkg.JavaSuperClass
 Access to protected class JavaInnerClass not permitted because
 prefix type javapkg.JavaSuperClass does not conform to
 class ScalaSubClass in package scalapkg where the access take place
  override def method(javaInnerclass: JavaSuperClass#JavaInnerClass) {
                                                     ^
one error found
```

Note, if I change `JavaSuperClass#JavaInnerClass` to simply `JavaInnerClass`, I get this:
```scala
ScalaSubClass.scala:6: error: method method overrides nothing
  override def method(javaInnerClass: JavaInnerClass) {
               ^
one error found
```

I know this sounds very similar to scala/bug#1806, but I believe this is unrelated because there are no statics anywhere in my example.

I feel like something is wrong, because when I put the same code into a mixed java/scala project in Eclipse, it seemed to compile fine (with the latter `JavaInnerClass` syntax); it's only when I compile the Scala code with only the Java byte code (and no Java source code) that I cannot get it to work. This should also be able to work as well if `method` is protected in both classes.

I posted this to [StackOverflow here](http://stackoverflow.com/questions/6476848/how-to-refer-to-protected-inner-class-in-scala-when-inheriting-from-java-with-by), but was told it was probably a compiler bug as opposed to incorrect usage.
