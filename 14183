Currently only standard dialogs with message parameters of type String are supported in scala.swing Dialog, while JOptionPane allows to pass JComponents as message paramenters, too (which is quite useful for creating login dialogs etc.)

Please add something like this to scala.swing.Dialog:
{code}
  private def emptyPeer(component: Component) =
  if (component == null) "" else component.peer

  def showConfirmation(parent: Component, message: Component, title: String,
     optionType: Options.Value, messageType: Message.Value, icon: Icon): Result.Value =
     Result(JOptionPane.showConfirmDialog(nullPeer(parent), emptyPeer(message), title,
                                   optionType.id, messageType.id, Swing.wrapIcon(icon)))
  def showConfirmation(parent: Component, message: Component, title: String,
     optionType: Options.Value): Result.Value =
     Result(JOptionPane.showConfirmDialog(nullPeer(parent), emptyPeer(message), title,
                                   optionType.id))

  def showOptions(parent: Component, message: Component, title: String,
     optionType: Options.Value, messageType: Message.Value, icon: Icon,
     entries: Seq[Any], initialEntry: Int): Result.Value = {
       val r = JOptionPane.showOptionDialog(nullPeer(parent), emptyPeer(message), title,
                                   optionType.id, messageType.id, Swing.wrapIcon(icon),
                                   entries.map(_.asInstanceOf[AnyRef]).toArray, entries(initialEntry))
       Result(r)
     }

  def showMessage(parent: Component, message: Component, title: String,
     messageType: Message.Value, icon: Icon) {
     JOptionPane.showMessageDialog(nullPeer(parent), emptyPeer(message), title,
                                   messageType.id, Swing.wrapIcon(icon))
  }

  def showMessage(parent: Component, message: Component) {
      JOptionPane.showMessageDialog(nullPeer(parent), emptyPeer(message))
  } 
{code}
Thanks!
