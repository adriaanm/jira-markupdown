```scala
package foo;

class PackagePrivateJavaClass {
  private PackagePrivateJavaClass() {}
  protected PackagePrivateJavaClass(int x) {}
  public PackagePrivateJavaClass(int x, int y) {}
}

====


import scala.reflect.runtime.universe._

package object foo {
  def testAll(): Unit = {
    test(typeOf[foo.PackagePrivateJavaClass].typeSymbol)
  }

  def test(sym: Symbol): Unit = {
    printSymbolDetails(sym)
    if (sym.isClass || sym.isModule) {
      sym.typeSignature.declarations.toList.sortBy(_.name.toString) foreach test
    }
  }

  def printSymbolDetails(sym: Symbol): Unit = {
    def stableSignature(sym: Symbol) = sym.typeSignature match {
      case ClassInfoType(_, _, _) => "ClassInfoType(...)"
      case tpe => tpe.toString
    }
    println("============")
    println(s"sym = $sym, signature = ${stableSignature(sym)}, owner = ${sym.owner}")
    println(s"isPrivate = ${sym.isPrivate}")
    println(s"isProtected = ${sym.isProtected}")
    println(s"isPublic = ${sym.isPublic}")
    println(s"privateWithin = ${sym.privateWithin}")
  }
}

object Test extends App {
  foo.testAll()
}
```
```scala
============
sym = class PackagePrivateJavaClass, signature = ClassInfoType(...), owner = package foo
isPrivate = false
isProtected = false
isPublic = false
privateWithin = package foo
============
sym = constructor PackagePrivateJavaClass, signature = (x$1: Int, x$2: Int)foo.PackagePrivateJavaClass, owner = class PackagePrivateJavaClass
isPrivate = false
isProtected = false
isPublic = true
privateWithin = <none>
```
