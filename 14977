The following code compiles and runs without error with Scala 2.7.7.
With Scala 2.8.0.Beta1 and 2.8.0.r20723, it compiles but throws ClassCastException when run.

It appears to be the same exception as SI-2381, but the code required to trigger the crash is now more complicated (the abstract type T, later instantiated to Int, is needed).

{code}
trait A {
  type T
  def m(a: Array[T]): Unit
  def m2(a: Array[T]): Unit = {
    m(a.map((t:T)=>t))
  }
}

trait B {
  type T = Int
  def m(a: Array[T]): Unit = {
  }
}

object C extends A with B {
  def main(args: Array[String]) {
    m2(Array(1))
  }
}
{code}

{code}
$$ scala C
java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [I
	at C$$.m(A.scala:15)
	at A$$class.m2(A.scala:5)
	at C$$.m2(A.scala:15)
	at C$$.main(A.scala:17)
	at C.main(A.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at scala.tools.nsc.util.ScalaClassLoader$$$$anonfun$$run$$1.apply(ScalaClassLoader.scala:55)
	at scala.tools.nsc.util.ScalaClassLoader$$class.asContext(ScalaClassLoader.scala:22)
	at scala.tools.nsc.util.ScalaClassLoader$$URLClassLoader.asContext(ScalaClassLoader.scala:61)
	at scala.tools.nsc.util.ScalaClassLoader$$class.run(ScalaClassLoader.scala:55)
	at scala.tools.nsc.util.ScalaClassLoader$$URLClassLoader.run(ScalaClassLoader.scala:61)
	at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:153)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
{code}
