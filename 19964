I have noticed some unexpected behavior related to inner case class pattern matching. Assume an outer class named Outer and an inner case class named Inner. The generic type of this inner class (e.g. not bound to a particular Outer instance) is Outer#Inner.

Pattern matching on the Inner class works as expected when feeding values of kind Any, while pattern matching on values of kind Outer#Inner does not. More precicely, inner objects belonging to different outer instances are matched successfully, which is unexpected.

The following code illustrates the problem:
```scala
class Outer {
  case class Inner(val s: String)

  def belongs1(a: Any): Boolean = {
    a match {
      case Inner(s) => true
      case _        => false
    }
  }

  def belongs2(a: Outer#Inner): Boolean = {
    a match {
      case Inner(s) => true
      case _        => false
    }
  }
}


object Sample extends App {
  val o1 = new Outer
  val o2 = new Outer
  val i2 = o2.Inner("")

  println(o1.belongs1(i2)) // Prints false. This is correct; i2 is inner class of o2
  println(o1.belongs2(i2)) // Prints true. Wrong; i2 belongs to o2, not o1.
}
```

See [discussion on scala-internals group](https://groups.google.com/forum/#!topic/scala-internals/H1M_btoYfv0).
