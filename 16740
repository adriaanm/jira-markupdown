Orderings are PartialOrderings too! But Ordering has a bunch of implicit instances defined on its companion object, whereas PartialOrdering has none. It would be great to be able to use them implicitly as PartialOrderings without having to explicitly import Ordering._.

I propose:
```scala
object PartialOrdering {
  implicit def orderingToPartialOrdering[A](implicit ordering: Ordering[A]): PartialOrdering[A] = ordering
}
```
