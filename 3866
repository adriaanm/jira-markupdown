(Oops, messed up formatting, again..)

Hi Ingo, you write:
{code}
The vast majority of use cases for contents_= is to set the initial contents of a window and there you want a pack or at least a validate. Changing this now would break quite some code. 
{code}

You could replace the pack() call to a revalidate() call (and perhaps a repaint(), if I remember well).

{code}
Moreover, I would consider changing the entire content of a window in the middle of an app run bad style anyways. 
{code}
Could you explain that?
To me it seems the most clean and straightforward way. In full accordance with the swing specs.

{code}
If you really want to do that, you should be able to do so with one level of indirection: add a panel and change it's contents instead of the window's contents.
{code}
and not needing borderplate work-arounds like this.
In normal Swing I can just cleanly replace the contents. (Which is supported, check the API docs).

Ofcourse I understand that you want your DSL as simple as possible, and like to get rid of an explicit pack(), which people tend to forget.
That's why I propose you could look to use pack() (and/or validate()) conditionally, not in the contents update method, but at a 'just before displaying' point.
In the other case programmers set the size of a window explicitly (by using size = ...).

I appreciate all the work that has gone in the scala Swing API. It makes swing programming a lot easier and cleaner. But this peticular pack() call hurts more than that it's helpful. 
