```scala
import scala.reflect.mirror._
import scala.tools.nsc.reporters._
import scala.tools.nsc.Settings
import reflect.runtime.Mirror.ToolBox

object Test extends App {
  val code = reify {
    class Foo(val y: Int) {
      def fun = reify{y}
    }

    new Foo(10).fun.tree
  }


  val reporter = new ConsoleReporter(new Settings)
  val toolbox = new ToolBox(reporter)
  val dyn = toolbox.runExpr(code.tree)
  println(dyn)
}
```
```scala
reifying = Foo.this.y
prefix = scala.reflect.package.mirror
This for class Foo, reified as freeVar
Free: class Foo
Late local: class Foo
reify sym def class Foo
locatable: value code false object Test false
tough type: Object
        with ScalaObject {
  val y: Int
  private val y: Int
  def <init>(y: Int): Foo
  def fun: <?>
} (ClassInfoType)
reify sym def value y
reify sym def value y
reify sym def constructor Foo
tough type: (y: Int)Foo (MethodType)
reify sym def method fun
Test.scala:9: error: exception during macro expansion:
scala.reflect.internal.Symbols$CyclicReference: illegal cyclic reference involving method fun
        at scala.reflect.internal.Symbols$Symbol$$anonfun$info$3.apply(Symbols.scala:989)
        at scala.reflect.internal.Symbols$Symbol$$anonfun$info$3.apply(Symbols.scala:987)
        at scala.Function0$class.apply$mcV$sp(Function0.scala:40)
        at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
        at scala.reflect.internal.Symbols$Symbol.lock(Symbols.scala:392)
        at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:987)
        at scala.reflect.reify.codegen.Symbols$class.fillInSymbol(Symbols.scala:104)
        at scala.reflect.reify.codegen.Symbols$class.reifySymbolTableSetup(Symbols.scala:93)
        at scala.reflect.reify.Reifier.reifySymbolTableSetup(Reifiers.scala:12)
        at scala.reflect.reify.Reifier.liftedTree1$1(Reifiers.scala:98)
        at scala.reflect.reify.Reifier.reified(Reifiers.scala:56)
        at scala.reflect.makro.runtime.Reifiers$class.reifyTopLevel(Reifiers.scala:36)
        at scala.reflect.makro.runtime.Context.reifyTopLevel(Context.scala:6)
        at scala.reflect.makro.runtime.Reifiers$class.reifyTree(Reifiers.scala:22)
        at scala.reflect.makro.runtime.Context.reifyTree(Context.scala:6)
        at scala.reflect.api.Universe$.reify(Universe.scala:65)

      def fun = reify{y}
                     ^
one error found
```
