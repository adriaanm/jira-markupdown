Oh I see, you're letting literal false have "false.type" and not boolean.  Technically you're right.  Traditionally we don't utilize that information, because a guard of "if true" or "if false" almost certainly represents some kind of debugging.

It is like, if every time you saw

  if (false && condition) { ... }

You said "Warning! Block of code will never execute!" Well yeah, that's why I put "if (false)" in there, you don't need to hassle me about it scalac.

I could go either way on this, but in the absence of someone identifying a plausible case where this is helpful, I'd say the type of the guard should be widened.
