Within Eclipse, the Scala plugin (either the latest nightly, for every value of nightly in several weeks, perhaps months, preceding this date, or the previous official releases of the plugin) reports a number of "Scala errors" that are not generated by the compiler when it builds.  Lately, I have taken to filtering out Scala errors since they are incorrect and distracting, and only check after an update to see if it has been fixed.

I double-checked my .classpath and .project files to be sure that they are as recommended; I checked to be sure that I was not mixing nightly and previous-release versions of the compiler; I tried cleaning the project, refresh, and manual deletion of offending files, and the problem persists.

Platform is MacOS 10.5.6, Java 1.6, Eclipse 3.4.1 and 3.4.2, and in the case of 3.4.2, a fresh install with fresh installation of plugins.  This bug is VERY ROBUST FOR ME; it does not depend upon a particular release of this or that.

In the first attachment, you will see some of the errors.  There is actually a sub-error, which is that the Scala plugin is playing dumb -- it claims not to know the location of the error, yet when I double-click on it, I go directly there (this window is the result of double-clicking the first error, with the file not previously open).

Note that the first error reported is not the first error in the file -- the "Unknown" location messes up the sort.

The first error in the file is at [https://projectfortress.sun.com/Projects/Community/browser/trunk/ProjectFortress/src/com/sun/fortress/scala_src/typechecker/ExportChecker.scala?rev=3633#L379 line 379 of ExportChecker.scala]

{code}
reference to AnyType is ambiguous;
it is imported twice in the same scope by
import com.sun.fortress.nodes._
and import com.sun.fortress.scala_src.nodes._
{code}

This error is NOT reported by the compiler, run from within Ant.  I tried also upgrading the version of that compiler to the latest by editing build.xml, and it persists in not being reported by the compiler.

The imports (also visible by following the link above):
{code}
package com.sun.fortress.scala_src.typechecker

import _root_.java.util.ArrayList
import _root_.java.util.{List => JavaList}
import _root_.java.util.{Set => JavaSet}
import edu.rice.cs.plt.collect.CollectUtil
import edu.rice.cs.plt.collect.Relation
import edu.rice.cs.plt.tuple.{Option => JavaOption}

import com.sun.fortress.compiler.GlobalEnvironment
import com.sun.fortress.compiler.index.ApiIndex
import com.sun.fortress.compiler.index.ComponentIndex
import com.sun.fortress.compiler.index.ParametricOperator
import com.sun.fortress.compiler.index.{Constructor => JavaConstructor}
import com.sun.fortress.compiler.index.{DeclaredFunction => JavaDeclaredFunction}
import com.sun.fortress.compiler.index.{DeclaredVariable => JavaDeclaredVariable}
import com.sun.fortress.compiler.index.{Dimension => JavaDimension}
import com.sun.fortress.compiler.index.{Function => JavaFunction}
import com.sun.fortress.compiler.index.{FunctionalMethod => JavaFunctionalMethod}
import com.sun.fortress.compiler.index.{ParamVariable => JavaParamVariable}
import com.sun.fortress.compiler.index.{SingletonVariable => JavaSingletonVariable}
import com.sun.fortress.compiler.index.{TypeAliasIndex => JavaTypeAliasIndex}
import com.sun.fortress.compiler.index.{Unit => JavaUnit}
import com.sun.fortress.exceptions.InterpreterBug
import com.sun.fortress.exceptions.StaticError
import com.sun.fortress.exceptions.TypeError
import com.sun.fortress.repository.FortressRepository
import com.sun.fortress.scala_src.nodes._
import com.sun.fortress.scala_src.useful._
import com.sun.fortress.scala_src.useful.Lists._
import com.sun.fortress.scala_src.useful.Options._
import com.sun.fortress.scala_src.useful.Sets._
import com.sun.fortress.nodes._
import com.sun.fortress.nodes_util.Modifiers
import com.sun.fortress.nodes_util.NodeFactory
import com.sun.fortress.nodes_util.NodeUtil
import com.sun.fortress.nodes_util.Span
import com.sun.fortress.parser_util.IdentifierUtil
import com.sun.fortress.useful.HasAt
{code}

{code}
    def equalTypes(left: Type, right: Type): Boolean =
        (left, right) match {
            case (AnyType(_), AnyType(_)) => true
{code}

{{AnyType}} is defined in a generated Java file (AnyType.java) and in a generated Scala file (FortressAst.java). 
The relevant parts of FortressAst.java appear to be:

{code}
/* THIS FILE WAS AUTOMATICALLY GENERATED BY
   com.sun.fortress.astgen.ScalaAstGenerator FROM Fortress.ast */

package com.sun.fortress.scala_src.nodes
import com.sun.fortress.scala_src.useful._
import com.sun.fortress.nodes_util._
import com.sun.fortress.useful.HasAt
import _root_.scala.collection.mutable.ListBuffer
import _root_.java.math.BigInteger
import com.sun.fortress.scala_src.useful.ASTGenHelper._
...
object AnyType {
   def unapply(node:com.sun.fortress.nodes.AnyType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
   def apply(getInfo:com.sun.fortress.nodes.TypeInfo) = 
      new com.sun.fortress.nodes.AnyType(javaify(getInfo).asInstanceOf[com.sun.fortress.nodes.TypeInfo])
}
...
object Type {
   def unapply(node:com.sun.fortress.nodes.Type) = 
      Some((scalaify(node.getInfo()).asInstanceOf[com.sun.fortress.nodes.TypeInfo]))
}

{code}

The generated Java files look like so:
{code}
public class AnyType extends BaseType {
...
public abstract class BaseType extends Type {
...
public abstract class Type extends AbstractNode {
...
public abstract class AbstractNode extends UIDObject implements ASTNode {
{code}

I don't know enough Scala to make additional guesses about what is going on.  I get the impression (this, from previously believing the error message and attempting to correct it by hand) that it has something to do with the definition of "Type"; that the plugin is not getting this correct, which then causes it to perceive an ambiguity where there is none.

I have spent quite a few hours trying to narrow this bug down; our project ([https://projectfortress.sun.com/Projects/Community Project Fortress]) previously was pretty easy to work on in Eclipse, and now it isn't.  Because of this apparent bug in the plugin (and if it is not a bug in the plugin, it is a bug in the documentation, or something, because I cannot figure out what the heck is wrong) we no longer recommend Eclipse to Fortress users, though we do provide instructions, including instructions for filtering out the bogus and distracting "errors" reported by the Scala plugin.
