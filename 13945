I'm not sure this is the proper forum, but after some hour of JProbe and
tackling an annoying leak in my application, I am positive there is a bug in
how individual cell are created. Any operation I do on the table, such as
selecting a row or cell, will create new renderer. I believe this is the
correct behaviour. I believe the problem is that the renderer gets placed
into a scala.swing.Component, and these components have registered listener,
so SWING/AWT end up having strong references to them, and that makes them
linger on forever.

On JProbe (I only get the class name, not the scala name), I noticed a huge
number of objects in the use cases (all with the same number of instances):

`scala.swing.Table$$$$anon$$3`

Referrring to the object above are:
```scala
scala.swing.Component$$$$anon$$7
scala.swing.Component$$$$anon$$12
scala.swing.Component$$$$anon$$6
```

Referring to scala.swing.Component$$$$anon$$6 are :

`java.awt.AWTEventMulticaster`

These guys are used to register listener. If you look into
scala.swing.Component it registers actions.

I tried to nail down the actual problem,I think that it boils down to this:

1) Something happens on the table (selecting something for example)

2) rendererComponent of Table is called, this gives a new Object to render the cell, this gets bumped to a component.

3) Component registers a set of listener

4) JTable throw away the components, but the listener keep them alive.

This also explains the slowing of the interface I noticed after a long
running session.
