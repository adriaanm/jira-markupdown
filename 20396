I have the following code (where {{ownerRef}} is of type {{AtomicReference[Either[TrieMap[Thread, NestingLevel], (Thread, NestingLevel)]]}}):
```java
			val maybeBlockingTxn = ownerRef.get.fold(_.values.headOption,{pair => Some(pair._2)})
```


I expect that when the `Left` branch of the `fold` is taken, the return value will be of type `Option[NestingLevel]`. Instead, with high-frequency in the application I am running, I get an exception whose stack trace bottoms out as follows:
```java
[error] (run-main-0) java.util.NoSuchElementException: next on empty iterator
java.util.NoSuchElementException: next on empty iterator
	at scala.collection.Iterator$$anon$2.next(Iterator.scala:39)
	at scala.collection.Iterator$$anon$2.next(Iterator.scala:37)
	at scala.collection.concurrent.TrieMapIterator.next(TrieMap.scala:982)
	at scala.collection.concurrent.TrieMapIterator.next(TrieMap.scala:961)
	at scala.collection.MapLike$$anon$2.next(MapLike.scala:216)
	at scala.collection.IterableLike$class.head(IterableLike.scala:107)
	at scala.collection.AbstractIterable.head(Iterable.scala:54)
	at scala.collection.TraversableLike$class.headOption(TraversableLike.scala:412)
	at scala.collection.AbstractTraversable.headOption(Traversable.scala:104)
```


The exception originates in the line of code reproduced above.
