I haven't looked at the cause of this, but it feels like it can only be due to hardcoded handling of "Context" and "PrefixType" somewhere.
{code}
import scala.language.experimental.macros
import scala.reflect.macros.Context
import scala.collection.TraversableLike

// This one compiles
object Test {
  type Alias[T, CC[_]] = Context { type PrefixType = TraversableLike[T, CC[T]] }
  def f() = macro f_impl
  def f_impl(c: Alias[Int, List])() = ???
}

// This one doesn't
object Test2 {
  type Ctx = scala.reflect.macros.Context
  type Alias[T, CC[_]] = Ctx { type PrefixType = TraversableLike[T, CC[T]] }

  def f() = macro f_impl
  def f_impl(c: Alias[Int, List])() = ???
}
{code}

The error is:

{noformat}
./a.scala:15: error: macro implementation has wrong shape:
 required: (c: scala.reflect.macros.Context)(): c.Expr[Any]
 found   : (c: Test2.Alias[Int,List])(): Nothing
type mismatch for parameter c: scala.reflect.macros.Context does not conform to Test2.Ctx{type PrefixType = scala.collection.TraversableLike[Int,List[Int]]}
  def f() = macro f_impl
                  ^
one error found
{noformat}
