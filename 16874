*Reproduce code:*
{code}
import scala.reflect.makro._
object objectExtender{
  /**
   * takes an object t and returns a structural copy with an additional member with name "name" and value "body" 
   */
  def extend[T <: AnyRef,Q]( t : T, name:String, body:Q ) = macro extendMacro[T,Q]
  def extendMacro[T <: AnyRef : c.TypeTag,Q](c:Context)( t : c.Expr[T], name:c.Expr[String], body:c.Expr[Q]) = {
    import c.mirror._
    import c.{Tree=>_}
    val nameString = name.tree match{ case Literal(Constant(name:String)) => name }
    // extend member foo based on member bar + something
    val tree1 = Expr(ValDef( NoMods, newTermName(nameString), TypeTree(), body.tree ))
    // copy members, currently hard-coded, could instead reflect over the type  
    val tree2 = Expr(ValDef( NoMods, newTermName("bar"), TypeTree(), Select(t.tree, "bar") ))
    // combine them into a new type using reify. Here we could alternatively extend the tree by hand in order copy over a dynamic
    reify(
      new {
        val baz = "asdf"
        tree1.eval
        tree2.eval
      }
    )
  }
}
{code}

{code}
object test extends App{
  val z = new { val bar = 5 }
  val x = objectExtender.extend( z, "foo", z.bar + 123 )
  println( x.baz )
  println( x.foo )
  println( x.bar )
}
{code}

*Expected result:*
asdf
128
123

*Actual result:*
{noformat}
test.scala:5: error: value foo is not a member of Object{val baz: String}
  println( x.foo ) // fails (not intended)
             ^
test.scala:6: error: value bar is not a member of Object{val baz: String}
  println( x.bar ) // fails (not intended)
             ^
two errors found
{noformat}
