This REPL session explains it the best:

{code}
Welcome to Scala version 2.10.0 (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_37).
Type in expressions to have them evaluated.
Type :help for more information.

scala> import scala.reflect.runtime.universe._
import scala.reflect.runtime.universe._

scala> typeOf[java.lang.reflect.Method].member(newTermName("invoke"))
res0: reflect.runtime.universe.Symbol = method invoke

scala> res0.annotations
res1: List[reflect.runtime.universe.Annotation] = List()
{code}

The relevant piece of code is in [JavaMirrors|https://github.com/scala/scala/blob/master/src/reflect/scala/reflect/runtime/JavaMirrors.scala#L1107]:
{code}
private def jmethodAsScala1(jmeth: jMethod): MethodSymbol = {
      val clazz = sOwner(jmeth)
      val meth = clazz.newMethod(newTermName(jmeth.getName), NoPosition, toScalaMethodFlags(jmeth.getModifiers))
      methodCache enter (jmeth, meth)
      val tparams = jmeth.getTypeParameters.toList map createTypeParameter
      val paramtpes = jmeth.getGenericParameterTypes.toList map typeToScala
      val resulttpe = typeToScala(jmeth.getGenericReturnType)
      setMethType(meth, tparams, paramtpes, resulttpe)
      copyAnnotations(meth, jmeth)
      if ((jmeth.getModifiers & JAVA_ACC_VARARGS) != 0) meth.setInfo(arrayToRepeated(meth.info))
      meth
    }
{code}

It forgets to load information about thrown exceptions and synthesize the right annotations.
