This works fine:

{code}
scala> def f(i: => Option[Int] = None) = i
f: (i: => Option[Int])Option[Int]
{code}

but not this:

{code}
scala> class Foo(i: => Option[Int] = None)
<console>:4: error: type mismatch;
 found   : None.type (with underlying type object None)
 required: => Option[Int]
       class Foo(i: => Option[Int] = None)
{code}

This really unfortunate because I have a class that would benefit from being able to specify None as the default value for a by-name Option.
