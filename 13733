With either 2.7.2 RC1 or 2.7.1 the following,
```scala
object TIF {
  abstract class A
  case class B(b : String) extends A
  case class C(c : String) extends A

  val l = List(Right(B("b")), Left(C("c")))
  l.map(Either.merge)
}
```

results in a compile error,
```scala
foo.scala:7: error: type mismatch;
 found   : (Either[T,T]) => T
 required: (Either[TIF.C,TIF.B] with Product) => ?
  l.map(Either.merge)
               ^
one error found
```

Adding the type parameter manually,
```scala
  l.map(Either.merge[A])
```

or adding a type ascription,
```scala
  l.map(Either.merge : Either[A, A] => A)
```

solves the problem. However it seems that A should be being inferred as the LUB here without explicit type annotations.

Whether or not that's the case, it would be helpful if SLS 6.25.4 were expanded to cover this kind of example in more detail.
