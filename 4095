Well, I suppose you are right for the specific case I mentioned. However, it's not necessarily the case that the expression passed is a single object construction.  It might use a more complex expression, say a call to a factory method, to get the object, in which case a by-name advantage would be more likely.
 
Perhaps more importantly, the Scala APIs have many places where by-name is already used to express the fact that an argument is only evaluated if needed.  E.g., `getOrElse` on a Map.  One could make your argument about the second argument to that method as well, since the default value is very likely to be a constant and constructing the thunk is really adding extra overhead. The `^^^` case seems inconsistent with these other uses of by-name in the library.
