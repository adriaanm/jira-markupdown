Oh man, this one depends on compilation order: this works:

{code}
class A[K[L[_]]]
class B[K[L[_]]]

object Test {
  (null: Any) match {
    case a: A[k] => new B[k]()
  }
}
{code}

The condition in question:

{code}
if (!isComplete)
	args mapConserve (typedHigherKindedType(_, mode))
	// if symbol hasn't been fully loaded, can't check kind-arity
else map2Conserve(args, tparams) { (arg, tparam) =>
	//@M! the polytype denotes the expected kind
	typedHigherKindedType(arg, mode, GenPolyType(tparam.typeParams, AnyTpe))
}
{code}
