{code:scala|title=Implicits.scala}
import rx.Observable
import rx.functions.Func1
import scala.language.implicitConversions

object Implicits {
  implicit class ScalaObservable[T](val underlying: Observable[T]) extends AnyVal {
    //if remove `@inline` annotation then test will success
    @inline def scMap[R](f: T => R): Observable[R] = underlying.map[R](f.toRx)

    //if change `f.toRx` to `new SFunc1(f)` then test will success
    //@inline def scMap[R](f: T => R): Observable[R] = underlying.map[R](new SFunc1(f))
  }

  final class SFunc1[T1, R](f: T1 => R) extends Func1[T1, R] {
    def call(t1: T1): R = f(t1)
  }
  implicit class RichFunction1[T1, R](val f: T1 => R) extends AnyVal {
    def toRx = new SFunc1(f)
  }
}
{code}

{code:scala|title=LogView.scala}
import com.sandinh.couchbase.document.JsDocument
import play.api.libs.json.{JsValue, Json}
import rx.Observable

//if we `import com.sandinh.rx.Implicits._` instead of `import Implicits._`
//then both sbt clean compile & increment compile will be failed
import com.sandinh.rx.Implicits._

//if we `import Implicits._` instead of `import com.sandinh.rx.Implicits._`
//then clean compile will success, but after that, if we change this file
// ex, by adding/ deleting `private` modifier from `def row2Obs`,
// then run increment compile => failed!
//import Implicits._

object LogView {
  private def row2Obs(doc: Observable[JsDocument]): Observable[JsValue] =
    doc.scMap(d => Json.obj(d.id -> d.content))
}
{code}

{code:sbt|title=build.sbt}
name := "test"
version := "1.0"

//tested (fail) with both scala 2.11.5 & 2.11.6-20150127.023613-7
//resolvers += Resolver.sonatypeRepo("snapshots")
//scalaVersion := "2.11.6-SNAPSHOT"

scalaVersion := "2.11.5"

scalacOptions ++= Seq("-encoding", "UTF-8"
  ,"-optimise" //only fail with -optimise option
//  ,"-Ybackend:GenBCode" //tested (fail) with both GenASM & GenBCode backends
)

libraryDependencies += "com.sandinh" %% "couchbase-scala" % "6.1.0-SNAPSHOT"

//tested (fail) with & without this setting:
libraryDependencies <+= scalaVersion(v => "org.scala-lang" %  "scala-reflect" % v)
{code}
