The following code:

{{ 
abstract class Base[A](val value: A) {

}

case class DerivClass1[A](val valueA: A) extends Base[A](valueA) {
  
  def operator(sf: Base[A])  = {
    sf match {
      case DerivClass1(value) => println("this should work (and it does)") 
      case DerivClass2(value) => println("and this should too (but it doesn't)")
    }
  }
}

case class DerivClass2[A](val valueA: A) extends Base[(A,Int)]((valueA,1)) {
  
  def operator(sf: Base[(A,Int)])  = {
    sf match {
      case DerivClass1(value) => println("this works") 
      case DerivClass2(value) => println("this too")
    }
  }
  
}
```scala

should compile, but it doesn't: 
```
Error.scala:10: error: constructor cannot be instantiated to expected type;
 found   : DerivClass2[A(in class DerivClass2)]
 required: Base[A(in class DerivClass1)]
      case DerivClass2(value) => println("and this should too (but it doesn't)")
           ^
one error found

{code}
