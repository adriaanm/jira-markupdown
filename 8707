I know I should really have a pull request or at least a diff.  But anyway, here's fixed code that

(1) Throws the correct exception on an error

(2) Does not fail on a short octal at the end of a string `s"\4"`

(3) Uses the `append(str, a, b)` string builder method, which should be faster than substring (no object creation required)
```scala
  def treatEscapes(str: String): String = {
    lazy val bldr = new java.lang.StringBuilder
    val len = str.length
    var start = 0
    var cur = 0
    var idx = 0
    def output(ch: Char) = {
      bldr.append(str, start, cur)
      bldr append ch
      start = idx
    }
    while (idx < len) {
      cur = idx
      if (str(idx) == '\\') {
        idx += 1
        if (idx >= len) throw new InvalidEscapeException(str, cur)
        if ('0' <= str(idx) && str(idx) <= '7') {
          val leadch = str(idx)
          var oct = leadch - '0'
          idx += 1
          if (idx < len && '0' <= str(idx) && str(idx) <= '7') {
            oct = oct * 8 + str(idx) - '0'
            idx += 1
            if (idx < len && leadch <= '3' && '0' <= str(idx) && str(idx) <= '7') {
              oct = oct * 8 + str(idx) - '0'
              idx += 1
            }
          }
          output(oct.toChar)
        } else {
          val ch = str(idx)
          idx += 1
          output {
            ch match {
              case 'b' => '\b'
              case 't' => '\t'
              case 'n' => '\n'
              case 'f' => '\f'
              case 'r' => '\r'
              case '\"' => '\"'
              case '\'' => '\''
              case '\\' => '\\'
              case _ => throw new InvalidEscapeException(str, cur)
            }
          }
        }
      } else {
        idx += 1
      }
    }
    if (start == 0) str
    else bldr.append(str, start, idx).toString
  }
```

It does not address the issue of it being weird that `s"""\n"""` gives you a carriage return.  It also does not address the issue that `s"\""` doesn't do what you think it will.
