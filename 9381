This seems to be a pretty fundamental failure of the type system, and maybe part of the motivation for dotty.

Abstract type members aren't unified as normally implied by the word; they can only be refined. What that means in this context is that a type is created which is the intersection of B with its self type, that is, B with A. The intersection type is created assuming it can just use the last 'C' in the linearization, since the compile will fail in refchecks unless the last 'C' is a refinement of any earlier 'C's.

This system breaks down with self types, because a class sees itself as having the intersection of the declared class and the declared self type. Either X with Y or Y with X might be valid instantiations; there is no way a priori to know which is the "last" member C.
{code}
// Declare this way, one can create both new A with B and new B with A
trait A { self: B => type M }
trait B { self: A => type M }

// Given some constraints, it can only be created in one direction
trait A { self: B => type M <: AnyRef }
trait B { self: A => type M <: String }

scala> new A with B { }
res2: A with B = $anon$1@3e59503b

scala> new B with A { }
<console>:13: error: overriding type M in trait B with bounds <: String;
 type M in trait A with bounds <: AnyRef has incompatible type
              new B with A { }
                  ^
{code}
...but that analysis hasn't taken place yet, and performing that analysis during typing would be a huge change. So it uses the last C it finds, which (at random) is the self type. It could as easily have been the class, and if I switch them, your example compiles:
{code}
 --- i/src/compiler/scala/tools/nsc/typechecker/Namers.scala
 +++ w/src/compiler/scala/tools/nsc/typechecker/Namers.scala
 @@ -773,7 +773,7 @@ trait Namers extends MethodSynthesis {
        val selftpe = typer.typedType(tree).tpe
        sym setInfo {
          if (selftpe.typeSymbol isNonBottomSubClass sym.owner) selftpe
 -        else intersectionType(List(sym.owner.tpe, selftpe))
 +        else intersectionType(List(selftpe, sym.owner.tpe))
        }
      }
{code}
...except of course that would mean this modified example, which does compile right now, would turn into an error.
{code}
trait A {
  type C <: D
  trait D { def foo: Unit }
}

trait B { this: A =>
  type C <: Any
  def bar(c: C) = c.foo
}
{code}

tl;dr it should definitely be fixed, but it may require nontrivial changes to language, specification, and/or implementation.
