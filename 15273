This problem is regarding unexpected (and unjustifiable) behavior of the "+=" family of operators (actually, I only tested += and *=, but assume the others like /= and -= etc have the same problem).

Consider a statement or expression like:

  X += Y

Currently the rules for compiling this go something like:
```scala
1. Check if there's a += method on X; if ok: done, else:
2. Try implicit conversion of X to an object that has += ; if ok: done, else:
3. Expand the expression to X = X + Y and move on
   (what happens after this, is not relevant)
```

Here's the problem: When rule 2 above is successful, the statement becomes equivalent to I(X).+=Y, where I(X) is a temporary object resulting from the implicit conversion of X.

After attempting practical usage of the language on a small project, I have found this to be a rather crippling specification, for two reasons:

1. The behavior is theoretically flawed. The implicit conversion to I(X).+=(Y) is never the correct choice in a properly written program. That is because the I(X) result of the implicit is promptly discarded after the += operation. So the only time it is ever correct, is when the developer expected an ex-object side-effect to occur in the += method of I(X); I cannot fathom that the Scala language was designed to satisfy that kind of developer.

2. Beyond a theoretical flaw, pragmatically this makes it impossible to mix user-defined arithmetic types (e.g. a DSL for certain classes of mathematical problems) with "natural" primitive type arithmetic in the same program. The requirement to mix both is common when some auxiliary operations (such as manipulating the index to an array of domain specific types) have to occur in the same code where those domain specific types are operated upon. 

A better way to deal with this would be:
```scala
1. Check if there's a += method on X; if ok: done, else:
2. Expand the expression to: X = X + Y; 
3, if X has a usable .+(Y): done, else:
4. Look for implicits to satisfy X = I(X) + Y or X = X + I(Y) 
   (failing that, at this point the compile should probably fail)
```

Looking for an implicit to match the +=, or rather, making I(X) the target of the +=, is never the right thing to do. I(X) += Y should always be treated as X = I(X) + Y instead.

**how to reproduce:**
```scala
// not a real-world example.
class A(var i:Int) { def +=(b: Int) = { i = 999*b } }
implicit def intToA(i: Int) = new A(i) 
var i = 0
i += 1
// result: i is 0; expected i == 1.
```
