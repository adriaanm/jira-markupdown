I've already spent some time on this ticket, but I am creating it so that it doesn't get forgotten.
Code
{code}
class As {
  trait A {
      def foo(parents: String): A = {
        (() => parents)
        null
    }
  }
}
{code}
detects (wrongly) a change in definition of method _foo_ (parents$$1 changed to parents). For some reason a cloned symbol of trait As$$A gets changed when we try to compile again with RefinedBuildManager even without making any changes to the source class.

In this case the for loop is the source of anonymous class and since _parents_ is used in the body of _for_, therefore it gets renamed to _parents$$1_ in lambdalift, but the point is that this shouldn't affect the symbol that is cloned at the end of build manager process.

This is a reduced example of what I believe is happening for Types trait in symtab package. It causes (a very annoying) excessive compilation.
