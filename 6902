Offending tree looks as follows:

{code}
object C extends Object with ScalaObject {
  def this(): object C = {
    C.super.this();
    ()
  }
}
{code}

When reifying the constructor, codifier meets the return type. It is UniqueTypeRef, which has a sym of type ModuleClassSymbol. That symbol is a module class, i.e. it triggers the following branch of code:

{code}
  else if (sym.isModuleClass)
    Select(reifySymRef(sym.sourceModule), "moduleClass")
{code}

That branch tries to reify sourceModule, which references object C, which tries to reify the constructor, which, well, you get the idea.
