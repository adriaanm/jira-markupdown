this would be very hard to fix because `JSONObject` inherits from two raw classes, you can however work around it using a simple cast:
```scala
// we have no control over the *.java files -- need to cast to generic supertype of MyHashMap (i.e., JSONObject) for interoperability
object Test {
  val hm = new MyHashMap().asInstanceOf[HashMap[String, Int]] // cast is needed to avoid error in comment below
  hm.put("a", 1)
/* error: overloaded method value put with alternatives:
  (K,V)V <and>
  ((x$$1: IK with K,x$$2: _2)_2) forSome { type _2 >: IV with V; type _2 >: IV with V; type _2 >: IV with V; type _2 >: IV with V }
 cannot be applied to (java.lang.String, Int)
*/
}
```

here are the java files I used for a reproducible test with fewest possibly dependencies
```scala
public class HashMap<K,V> implements Map<K,V> {
  public V put(K key, V value) { return null; }
}
```
```scala
public interface Map<IK,IV> {
  IV put(IK key, IV value);
}
```
```scala
public class MyHashMap extends HashMap implements Map {

}
```
