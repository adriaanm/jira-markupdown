It's worse than you claim: simply being loaded is not enough to make a class show up:
```scala

package foo

import reflect.runtime.universe._
import reflect.runtime.{currentMirror=>cm}

class C

object Main extends App {

	val pkg = cm.staticPackage("foo")
	println(pkg.moduleClass.typeSignature.members)

	pkg.moduleClass.typeSignature.member(newTypeName("Main"))
	println(pkg.moduleClass.typeSignature.members)

	cm.classLoader.loadClass("foo.C")
	println(pkg.moduleClass.typeSignature.members)

	pkg.moduleClass.typeSignature.member(newTypeName("C"))
	println(pkg.moduleClass.typeSignature.members)

}
```
```scala
[info] Running foo.Main
Scope{

}
Scope{
  object Main;
  class Main extends
}
Scope{
  object Main;
  class Main extends
}
Scope{
  object C;
  class C extends ;
  object Main;
  class Main extends
}
```
