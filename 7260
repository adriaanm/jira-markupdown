This is not a bug, just very unexpected to people not used to non-strictness. The problem is due solely to the reassignment of `rightElems` to itself. The `++` method on `Iterator` is non-strict, which is necessary to avoid premature evaluation of iterated values, which means it works like a function calling itself. In other words, this:
```scala
x = y ++ x
```

works more or less like this:
```scala
x = if (y.hasNext) y else (() => x)()
```

In other words, when `rightElems` is checked for a next element after assigning an empty `bufferedRightElems` to it, it will *recursively* check whether `rightElems` has a next element.

So, don't do that.
