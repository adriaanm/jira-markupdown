The following code...
```scala
trait Builder[C[_], T] {                                                                                               
  def +=(x: T)
  def finalise: C[T]
}   
    
trait Buildable[C[_]] {                                                                                                
  def builder[T]: Builder[C,T]                                                                                         
} 

object Test {
  
  implicit object buildableList extends Buildable[List] {                                                              
    def builder[T] = new Builder[List,T] {
      val buf = new scala.collection.mutable.ListBuffer[T]
      def +=(x: T) = buf += x
      def finalise = buf.toList
    }                                                                                                                  
  }

  def foo[C[_],T](x: T)(implicit b: Buildable[C]): C[T] = {
    val builder = b.builder[T]                                                                                         
    builder += x
    builder.finalise
  }
    
  val l: List[Int] = foo(8)                                                                                                                                                                                                              
} 
```

... gives the following compiler exception:
```scala
Exception in thread "main" java.lang.AssertionError: assertion failed
        at scala.Predef$$.assert(Predef.scala:91)
        at scala.tools.nsc.typechecker.Infer$$Inferencer.qualify$$1(Infer.scala:717)
        at scala.tools.nsc.typechecker.Infer$$Inferencer$$$$anonfun$$checkKindBounds$$1$$$$anonfun$$apply$$5.apply(Infer.scala:732)
        at scala.tools.nsc.typechecker.Infer$$Inferencer$$$$anonfun$$checkKindBounds$$1$$$$anonfun$$apply$$5.apply(Infer.scala:731)
        at scala.List.map(List.scala:724)
        at scala.tools.nsc.typechecker.Infer$$Inferencer$$$$anonfun$$checkKindBounds$$1.apply(Infer.scala:731)
        at scala.tools.nsc.typechecker.Infer$$Inferencer$$$$anonfun$$checkKindBounds$$1.apply(Infer.scala:724)
        at scala.List.foreach(List.scala:753)
        at scala.tools.nsc.typechecker.Infer$$Inferencer.checkKindBounds(Infer.scala:724)
        at scala.tools.nsc.typechecker.Infer$$Inferencer.checkBounds(Infer.scala:622)
        at scala.tools.nsc.typechecker.Infer$$Inferencer.inferMethodInstance(Infer.scala:827)
        at scala.tools.nsc.typechecker.Typers$$Typer.doTypedApply(Typers.scala:1657)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedApply$$1(Typers.scala:2439)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed1(Typers.scala:3027)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3130)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3175)
        at scala.tools.nsc.typechecker.Typers$$Typer.transformedOrTyped(Typers.scala:3224)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedValDef(Typers.scala:1181)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed1(Typers.scala:2865)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3130)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3164)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedStat$$1(Typers.scala:1500)
        at scala.tools.nsc.typechecker.Typers$$Typer$$$$anonfun$$21.apply(Typers.scala:1529)
        at scala.tools.nsc.typechecker.Typers$$Typer$$$$anonfun$$21.apply(Typers.scala:1529)
        at scala.List$$.loop$$1(List.scala:244)
        at scala.List$$.mapConserve(List.scala:261)
        at scala.List$$.loop$$1(List.scala:248)
        at scala.List$$.mapConserve(List.scala:261)
        at scala.List$$.loop$$1(List.scala:248)
        at scala.List$$.mapConserve(List.scala:261)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedStats(Typers.scala:1529)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedTemplate(Typers.scala:1147)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedModuleDef(Typers.scala:1043)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed1(Typers.scala:2862)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3130)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3164)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedStat$$1(Typers.scala:1500)
        at scala.tools.nsc.typechecker.Typers$$Typer$$$$anonfun$$21.apply(Typers.scala:1529)
        at scala.tools.nsc.typechecker.Typers$$Typer$$$$anonfun$$21.apply(Typers.scala:1529)
        at scala.List$$.loop$$1(List.scala:244)
        at scala.List$$.mapConserve(List.scala:261)
        at scala.List$$.loop$$1(List.scala:248)
        at scala.List$$.mapConserve(List.scala:261)
        at scala.List$$.loop$$1(List.scala:248)
        at scala.List$$.mapConserve(List.scala:261)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedStats(Typers.scala:1529)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed1(Typers.scala:2855)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3130)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3164)
        at scala.tools.nsc.typechecker.Analyzer$$typerFactory$$$$anon$$2.apply(Analyzer.scala:40)
        at scala.tools.nsc.Global$$GlobalPhase.applyPhase(Global.scala:245)
        at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:233)
        at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:233)
        at scala.Iterator$$class.foreach(Iterator.scala:376)
        at scala.collection.mutable.ListBuffer$$$$anon$$1.foreach(ListBuffer.scala:255)
        at scala.tools.nsc.Global$$GlobalPhase.run(Global.scala:233)
        at scala.tools.nsc.Global$$Run.compileSources(Global.scala:529)
        at scala.tools.nsc.Global$$Run.compile(Global.scala:613)
        at scala.tools.nsc.Main$$.process(Main.scala:86)
```

However, if the call to `foo` is explicitly annotated with the types, everything works fine:
```scala
val l: List[Int] = foo[List,Int](8)
```
