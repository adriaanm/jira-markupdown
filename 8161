A potential workaround, for those who would like to get something working with 2.10.0, is to undo the translation of pattern matching anonymous partial functions.

Care must be taken in the other parts of the macro to then treat `Match(EmptyTree, cases)` as such a contruct, rather than a regular pattern match. If you weren't doing that anyway, your macro might not work under `-Xoldpatmat`.
```scala
  private object RestorePatternMatchingFunctions extends Transformer {

    override def transform(tree: Tree): Tree = {
      val SYNTHETIC = (1 << 21).toLong.asInstanceOf[FlagSet]
      def isSynthetic(cd: ClassDef) = cd.mods hasFlag SYNTHETIC
      val ApplyOrElse = newTermName("applyOrElse")

      tree match {
        case Block(
        (cd@ClassDef(_, _, _, Template(_, _, body))) :: Nil,
        Apply(Select(New(a), nme.CONSTRUCTOR), Nil)) if isSynthetic(cd) =>
          val restored = (body collectFirst {
            case DefDef(_, ApplyOrElse, _, _, _, Match(_, cases)) =>
              val transformedCases = super.transformStats(cases, currentOwner).asInstanceOf[List[CaseDef]]
              Match(EmptyTree, transformedCases)
          }).getOrElse(c.abort(tree.pos, s"Internal Error: Unable to find original pattern matching cases in: $body"))
          restored
        case t                                                          => super.transform(t)
      }
    }
  }
```

