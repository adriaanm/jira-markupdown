When I define secondary constructors with default parameters, if two parameters share the same type it gives me a "double definition" error. Below is the offending code:

{code}
case class Person(name: String = "", address: String = "") {
  def this(p: Person, name: String = null, address: String = null) = this(
    if(name == null) p.name else name,
    if(address == null) p.address else address
  )
}
{code}

Error:

{code}
Person.scala:2: error: double definition:
method <init>$default$2:=> String and
method <init>$default$2:=> String at line 1
have same type
  def this(p: Person, name: String = null, address: String = null) = this(
                      ^
one error found
{code}
