repeated ++ of a single-item collection onto a Vector is outrageously slow compared to repeatedly adding one item with + :
```
Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0-ea).

scala> import System.{currentTimeMillis => millis}
import System.{currentTimeMillis=>millis}

scala> def time[T](f: => T): Long = { val start = millis; f; millis - start }
time: [T](f: => T)Long

scala> def fast(n: Int) = (1 to n).foldLeft(Vector[Int]())(_ :+ _)
fast: (n: Int)scala.collection.immutable.Vector[Int]

scala> def slow(n: Int) = (1 to n).foldLeft(Vector[Int]())((acc, a) => acc ++ List(a))
slow: (n: Int)scala.collection.immutable.Vector[Int]

scala> Stream.iterate(1)(_ * 10).map(n => time(fast(n))).take(6).force
res0: scala.collection.immutable.Stream[Long] = Stream(1, 0, 1, 4, 48, 77)

scala> Stream.iterate(1)(_ * 10).map(n => time(slow(n))).take(6).force
res1: scala.collection.immutable.Stream[Long] = Stream(1, 0, 1, 30, 974, 88617)
```

Paul Chiusano pointed this out over at scala/bug#4442, where he comments: "Since Vector has a constant time snoc operation, it seems like the default implementation of ++ should be repeated calls to :+, which doesn't require any internal changes to Vector."
