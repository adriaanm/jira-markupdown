Not in the official specification, but according to the unofficial one:

The first translates to
```scala
  new UnprefixedAttribute("attr", x, xml.Null)
```
while the second translates to
```scala
  val buffer = new xml.NodeBuffer
  buffer &+ x
  new xml.Elem(null, "sometag", xml.Null, scope, buffer)
```
!UnprefixedAttribute has overloaded constructors:
```scala
    new UnprefixedAttribute(key: String, value: String, next: MetaData)
    new UnprefixedAttribute(key: String, value: Seq[Node], next1: MetaData)
    new UnprefixedAttribute(key: String, value: Option[Seq[Node]], next: MetaData)
```
The signature of `&+` is:
```scala
   &+(o: Any): NodeBuffer
```

So, an attribute value must conform to `String`, `Seq[Node]`, or `Option[Seq[Node]]`.  Element content is allowed to be anything and so implicits are never considered.

This is also why
```scala
  <sometag attr={1}/>
```
doesn't work, but this does:
```scala
  <sometag>{1}</sometag>
```

In any case, this is essentially the same issue as scala/bug#1787 and should probably be closed as a duplicate.
