Here's what I was trying to say about equals/hashCode of SubTypePair.

{code}
scala> trait C { def apply: (Int @unchecked) }
defined trait C

scala> val intUnchecked = typeOf[C].decls.head.info.finalResultType
intUnchecked: $r.intp.global.Type = Int @unchecked

scala> val p1 = new SubTypePair(intUnchecked, intUnchecked)
p1: $r.intp.global.SubTypePair = Int @unchecked <:<? Int @unchecked

scala> val p2 = new SubTypePair(intUnchecked.withoutAnnotations, intUnchecked.withoutAnnotations)
p2: $r.intp.global.SubTypePair = Int <:<? Int

scala> p1 == p2
res0: Boolean = true

scala> p1.hashCode == p2.hashCode
res1: Boolean = false
{code}

Annotated types are just an example; you could construct another with type aliases, which is probably what is hitting this example.
