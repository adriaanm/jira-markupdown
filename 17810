This is a question that keeps me up at night:

how can getCommonSuperclass() do its job if different class symbols get the same bytecode-level internal name: doubledelay/Foo$delayedInit$body

{code}
package doubledelay

class Foo extends DelayedInit {
  Console println "Hello, class world!"
  def delayedInit(u: =>Unit) = ???
}
object Foo extends DelayedInit {
  Console println "Hello, object world!"
  def delayedInit(u: =>Unit) = ???
}
{code}

Normally, and I don't mean to normalize, object Foo encodes with an extra dollar.

"Another day, another dollar."

It would be really funky if scalac threw out the almighty dollar and used the euro sign instead.  Or the yuan, but that's pushing the envelope.

Full disclosure: I only noticed this trying to decode it for javap.

Edit: I know there's a lot of hate for both DelayedInit and for name mangling, yet I love it when they come together like this.

