Thank you for the report. In general, we ask that you make a reasonable effort to use other venues (mailing lists, chat rooms, Stack Overflow, etc; see http://www.scala-lang.org/community/) to explore questions you have about the language, and only create an issue on JIRA once you're confident you have identified a bug.

Methods can have multiple parameter lists but function values cannot, so normally bar would eta-expand to the curried type Int => (String => Unit). But when the expected type is Int => Unit, the compiler will eta-expand to that type by value-discarding: the resulting function accepts an Int, passes it to bar, receives a String => Unit, but discards it and returns Unit instead.

It's not actually essential to your question that the type on the right (String => Unit) is itself a function type. The same thing happens in this simpler case:
```
scala> def id(x: Int) = x
id: (x: Int)Int

scala> id: (Int => Unit)
res3: Int => Unit = <function1>
```

This behavior is governed by SLS 6.26.5 (Eta Expansion) and SLS 6.26.1 (Value Conversions). By 6.26.5, id eta-expands to ((z: Int) => id(z)); when this is type-checked with expected type Int=>Unit, id(z) is type-checked with expected type Unit, which triggers value discarding, so compilation succeeds.
