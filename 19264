The documentation for mutable.MultiMap reads as follows:
```scala
/** Assigns the specified `value` to a specified `key`, replacing
   *  the existing value assigned to that `key` if it is equal to
   *  the specified value. Otherwise, simply adds another binding to
   *  the `key`.
   *
   *  @param key    The key to which to bind the new value.
   *  @param value  The value to bind to the key.
   *  @return       A reference to this multimap.
   */
  def addBinding(key: A, value: B): this.type = {
```

However I do not believe that the current value is replaced. Here is evidence:
```scala
import scala.collection.mutable

case class NodeBundle(
    uniqueAddress: String,
    id: String,
    executing: Boolean) {

  def canEqual(other: Any): Boolean =
    other.isInstanceOf[NodeBundle]

  override def equals(other: Any): Boolean = {
    other match {
      case that: NodeBundle =>
        (that canEqual this) && that.uniqueAddress == uniqueAddress && that.id == id
      case _ => false
    }
  }

  override def hashCode: Int =
    41 * (41 + uniqueAddress.hashCode) + id.hashCode
}

val nodeBundlesById = new mutable.HashMap[String, mutable.Set[NodeBundle]] with mutable.MultiMap[String, NodeBundle]

val a = NodeBundle("a", "b", false)
val b = NodeBundle("a", "b", true)

nodeBundlesById.addBinding("1", a)
nodeBundlesById.addBinding("1", b)
}}
```

The end result should be something like:
```scala
res19: <refinement>.type = Map(1 -> Set(NodeBundle(a,b,true)))
```

...but it is:
```scala
res19: <refinement>.type = Map(1 -> Set(NodeBundle(a,b,false)))
```

...so the value is not being replaced.

Looking into the += operator on mutable.HashSet, it looks as though values are not replaced.

So either the doc is wrong, or the behaviour is wrong.
