```scala
trait Foo[T] { def frob(x: T): T } // type class

class DefaultFoo {
  implicit def defaultFoo[T]: Foo[T] = new Foo[T] { def frob(x: T) = {println("got something: "+x); x} }
}

object Foo extends DefaultFoo { // companion object is automatically in scope when looking for implicit of type Foo[T]
  implicit def intFoo: Foo[Int] = new Foo[Int] { def frob(x: Int) = {println("got an int: "+ x); x} }
}

object Strings extends DefaultFoo { // didn't think about this case initially -- added later, must know about default case
  implicit def stringFoo: Foo[String] = new Foo[String] { def frob(x: String) = {println("got a string: "+ x); x} }
}

object TestPrio extends Application {
  import Strings._ //comment this out and the Foo[Int] case works (string one doesn't of course)
  // import Foo._ // uncomment and int case works (shouldn't be necessary)
  
  implicitly[Foo[Boolean]].frob(true) // "got something"
  implicitly[Foo[String]].frob("a")   // "got a string"
  implicitly[Foo[Int]].frob(1)        // expected: "got an int" -- BUG: "got something"
}
```
