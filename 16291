Quite often when using a library, I will be looking at some sample code that uses the library and will want to look up the definition for some function, foo, but I don't know where foo is defined. Perhaps because foo is a pimped method, or it comes from an import like import blah.Bar._, etc.

In these cases, I have no way of finding the definition of foo. I could randomly look through the api docs in the hopes I find it, but that could take forever. My best bet is to download and grep the source... which is pretty lame.

Scaladoc would be an order of magnitude more useful with a search box where I can find **all** the instances of foo defined across all modules in the project, presented as a list of search results like a google search - I can then click on the result to go to the detailed docs on it. I think this could even completely replace the existing search panels. I imagine the "scaladoc" being a single text field centered on the page where you can enter search queries. If you just want to list all the classes, for example, perhaps you say "@class". If you want the class named Foo, you do "@class Foo". If you want the method bar you do "@method bar", etc. If you just want to see all "bar" identifiers, regardless of their type, you just do "bar". Etc. 

Some other ideas - eventually could add type-based queries. So "foo : Int => Int" finds methods and functions with that signature, "@class Foo: Baz" finds classes named Foo that are considered a subtype of Baz, and so on. 

It seems like this is probably all possible with some javascript magic.
