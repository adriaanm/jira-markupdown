Here's a description of the symptom & my investigation.

First off, let's input some test data. Sorry - it doesn't work with a smaller data set. :(

{code}
max@ignominy ~ % scala
Welcome to Scala version 2.10.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_15).
Type in expressions to have them evaluated.
Type :help for more information.

scala> :paste
// Entering paste mode (ctrl-D to finish)

val ns = // !!! SCROLL DOWN --- MORE TEST DATA BELOW !!!
  List(
    1327986000000L,
    1327986000000L,
    1327986000000L,
    1327986000000L,
    1254283200000L,
    1254283200000L,
    1254283200000L,
    1254283200000L,
    1254283200000L,
    1091246400000L,
    1091246400000L,
    1091246400000L,
    1091246400000L,
    1275278400000L,
    1275278400000L,
    1275278400000L,
    1275278400000L,
    1156996800000L,
    1156996800000L,
    1156996800000L,
    1156996800000L,
    1283227200000L,
    1283227200000L,
    1283227200000L,
    1283227200000L,
    1241064000000L,
    1241064000000L,
    1241064000000L,
    1241064000000L,
    1241064000000L,
    1320033600000L,
    1320033600000L,
    1320033600000L,
    1320033600000L,
    1177905600000L,
    1177905600000L,
    1177905600000L,
    1177905600000L,
    1354251600000L,
    1354251600000L,
    1354251600000L,
    1354251600000L,
    1062302400000L,
    1062302400000L,
    1062302400000L,
    1062302400000L,
    1309406400000L,
    1309406400000L,
    1309406400000L,
    1309406400000L,
    1238472000000L,
    1238472000000L,
    1238472000000L,
    1238472000000L,
    1238472000000L,
    1143781200000L,
    1143781200000L,
    1143781200000L,
    1143781200000L,
    1070168400000L,
    1070168400000L,
    1070168400000L,
    1070168400000L,
    1251691200000L,
    1251691200000L,
    1251691200000L,
    1251691200000L,
    1251691200000L,
    1280548800000L,
    1280548800000L,
    1280548800000L,
    1280548800000L,
    1267333200000L,
    1267333200000L,
    1267333200000L,
    1267333200000L,
    1014872400000L,
    1014872400000L,
    1014872400000L,
    1014872400000L,
    1298869200000L,
    1298869200000L,
    1298869200000L,
    1298869200000L,
    1138683600000L,
    1138683600000L,
    1138683600000L,
    1138683600000L,
    1212206400000L,
    1212206400000L,
    1212206400000L,
    1212206400000L,
    1204261200000L,
    1204261200000L,
    1204261200000L,
    1204261200000L,
    1220155200000L,
    1220155200000L,
    1220155200000L,
    1220155200000L,
    1220155200000L,
    1020139200000L,
    1020139200000L,
    1020139200000L,
    1020139200000L,
    1075525200000L,
    1075525200000L,
    1075525200000L,
    1075525200000L,
    1225425600000L,
    1225425600000L,
    1225425600000L,
    1225425600000L,
    1225425600000L,
    1043989200000L,
    1043989200000L,
    1043989200000L,
    1043989200000L,
    1030766400000L,
    1030766400000L,
    1030766400000L,
    1030766400000L,
    1059624000000L,
    1059624000000L,
    1059624000000L,
    1059624000000L,
    1159588800000L,
    1159588800000L,
    1159588800000L,
    1159588800000L,
    1314763200000L,
    1314763200000L,
    1314763200000L,
    1314763200000L,
    1346385600000L,
    1346385600000L,
    1346385600000L,
    1346385600000L,
    1199077200000L,
    1199077200000L,
    1199077200000L,
    1199077200000L,
    1341028800000L,
    1341028800000L,
    1341028800000L,
    1341028800000L,
    1228021200000L,
    1228021200000L,
    1228021200000L,
    1228021200000L,
    1228021200000L,
    1235797200000L,
    1235797200000L,
    1235797200000L,
    1235797200000L,
    1235797200000L,
    1306814400000L,
    1306814400000L,
    1306814400000L,
    1306814400000L,
    1141102800000L,
    1141102800000L,
    1141102800000L,
    1141102800000L,
    1109566800000L,
    1109566800000L,
    1109566800000L,
    1109566800000L,
    1101790800000L,
    1101790800000L,
    1101790800000L,
    1101790800000L,
    1188532800000L,
    1188532800000L,
    1188532800000L,
    1188532800000L,
    1262235600000L,
    1262235600000L,
    1262235600000L,
    1262235600000L,
    1262235600000L,
    1301544000000L,
    1301544000000L,
    1301544000000L,
    1301544000000L,
    1149048000000L,
    1149048000000L,
    1149048000000L,
    1149048000000L,
    1317355200000L,
    1317355200000L,
    1317355200000L,
    1317355200000L,
    1104469200000L,
    1104469200000L,
    1104469200000L,
    1104469200000L,
    1167541200000L,
    1167541200000L,
    1167541200000L,
    1167541200000L,
    1196398800000L,
    1196398800000L,
    1196398800000L,
    1196398800000L,
    1330491600000L,
    1330491600000L,
    1330491600000L,
    1330491600000L,
    1056945600000L,
    1056945600000L,
    1056945600000L,
    1056945600000L,
    1322629200000L,
    1322629200000L,
    1322629200000L,
    1322629200000L,
    1154318400000L,
    1154318400000L,
    1154318400000L,
    1154318400000L,
    1025409600000L,
    1025409600000L,
    1025409600000L,
    1025409600000L,
    1133326800000L,
    1133326800000L,
    1133326800000L,
    1133326800000L,
    1191124800000L,
    1191124800000L,
    1191124800000L,
    1191124800000L,
    1136005200000L,
    1136005200000L,
    1136005200000L,
    1136005200000L,
    1193803200000L,
    1193803200000L,
    1193803200000L,
    1193803200000L,
    1264914000000L,
    1264914000000L,
    1264914000000L,
    1264914000000L,
    1277870400000L,
    1277870400000L,
    1277870400000L,
    1277870400000L,
    1172638800000L,
    1172638800000L,
    1172638800000L,
    1172638800000L,
    1051675200000L,
    1051675200000L,
    1051675200000L,
    1051675200000L,
    1335758400000L,
    1335758400000L,
    1335758400000L,
    1335758400000L,
    1099195200000L,
    1099195200000L,
    1099195200000L,
    1099195200000L,
    1214798400000L,
    1214798400000L,
    1214798400000L,
    1214798400000L,
    1214798400000L,
    1128052800000L,
    1128052800000L,
    1128052800000L,
    1128052800000L,
    1343707200000L,
    1343707200000L,
    1343707200000L,
    1343707200000L,
    1183176000000L,
    1183176000000L,
    1183176000000L,
    1183176000000L,
    1270008000000L,
    1270008000000L,
    1270008000000L,
    1270008000000L,
    1288497600000L,
    1288497600000L,
    1288497600000L,
    1288497600000L,
    1296450000000L,
    1296450000000L,
    1296450000000L,
    1296450000000L,
    1064894400000L,
    1064894400000L,
    1064894400000L,
    1064894400000L,
    1162270800000L,
    1162270800000L,
    1162270800000L,
    1162270800000L,
    1041310800000L,
    1041310800000L,
    1041310800000L,
    1041310800000L,
    1185854400000L,
    1185854400000L,
    1185854400000L,
    1185854400000L,
    1246334400000L,
    1246334400000L,
    1246334400000L,
    1246334400000L,
    1246334400000L,
    1348977600000L,
    1348977600000L,
    1348977600000L,
    1348977600000L,
    1249012800000L,
    1249012800000L,
    1249012800000L,
    1249012800000L,
    1249012800000L,
    1093924800000L,
    1093924800000L,
    1093924800000L,
    1093924800000L,
    1259557200000L,
    1259557200000L,
    1259557200000L,
    1259557200000L,
    1259557200000L,
    1272600000000L,
    1272600000000L,
    1272600000000L,
    1272600000000L,
    1130734800000L,
    1130734800000L,
    1130734800000L,
    1130734800000L,
    1117512000000L,
    1117512000000L,
    1117512000000L,
    1117512000000L,
    1362027600000L,
    1362027600000L,
    1362027600000L,
    1362027600000L,
    1151640000000L,
    1151640000000L,
    1151640000000L,
    1151640000000L,
    1351656000000L,
    1351656000000L,
    1351656000000L,
    1351656000000L,
    1022817600000L,
    1022817600000L,
    1022817600000L,
    1022817600000L,
    1083297600000L,
    1083297600000L,
    1083297600000L,
    1083297600000L,
    1036040400000L,
    1036040400000L,
    1036040400000L,
    1036040400000L,
    1112245200000L,
    1112245200000L,
    1112245200000L,
    1112245200000L,
    1291093200000L,
    1291093200000L,
    1291093200000L,
    1291093200000L,
    1333166400000L,
    1333166400000L,
    1333166400000L,
    1333166400000L,
    1359608400000L,
    1359608400000L,
    1359608400000L,
    1359608400000L,
    1233378000000L,
    1233378000000L,
    1233378000000L,
    1233378000000L,
    1233378000000L,
    1080709200000L,
    1080709200000L,
    1080709200000L,
    1080709200000L,
    1085976000000L,
    1085976000000L,
    1085976000000L,
    1085976000000L,
    1017550800000L,
    1017550800000L,
    1017550800000L,
    1017550800000L,
    1049086800000L,
    1049086800000L,
    1049086800000L,
    1049086800000L,
    1285819200000L,
    1285819200000L,
    1285819200000L,
    1285819200000L,
    1046408400000L,
    1046408400000L,
    1046408400000L,
    1046408400000L,
    1209528000000L,
    1209528000000L,
    1209528000000L,
    1209528000000L,
    1054353600000L,
    1054353600000L,
    1054353600000L,
    1054353600000L,
    1170219600000L,
    1170219600000L,
    1170219600000L,
    1170219600000L,
    1201755600000L,
    1201755600000L,
    1201755600000L,
    1201755600000L,
    1293771600000L,
    1293771600000L,
    1293771600000L,
    1293771600000L,
    1312084800000L,
    1312084800000L,
    1312084800000L,
    1312084800000L,
    1120104000000L,
    1120104000000L,
    1120104000000L,
    1120104000000L,
    1243742400000L,
    1243742400000L,
    1243742400000L,
    1243742400000L,
    1243742400000L,
    1256961600000L,
    1256961600000L)

// Exiting paste mode, now interpreting.

ns: List[Long] = List(1327986000000, 1327986000000, 1327986000000, 1327986000000, 1254283200000, 1254283200000, 1254283200000, 1254283200000, 1254283200000, 1091246400000, 1091246400000, 1091246400000, 1091246400000, 1275278400000, 1275278400000, 1275278400000, 1275278400000, 1156996800000, 1156996800000, 1156996800000, 1156996800000, 1283227200000, 1283227200000, 1283227200000, 1283227200000, 1241064000000, 1241064000000, 1241064000000, 1241064000000, 1241064000000, 1320033600000, 1320033600000, 1320033600000, 1320033600000, 1177905600000, 1177905600000, 1177905600000, 1177905600000, 1354251600000, 1354251600000, 1354251600000, 1354251600000, 1062302400000, 1062302400000, 1062302400000, 1062302400000, 1309406400000, 1309406400000, 1309406400000, 1309406400000, 1238472000000, 1238472000...
{code}

Now I try to sort the list of longs provided above:

{code}
scala> ns.sortWith(_ >= _)
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeHi(TimSort.java:868)
	at java.util.TimSort.mergeAt(TimSort.java:485)
	at java.util.TimSort.mergeForceCollapse(TimSort.java:426)
	at java.util.TimSort.sort(TimSort.java:223)
	at java.util.TimSort.sort(TimSort.java:173)
	at java.util.Arrays.sort(Arrays.java:659)
	at scala.collection.SeqLike$class.sorted(SeqLike.scala:615)
	at scala.collection.AbstractSeq.sorted(Seq.scala:40)
	at scala.collection.SeqLike$class.sortWith(SeqLike.scala:572)
	at scala.collection.AbstractSeq.sortWith(Seq.scala:40)
	at .<init>(<console>:9)
	at .<clinit>(<console>)
	at .<init>(<console>:7)
	at .<clinit>(<console>)
	at $print(<console>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:734)
	at scala.tools.nsc.interpreter.IMain$Request.loadAndRun(IMain.scala:983)
	at scala.tools.nsc.interpreter.IMain.loadAndRunReq$1(IMain.scala:573)
	at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:604)
	at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:568)
	at scala.tools.nsc.interpreter.ILoop.reallyInterpret$1(ILoop.scala:745)
	at scala.tools.nsc.interpreter.ILoop.interpretStartingWith(ILoop.scala:790)
	at scala.tools.nsc.interpreter.ILoop.command(ILoop.scala:702)
	at scala.tools.nsc.interpreter.ILoop.processLine$1(ILoop.scala:566)
	at scala.tools.nsc.interpreter.ILoop.innerLoop$1(ILoop.scala:573)
	at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:576)
	at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply$mcZ$sp(ILoop.scala:867)
	at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply(ILoop.scala:822)
	at scala.tools.nsc.interpreter.ILoop$$anonfun$process$1.apply(ILoop.scala:822)
	at scala.tools.nsc.util.ScalaClassLoader$.savingContextLoader(ScalaClassLoader.scala:135)
	at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:822)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:83)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:96)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:105)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)


scala> 
{code}

Further investigation leads me to {{SeqLike.sortWith}}, given here for reference (as of 2.10.1):

{code}
def sortWith(lt: (A, A) => Boolean): Repr = sorted(Ordering fromLessThan lt)
{code}

So let's have a look at the ordering:

{code}
scala> val ordering = Ordering.fromLessThan((a: Long, b: Long) => a >= b)
ordering: scala.math.Ordering[Long] = scala.math.Ordering$$anon$9@17c1fbff

scala> val lessThan = ordering.compare(1, 2)
lessThan: Int = 1

scala> val theSame = ordering.compare(1, 1)
theSame: Int = -1

scala> val greaterThan = ordering.compare(2, 1)
greaterThan: Int = -1

scala> 
{code}

You can see here that the {{(1, 2)}} and {{(2, 1)}} cases work as you'd expect: the ordering signals that unequal values should be swapped.

The {{ordering.compare(1, 1)}} call is problematic. It returns -1 even though the two values are exactly the same. Turns out that {{Ordering.fromLessThan}} falls victim to an internal implementation detail that makes it impossible to return 0 for values that are equal.

Why is this important? Well, in JDK 6 the above list of longs would have sorted just fine. However, in JDK 7 the implementation details of {{java.util.Arrays.sort}} must have changed causing it to expect the provided {{Comparator}} to adhere more strictly to the "general contract". See http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#sort(T[], java.util.Comparator) - specifically:

"This sort is guaranteed to be stable: equal elements will not be reordered as a result of the sort."

If {{SeqLike.sortWith}} ultimately uses {{java.util.Arrays.sort}} to do the heavy lifting of sorting, then the ordering generated by {{Ordering.fromLessThan}} *must be stable but isn't* according to my demonstration above.
