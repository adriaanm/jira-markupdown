If you're in the market for workarounds, writing hconsShape as follows makes the problem disappear for me. I doubled the number of ::s and it still compiles successfully each time.
```scala
implicit def hconsShape[Level <: ShapeLevel, X1 <: Level, X2 <: Level, M1, M2 <: HList, U1, U2 <: HList, P1, P2 <: HList]
  (implicit s1: Shape[X1, M1, U1, P1], s2: HListShape[X2, M2, U2, P2]) =
    new HListShape[Level, M1 :: M2, U1 :: U2, P1 :: P2](s1 +: s2.shapes)
```
```
for i in {1..10}; do time scalac3 -d /tmp a.scala ; done
5.661 real, 10.450 user, 0.195 sys
5.671 real, 10.395 user, 0.197 sys
5.638 real, 10.366 user, 0.191 sys
5.655 real, 10.386 user, 0.196 sys
5.744 real, 10.547 user, 0.192 sys
5.706 real, 10.555 user, 0.193 sys
5.781 real, 10.750 user, 0.209 sys
5.766 real, 10.536 user, 0.216 sys
5.778 real, 10.678 user, 0.204 sys
5.779 real, 10.638 user, 0.196 sys
```
That's with
```scala
  trait B extends A[
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: Int :: Int :: Int ::
    Int :: Int :: HNil ] {
```
