to illustrate the complexity, what should we do in this case:
compile with scalac:
```scala
class Monad[X]
```

compile with javac:
```scala
public class EvilRaw {
  public Monad createMonad() {return null;}
}
```

then compile with scalac:
```scala
class GoodScala extends EvilRaw {
  override def createMonad: Monad[_] = error("foo")
}
```

this should compile, right? since raw types that occur in java sigs are converted to existential types
