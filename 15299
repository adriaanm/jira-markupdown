Futures.future leaves behind messages in the calling actor's message queue.
This happens both in the REPL and with scalac encountering the code somewhere inside an arbitrary class. 

Entering
```scala
import scala.actors._, scala.actors.Actor._

actor {
  val ft = Futures.future { 42 }
  println("result: " + ft())
  receive { case msg => println("unexpected: " + msg) }
}
```

into the REPL results in
```scala
result: 42
unexpected: !(scala.actors.Channel@29cd761a,42)
```


This becomes a critical problem if an actor uses Futures.future inside it's event loop:
```scala
import scala.actors._, scala.actors.Actor._

val a = actor {
  loop { react {
    case i:Int =>
      val result = Futures.future {2*i}
      println("result: " + result())
    case msg => println("unexpected: " + msg)
  } }
}

a ! 5
a ! 5
```

results in
```scala
result: 10
unexpected: !(scala.actors.Channel@4daa34dc,10)
result: 10
unexpected: !(scala.actors.Channel@391a74ef,10)
```

Futures.alarm is, of course, equally affected.


System information:
```scala
$$ scala
Welcome to Scala version 2.8.0.r21862-b20100508020139 (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_20).

$$ java -version
java version "1.6.0_20"
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) 64-Bit Server VM (build 16.3-b01, mixed mode)

$$ uname -a
Linux host 2.6.31-21-generic SI-59-Ubuntu SMP Wed Mar 24 07:28:27 UTC 2010 x86_64 GNU/Linux

$$ lsb_release -d -s
Ubuntu 9.10
```
