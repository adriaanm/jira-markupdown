(Summary is long and possibly confusing, sorry!)

I've looked over the spec and I can't see why the compiler shouldn't find the type of I in stringer:
{code}

scala> trait F[I] { def get : I }
defined trait F

scala> implicit def stringer[Fx<:F[I],I](a: Fx) = a.get.toString;
stringer: [Fx <: F[I],I](a: Fx)java.lang.String

scala> class FI extends F[Int] { def get = 42 };
defined class FI

scala> implicit def stringer[Fx<:F[I],I](a: Fx) = a.get.toString;
stringer: [Fx <: F[I],I](a: Fx)java.lang.String

scala> {new FI} toLowerCase
<console>:18: error: value toLowerCase is not a member of FI
      {new FI} toLowerCase

scala> stringer{new FI} toLowerCase
<console>:18: error: inferred type arguments [FI,Nothing] do not
conform to method stringer's type parameter bounds [Fx <: F[I],I]
{code}
