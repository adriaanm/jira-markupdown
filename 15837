{code}
scala> def M[N[O[_]]] = ()  
M: [N[O[_]]]Unit

scala> type A[_] = Any      
defined type alias A

scala> type B[_[_]] = Any   
defined type alias B

scala> type C[_[_[_]]] = Any
defined type alias C

scala> M[Any] // okay, Any is kind overloaded.

scala> M[AnyRef] // okay, (AnyRef :: *) not kind-conformant to (N :: * -> * -> *)
<console>:7: error: AnyRef takes no type parameters, expected: one
       M[AnyRef]
         ^
<console>:7: error: kinds of the type arguments (<error>) do not conform to the expected kinds of the type parameters (type N).
<error>'s type parameters do not match type N's expected parameters: <none> has no type parameters, but type N has one
       M[AnyRef]
        ^

scala> M[A] // okay, (A :: (* -> *) not kind-conformant to (N :: * -> * -> *)
<console>:8: error: kinds of the type arguments (A) do not conform to the expected kinds of the type parameters (type N).
A's type parameters do not match type N's expected parameters: type _ has no type parameters, but type O has one
       M[A]
        ^

scala> M[B] // okay, (B :: (* -> * -> *) is kind-conformant to (N :: * -> * -> *)

scala> M[C] // wrong, (C :: (* -> * -> * -> *) not kind-conformant to (N :: * -> * -> *)
{code} 

Expected a compile error for `M[C]`


Tested against Scala: 2.8.1
