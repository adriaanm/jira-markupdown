This is limited neither to Bytes nor bitwise operators. In fact, all non-simple assignment operators are broken for Byte, Char, Short.
The reason is that in Java (and Scala adopts this) arithmetic (including bitwise) expressions are always of type int, unless at least one of their operands is of type long (then they are of type long). 
This leads to some weird behaviors:
{code:java}
byte x = 0;
byte y = 1;
byte z = x + y; // error: cannot convert from int to byte
{code}
Here, {{x + y}} is of type {{int}}, even though both are of type {{byte}}. The solution is to explicitly convert them to {{byte}}:
{code:java}
byte z = (byte)(x + y);
{code}
Things are different for the non-simple assignment operators ({{+=}} etc.): Even though one would think that {{x += y}} is equivalent to {{x = x + y}}, for the above reason this is not true: if {{x}} is of type {{T}}, then {{x += y}} is in fact equivalent to {{x = (T)(x + y)}}. This does lead to some unexpected results:
{code:java}
x += y; // OK
x += 1000000000000L; // also OK!
{code}
So Scala adapts all these weird behaviors from Java, but omits the explicit downcast in the non-simple assignment operators...
