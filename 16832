Class `Enumeration` defines method `values}] which returns the values of a enumeration as a set.
This method computes this set lazily and is defined as follows:

{code}
/** The cache listing all values of this enumeration. */
@transient private var vset: ValueSet = null
@transient private var vsetDefined = false

def values: ValueSet = {
  if (!vsetDefined) {
    vset = new ValueSet(immutable.SortedSet.empty[Int] ++ (vmap.values map (_.id)))
    vsetDefined = true
  }
  vset
}
{code}


I claim, that the field {{vsetDefined` has to be declared `@volatile`, otherwise a thread invoking `values` might see `vsetDefined` as `true`, but may not see the actual value in field `vset`, i.e. may see `vset` still to be `null`. If `vsetDefined` were declared `@volatile`, a happens-before relation would be established between writing field `vset` and reading it.

