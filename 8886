Things might work out better (at least, let you provide the type constructor explicitly) with something like:

{code}
trait Processes {
  type F[_, _]
  trait Process[A]
  case class Halt[A]() extends Process[A]
  case class Emit[A](head: A, tail: Process[A]) extends Process[A]
  case class Await[X,Y,A](fn: F[X,Y], arg: X, recv: Y => Process[A]) extends Process[A]
}
{code}
