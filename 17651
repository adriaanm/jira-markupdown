Macro definition:

{code:lang=java}
import language.experimental.macros
import scala.reflect.macros.Context

object Demo {
  def id[T](a: T): T = macro idImpl[T]

  def idImpl[T: c.WeakTypeTag](c: Context)(a: c.Expr[T]): c.Expr[T] = a
}
```scala

Macro usage:

{code:lang=java}
object Usage {
   def main(args: Array[String]) {
      val s = Demo id ()
      println(s)
   }
}
```

This fails to compile with the error:
```scala
Use.scala:3: macros application do not support named and/or default arguments
      val s = Demo id ()
                   ^
```

If `id` is not a macro, this compiles and prints `()` as expected.  Workarounds include not using infix or a right hand side of `(())` or {}.
