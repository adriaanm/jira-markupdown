Maybe 3 different bugs in here? You decide.

1) No unchecked warnings.
2) See contents of Test3.
3) ClassCastException for Test1.
```scala
trait Outer[T] {
  sealed trait Inner
  case class C1(val x: T) extends Inner
  case class C2(val x: T) extends Inner
}

object Test1 extends Outer[Int] {
  def f(x: Any) = println(x match {
    case C1(x) => true
    case _     => false
  })

  def main(args: Array[String]): Unit = {
    f(Test1.C1(5))
    f(Test2.C1("abc"))
  }
}

object Test2 extends Outer[String] { }

object Test3 {
  type SomeInner = Outer[X]#Inner forSome { type X }

  // Clearly Test1.C1(5) is an instance of SomeInner, as seen here:
  var x: SomeInner = _
  x = Test1.C1(5)

  // And yet,
  //
  // def f0(x: SomeInner) = x match { case Test1.C1(_) => }
  //
  // ./a.scala:35: error: constructor cannot be instantiated to expected type;
  //  found   : Test1.C1
  //  required: Outer[X]#Inner where type X
  //   def f0(x: SomeInner) = x match { case Test1.C1(_) => }
  //
  // Whereas this is no problem:
  def f1(x: Any) = x match { case Test1.C1(_) => }
}

/**

% rcscalac -unchecked ./a.scala
% rcscala Test1
true
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer

**/
```
