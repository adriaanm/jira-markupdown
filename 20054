I have type-parameterized objects with implicits inside them. I can import those implicits to easily access them, but this fails if I want to work with two such objects at the same time. Here's a fairly minimal example.

{code}
class Typed[T]

class Holder[T](implicit val t: Typed[T])

def useTwo[A, B](a: Holder[A], b: Holder[B]) = {
  import a.t
  import b.t
  println(implicitly[Typed[A]])
} 
{code}

Fails with:

{noformat}
error: could not find implicit value for parameter e: Typed[A]
         println(implicitly[Typed[A]])
                           ^
{noformat}

The bug is that importing an implicit variable of type {{Typed\[B\]}} makes the implicit variable of type {{Typed\[A\]}} invisible. In fact both become invisible in this case.

If I remove {{import b.t}} it works. Also I can copy the implicits manually into scope instead of {{import}}ing them:

{code}
  implicit val ta = a.t
  implicit val tb = b.t
{code}

So it's not like Scala cannot handle implicit variables existing at the same time for {{Typed\[A\]}} and {{Typed\[B\]}}. Something is wrong with the imports.

In my practical case neither of these workarounds is applicable, because I want to import multiple implicits from both objects and use those at the same time.
