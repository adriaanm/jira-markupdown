Two branches to consider. The first is the one Miguel pointed to
```scala
} else if (isPrimitiveValueClass(qual.tpe.typeSymbol)) {
   // Rewrite 5.getClass to ScalaRunTime.anyValClass(5)
   global.typer.typed(gen.mkRuntimeCall(nme.anyValClass, List(qual, typer.resolveClassTag(tree.pos, qual.tpe.widen))))
}
```

If we go into that one (by hacking in a bit of force) the code that gets generated is very strange and brittle
```
3:	getstatic	#24; //Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
   6:	getstatic	#30; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   9:	getstatic	#35; //Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
   12:	ldc	#4; //class java/lang/Object
   14:	invokevirtual	#39; //Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
   17:	invokevirtual	#43; //Method scala/runtime/ScalaRunTime$.anyValClass:(Ljava/lang/Object;Lscala/reflect/ClassTag;)Ljava/lang/Class;
```

The result is "java.lang.Object"

If instead we go into the next branch
```scala
} else if (fn.symbol == AnyVal_getClass) {
  tree setSymbol Object_getClass
```

Then what we get is totally reasonable
```
   3:	getstatic	#25; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   6:	invokevirtual	#29; //Method java/lang/Object.getClass:()Ljava/lang/Class;
```

And the result is class scala.runtime.BoxedUnit.  Which is nice because that's exactly the same answer as when we do [Unit with AnyRef] instad of [AnyRef with Unit].

What we're currently doing, though, is falling all the way to the default branch and that's getting us into trouble
```scala
} else {
  tree
}
```
