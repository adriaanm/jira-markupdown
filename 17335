Here's a pretty simple program:

{code}
class Bar[@specialized(Int) Q](q:Q) {
  def qux[@specialized(Int) Z](f:Q => Z) = new Bar(f(q))
}
{code}

When compiled with -Ylog:specialize -Ydebug it generates different bytecode than what would otherwise be created. Here is a diff of the Bar$mcI$sp bytecode I generated using "javap -c 'Bar$mcI$sp'":

{code}
23a24,41
> public Bar qux$mIc$sp(scala.Function1);
>   Code:
>    0: aload_0
>    1: aload_1
>    2: invokevirtual   #39; //Method qux$mIcI$sp:(Lscala/Function1;)LBar;>    5: areturn
> 
> public Bar qux$mIcI$sp(scala.Function1);
>   Code:
>    0: new     #2; //class Bar$mcI$sp
>    3: dup
>    4: aload_1
>    5: aload_0
>    6: getfield        #19; //Field q$mcI$sp:I
>    9: invokeinterface #43,  2; //InterfaceMethod scala/Function1.apply$mcII$sp:(I)I
>    14:        invokespecial   #46; //Method "<init>":(I)V
>    17:        areturn
>
{code}

As you can see, two extra methods are being created.

I think that scalac should be generating these methods in all cases, so as you can imagine I'm quite interested in why they only get generated when doing debugging!

I will comment on this ticket as I learn more.
