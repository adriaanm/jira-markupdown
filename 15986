Two classes and their implicits from Predef:
{code}
final class ArrowAssoc[A](val x: A) {
  @inline def -> [B](y: B): Tuple2[A, B] = Tuple2(x, y)
  def â†’[B](y: B): Tuple2[A, B] = ->(y)
}
implicit def any2ArrowAssoc[A](x: A): ArrowAssoc[A] = new ArrowAssoc(x)

final class Ensuring[A](val x: A) {
  def ensuring(cond: Boolean): A = { assert(cond); x }
  def ensuring(cond: Boolean, msg: => Any): A = { assert(cond, msg); x }
  def ensuring(cond: A => Boolean): A = { assert(cond(x)); x }
  def ensuring(cond: A => Boolean, msg: => Any): A = { assert(cond(x), msg); x }
}
implicit def any2Ensuring[A](x: A): Ensuring[A] = new Ensuring(x)
{code}
There are no comments explaining why these classes have public vals called "x", but if I recall correctly it is because a non-public parameter keeps ArrowAssoc from being inlined.  Since there are implicits from Any to each of these classes, we are introducing a member named "x" to every object in the world.  A couple of them, actually (which we can probably agree is better than one because it creates ambiguity.)

This is not that big a deal but it's just bad practice if it can be avoided.  Simple answer which largely eliminates the issue: rather than "x", such fields should be named something users are forbidden by specification from referencing, e.g. x$$.
