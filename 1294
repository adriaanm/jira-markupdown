I don't see any reasonable way to make this work in the current compiler implementation.

The type completer for `c` types the RHS:
```scala
 { new $anon { def moduleDemands(): Module = owner :: a :: Nil }; new $anon }
```

We don't have a mechanism to do this that defers type checking the RHS of `moduleDemands`.

But the workaround is pretty straight forward: annotate the type of `b` or `c`:
```scala
abstract class Module {
  def moduleDemands(): List[Module]
}


object Test {
  new Module { owner =>
    def moduleDemands() = Nil

    abstract class TestModule extends Module {}

    val a = new TestModule {
      def moduleDemands(): List[Module] = Nil
    }

    val b: TestModule = new TestModule {
      def moduleDemands(): List[Module] = owner :: c :: Nil // error: recursive value x$$1 needs type
    }

    val c: TestModule = new TestModule {
      def moduleDemands(): List[Module] = owner :: a :: Nil // error: recursive value c needs type
    }
  }
}
```
