{code:title=example code}
import scala.concurrent._
import ExecutionContext.Implicits.global

Future.traverse(1 to    3)( Future.successful ) // compiles
Future.traverse(1 until 3)( Future.successful ) // compile error
```scala

{code:title=error message}
error: Cannot construct a collection of type scala.collection.AbstractSeq[Int] 
with elements of type Int based on a collection of type scala.collection.AbstractSeq[Int].
   Future.traverse(1 until 3)( Future.successful )
                             ^
```

Is there a problem with generic.CanBuildFrom and Range ?

{code:title=example working with Range and Inclusive}
def traverse[A,M[_]](list: M[A]) = 1

traverse(1 to    3)  // compiles
traverse(1 until 3)  // compiles!
```scala

Now the same example, but with generic.CanBuildFrom
(copied out off the source of scala.concurrent.Future.traverse)

{code:title=same example, CanBuildFrom added}
import scala.collection.generic.CanBuildFrom

def traverse[A,M[_]](list: M[A])( implicit cbf: CanBuildFrom[M[A],A,M[A]] ) = 1

traverse(1 to    3)  // compiles
traverse(1 until 3)  // does not compile!

// needs a little help
traverse[Int,Seq](1 until 3) // does compile!

// the other way round
val incl: Range = 1 to 3
traverse( incl ) // does not compile!
```
