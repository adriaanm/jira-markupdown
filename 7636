You are essentially trying to call:
```scala
scala> either.right.map(x => x).map(x => x)
<console>:9: error: value map is not a member of Either[Int,Char] with Product with Serializable
              either.right.map(x => x).map(x => x)
                                       ^
```

But `Either#RightProjection#map` returns an `Either`, which doesn't have a `map` method.

You can enrich `Either` to have a right-biased set of `map/flatMap/foreach` methods, along these lines (I'm using Scala 2.10 implicit classes for brevity, but the same is possible in 2.9.x with a class and an implicit conversion):
```scala
scala> implicit class RightBiasedEither[A, B](val e: Either[A, B]) extends AnyVal {
     |   def foreach[U](f: B => U): Unit = e.right.foreach(f)
     |   def map[C](f: B => C): Either[A, C] = e.right.map(f)
     |   def flatMap[C](f: B => Either[A, C]) = e.right.flatMap(f)  
     | }
defined class RightBiasedEither

scala> 

scala> def f(c:Char):String = "ha"
f: (c: Char)String

scala> def either:Either[Int,Char] = Right('r')
either: Either[Int,Char]

scala>   for { 
     |     c <- either
     |     s = f(c)
     |   } yield s
res0: Either[Int,String] = Right(ha)
```
