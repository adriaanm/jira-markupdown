The warning seems to overstretch, only the first should warn below:
```
scala> object LeftOrRight {
     |   def unapply[A](value: Either[A, A]): Option[A] = value match {
     |     case scala.Left(x) => Some(x)
     |     case scala.Right(x) => Some(x)
     |   }
     | }
defined module LeftOrRight

scala> (Left((0, 0)): Either[(Int, Int), (Int, Int)]) match { case LeftOrRight(a) => a  }
<console>:9: warning: extractor pattern binds a single value to a Product2 of type (Int, Int)
              (Left((0, 0)): Either[(Int, Int), (Int, Int)]) match { case LeftOrRight(a) => a  }
                                                                          ^
res0: (Int, Int) = (0,0)

scala> (Left((0, 0)): Either[(Int, Int), (Int, Int)]) match { case LeftOrRight((a, b)) => a  }
<console>:9: warning: extractor pattern binds a single value to a Product2 of type (Int, Int)
              (Left((0, 0)): Either[(Int, Int), (Int, Int)]) match { case LeftOrRight((a, b)) => a  }
                                                                          ^
res1: Int = 0
```
