The following code fails with RC5 (it compiles with RC3). The code compiles if some of the cases are removed. For instance if the first two cases comparing JNothing are removed the code compiles, or if the 9th case is removed the code compiles again.
```scala
object Test {
  sealed abstract class JValue {
    def ++(other: JValue) = {
      def append(value1: JValue, value2: JValue): JValue = (value1, value2) match {
	case (JNothing, x) => x
	case (x, JNothing) => x
	case (JObject(xs), x: JField) => JObject(xs ::: List(x))
	case (x: JField, JObject(xs)) => JObject(x :: xs)
	case (JArray(xs), JArray(ys)) => JArray(xs ::: ys)
	case (JArray(xs), v: JValue) => JArray(xs ::: List(v))
	case (v: JValue, JArray(xs)) => JArray(v :: xs)
	case (f1: JField, f2: JField) => JObject(f1 :: f2 :: Nil)
	case (JField(n, v1), v2: JValue) => JField(n, append(v1, v2))
	case (x, y) => JArray(x :: y :: Nil)
      }
      append(this, other)
    }
  }

  case object JNothing extends JValue
  case object JNull extends JValue
  case class JString(s: String) extends JValue
  case class JDouble(num: Double) extends JValue
  case class JInt(num: BigInt) extends JValue
  case class JBool(value: Boolean) extends JValue
  case class JField(name: String, value: JValue) extends JValue
  case class JObject(obj: List[JField]) extends JValue 
  case class JArray(arr: List[JValue]) extends JValue
}
```
```scala
Exception in thread "main" java.lang.IndexOutOfBoundsException
	at scala.collection.LinearSeqOptimized$$class.apply(LinearSeqOptimized.scala:53)
	at scala.collection.immutable.List.apply(List.scala:45)
	at scala.tools.nsc.matching.Matrix$$MatrixContext$$PatternVarGroup.apply(Matrix.scala:141)
	at scala.tools.nsc.matching.ParallelMatching$$MatchMatrix$$$$anonfun$$1$$$$anonfun$$apply$$1.apply(ParallelMatching.scala:75)
	at scala.tools.nsc.matching.ParallelMatching$$MatchMatrix$$$$anonfun$$1$$$$anonfun$$apply$$1.apply(ParallelMatching.scala:75)
	at scala.Function2$$$$anonfun$$tupled$$1.apply(Function2.scala:53)
	at scala.Function2$$$$anonfun$$tupled$$1.apply(Function2.scala:52)
	at scala.collection.TraversableLike$$$$anonfun$$map$$1.apply(TraversableLike.scala:206)
	at scala.collection.TraversableLike$$$$anonfun$$map$$1.apply(TraversableLike.scala:206)
	at scala.collection.LinearSeqOptimized$$class.foreach(LinearSeqOptimized.scala:61)
```
