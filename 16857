I'm not even 100% sure this is a bug, but I couldn't find anything in the spec that justifies this (consistent, but surprising) behavior:
```scala
object Sandbox {
  class Foo
  implicit val foo = new Foo

  class Base(implicit foo: Foo)

  class Okay extends Base
  class AlsoOkay extends Base()
  class Sad extends Base(new Foo) // compiler error
  class Workaround extends Base()(new Foo)

  val okay = new Base
  val alsoOkay = new Base()
  val sad = new Base(new Foo) // compiler error
  val workaround = new Base()(new Foo)
}
```

The rules here seem to be:
- `class Base(implicit ...)` is really `class Base()(implicit ...)` (i.e., unlike methods, there is no such thing as a class with just an implicit argument list, and attempting to write one results in a class with one empty argument list and one implicit argument list).
- Per the spec, `new C` (with no argument lists at all) is always shorthand for `new C()`, even if there is an extra implicit argument list at the end of C. (I can't find justification for the latter half of this statement in the spec, although it seems common-sensical to me.)
- The intersection of the previous two rules means that if you want to provide an explicit argument to an implicit parameter, you must supply the empty argument list as well (because now you no longer have just `new C`, so it won't expand it out).

So again, since I can't find all these rules in the spec I'm not sure if this is a bug or a feature request, but I think the behavior I would find least surprising (and most consistent with how methods behave) would be:
```scala
object Sandbox {
  class Foo
  implicit val foo = new Foo

  class Base(implicit foo: Foo) // actually defines a class with one parameter list

  val okay = new Base
  val notOkay = new Base() // error: not enough arguments
  val happy = new Base(new Foo)
  val justWeird = new Base()(new Foo) // error: not enough arguments
}
```
