Here is my non-recursive implementation of SetLike.subsets:
```scala
class SetX[A](self: Set[A]) {
  //def subsets(len: Int): Iterator[Repr] = new Iterator[Repr] {
  def subsets(len: Int): Iterator[Set[A]] = new Iterator[Set[A]] {
    require(len>=0&&len<=self.size, "The size of subset is illegal!")
    
    val siz = self.size
    val elms = self.toIndexedSeq
    val idxs = Array.range(0,len+1)
    idxs(len) = siz
    
    var _hasNext = true
    
    override def hasNext = _hasNext
    
    //override def next: Repr = {
    override def next: Set[A] = {
      if(!hasNext) Iterator.empty.next
      val res = idxs.view(0,len).map{ elms(_) }.toSet
      /*
        val sb = self.newBuilder
        idxs.view(0,len).foreach{ idx => sb += elms(idx) }
        val res = sb.result
      */
      
      var i = len - 1
      while(i >= 0 && idxs(i) == idxs(i+1)-1) i -= 1
      if(i < 0) _hasNext = false
      else {
        idxs(i) += 1
        for(j <- (i+1) until len) idxs(j) = idxs(j-1) + 1
      }
      res
    }
  }
  
  //def subsets: Iterator[Repr] = new Iterator[Repr] {
  def subsets: Iterator[Set[A]] = new Iterator[Set[A]] {
    var len = 0
    var itr = subsets(len)
    
    override def hasNext = itr.hasNext || len < self.size
    
    override def next: Set[A] = { 
      if(itr.hasNext) itr.next 
      else if(len < self.size) {
        len += 1
        itr = subsets(len)
        itr.next
      }
      else Iterator.empty.next
    }
  }
}

implicit def set2x[A](set: Set[A]): SetX[A] = new SetX(set)
```

usecases:
```scala
scala> Set(1,2,3,4).subsets.toList
res0: List[Set[Int]] = List(Set(), Set(1), Set(2), Set(3), Set(4), Set(1, 2), Set(1, 3),
 Set(1, 4), Set(2, 3), Set(2, 4), Set(3, 4), Set(1, 2, 3), Set(1, 2, 4), Set(1, 3, 4), 
Set(2, 3, 4), Set(1, 2, 3, 4))

scala> res0.size
res1: Int = 16

scala> "ABCDE".toSet.subsets(2)
res2: Iterator[Set[Char]] = non-empty iterator

scala> "ABCDE".toSet.subsets(2).toList
res3: List[Set[Char]] = List(Set(E, A), Set(E, B), Set(E, C), Set(E, D), Set(A, B), 
Set(A, C), Set(A, D), Set(B, C), Set(B, D), Set(C, D))
```
