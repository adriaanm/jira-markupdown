Daniel,

I've stated twice now that I'm aware there would be changes in behavior if the implicit anchors were removed.  I think we can say we're in violent agreement on that point.

The problem I'm bumping into is construction order.  Regex initializes `pattern` during construction.  I don't see a way to make Regex abstract or a trait (*really* changing existing behavior) which argues that RegexUnAnchored be a subclass which is then returned as the super type with appropriate `pattern` initialization after construction.  My understanding of how to do that is either to use an abstract trait with initialization at the class declaration level [i.e.,
```
class RegexUA extends { // init here } with Regex with ...
```
] which is out because Regex as an abstract trait would break 
```
new Regex("(x)")
```
(and who knows what else) or to use a lazy val to initialize after full class construction.  My understanding of lazy is based on the single Stack Overflow question.  If it's correct then the initialization of a lazy is based on a volatile but subsequent access is a simple if() clause.  That seems pretty light-weight to me given Scala and Java's hint to not recompile Patterns in tight loops but I don't have enough experience in this area to argue the point.

So what am I left with?  I have no idea since the two ways documented for getting around order of initialization problems are off the table.  I get the feeling I'm frustrating you.  It certainly isn't my intent.  I recognize and appreciate that you don't have to be offering your advice.  I've done development long enough to know that if someone makes suggestions to you when submitting fly-by RFEs you listen to them.  (I have also read your blog entries, SO answers, and other scala comments so have some idea that besides offering advice you also know what you are talking about when you do.) However, ... I'll just leave it at however.

I have an internal solution that works.  If anyone bumps into this RFE it's simple to subclass Regex with an overridden unapplySeq which does not implicitly anchor.  A case class and an implicit def to turn strings into this class using a method (having done perl in a past life I use .qr) is then straightforward. 
