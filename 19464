For inner classes extending TraversableLike, stringPrefix returns the name of the surrounding object or class.
```scala
object Foo {
  class Bar extends IndexedSeq[Any] {
    def length = 0
    def apply(n: Int) = ???
  }
}
new Foo.Bar().stringPrefix // returns "Foo"
```

The expected output would be "Bar" (which you get if Bar is a member of a package) as stated in the docs of TraversableLike:

bq. By default the string prefix is the simple name of the collection class traversable collection.

"Foo.Bar" or "IndexedSeq" would also be reasonable results, but "Foo" is obviously wrong.

Also of note: If you paste the code into the REPL, the actual result is the empty string (because the code is defined in another surrounding object, I guess).

This issue is not specific to the 2.11.4 release, but is present in previous versions, too.
