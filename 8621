Compare https://github.com/scala/scala/commit/e6b4204604
```scala
         case Select(qual, name) =>
-          /** return closest enclosing method, unless shadowed by an enclosing class;
-           *  no use of closures here in the interest of speed.
-           */
-          def closestEnclMethod(from: Symbol): Symbol =
-            if (from.isSourceMethod) from
-            else if (from.isClass) NoSymbol
-            else closestEnclMethod(from.owner)
-
-          if (currentClass != sym.owner ||
-              (closestEnclMethod(currentOwner) hasAnnotation ScalaInlineClass))
+          if (currentClass != sym.owner)
             sym.makeNotPrivate(sym.owner)
```

With https://github.com/scala/scala/commit/5d4e4e2 (the point of the regression, and a seeming half-reversion of e6b4204604).
```scala
-          if (currentClass != sym.owner)
+          // make not private symbol acessed from inner classes, as well as
+          // symbols accessed from @inline methods
+          if (currentClass != sym.owner ||
+              (sym.owner.enclMethod hasAnnotation ScalaInlineClass))
```

Martin [reasoned](https://github.com/scala/scala/pull/1121#issuecomment-7700454):
```
@magarciaEPFL: I convinced myself otherwise. The only difference is if we have an @inline method that has a nested
class
...
But in that case the whole discussion is moot anyway because the class does not escape the method. So we can live with the standard @enclMethod code and do not need a new concept.

Unless there are other comments I'd vote on merging this now.
```

Later, the inliner was changed:

https://github.com/scala/scala/commit/f71dca29
```
Made inliner work for @inline methods that access private variables.
We need to disable the previous "potentiallyPublished" logic for this because that one disables inlining as long as the inlined method has a reference to a field with a $. But making fields public in @inline method will generate fields with $. We need to complement this with reverting the previous publication logic completely. I leave that to Vlad or Miguel.
```

So we've got the changes to `SuperAccessors`, `ExplicitOuter`, and `Inliners`. It all seems like loose ends in need of a sturdy knot.
