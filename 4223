FWIW, I thought about it some more and figured we just shouldn't generate manifests that require referring to an existentially bound value -- please re-assign to me if [http://github.com/adriaanm/scala/commit/f85c259fe686dfd84e10c7aae4432bdf1c6d818d#diff-1 this] is what we should do:

{code}
       def mot(tp0: Type): Tree = {
         val tp1 = tp0.normalize
         tp1 match {
-          case ThisType(_) | SingleType(_, _) =>
+          case ThisType(_) | SingleType(_, _) if !(tp1 exists {tp => tp.typeSymbol.isExistentiallyBound}) => // can't generate a reference to a value that's abstracted over by an existential
             manifestFactoryCall("singleType", tp, gen.mkAttributedQualifier(tp1)) 
{code}
