Just my two cents, but I feel like `Option` is what you're looking for. It solves all the `NotNull` problems much more effectively.

The only up-side to `NotNull` that I see is that you can mix it into a class definition directly, but when you're writing a class you don't know how users of that class will eventually intend to reference it. Mixing in `NotNull` at that point feels inappropriate.

On the other hand, at the declaration of the variable you could just as easily declare an `Option\[Foo\]`, and simply never use null in your code ever. You'll still have to check at system-boundaries (IO, Java libraries, etc.) but you can easily wrap those in an `Option(reference)` and the `Option` class will automatically wrap it in a `Some` or `None` as appropriate.

This also gives you all of your `map`, `flatMap`, and `filter` operations, as well as your `orElse` method calls for when you want a default value.

Is there some area that an Option doesn't cover for you?

(Edit: Sorry, goofed the formatting)
