That's OK, I can see what it is.  I can't exactly fix it right now, but I can do this:
```
Select received overloaded type during explicitouter, but typer is over.
We are likely doomed to crash in the backend.
modP.add$mcI$sp has these overloads:
  def add$mcI$sp(xs: scala.collection.GenIterable[Int]): Int
  def add$mcI$sp(x0: Int,x1: Seq[Int]): Int
  def add$mcI$sp(x: Int,y: Int): Int

[...]
[warn] /Users/paulp/Desktop/toolkit/algebra/src/main/scala/net/tqft/toolkit/algebra/grouptheory/FiniteGroup.scala:223: Overloaded type reached the backend! This is a bug in scalac.
[warn]      Symbol: value add$mcI$sp
[warn]   Overloads: (xs: collection.GenIterable)Int <and> (x0: Int, x1: Seq)Int <and> (x: Int, y: Int)Int
[warn]   Arguments: List(Object)
[warn]     def mu(i: Int)(j: Int)(s: Int) = modP.quotient(modP.add(for (n <- 0 until exponent) yield modP.multiply(chi(i)(exponentiationOnConjugacyClasses(n)(j)), zpower((-s * n) mod exponent))), exponent)
[warn]                                                            ^
[warn] Only one overload has the right arity, proceeding with overload List((xs: collection.GenIterable)Int)
[warn] there were 7 deprecation warnings; re-run with -deprecation for details
[warn] there were 50 feature warnings; re-run with -feature for details
[warn] four warnings found
[success] Total time: 38 s, completed Aug 31, 2012 8:32:58 AM
```
