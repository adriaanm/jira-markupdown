I would like the addition of a method (possibly named "when") which further refines the covered domain of a partial function. The signature of the method is as follows:
{noformat}
def when(refinement: I => Boolean) = new PartialFunction[I, O] {
  def isDefinedAt(i: I) = self.isDefinedAt(i) && refinement(i)
  def apply(i: I) = self.apply(i) //this is safe
}
{noformat}
The usage is something like:
{noformat}
val pf: PartialFunction[Int, String] = {
  case i if i % 2 == 0 => i.toString
}

1 to 50 collect (pf when (_ < 25))
{noformat}

