scala-2.7> (0 until 3).map[Byte](_.toByte)
res0: RandomAccessSeq.Projection[Byte] = RangeM(0, 1, 2)

scala-2.9> (0 until 3).map[Byte](_.toByte)
<console>:8: error: wrong number of type parameters for method map: [B, That](f: Int => B)(implicit bf: scala.collection.generic.CanBuildFrom[scala.collection.immutable.IndexedSeq[Int],B,That])That
              (0 until 3).map[Byte](_.toByte)

Why is the http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range saying there is def
map [B] (f: (Int) â‡’ B): Range[B]   if there isn't?

Now, if I want to use this two type parameter version, what does it take as a second parameter? The scaladoc was as cryptic as the error message. Can there be examples how this is used?

By trial and error I found that this works. The problem, however, is that I have no glue why does it take IndexedSeq as a second parameter.
scala> (0 until 3).map[Byte, IndexedSeq[Byte]](_.toByte)
res8: IndexedSeq[Byte] = Vector(0, 1, 2)
