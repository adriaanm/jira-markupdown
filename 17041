If a macro reports an error (e.g. using {{c.abort}}), then it seems, that the macro is evaluated twice.

Example Macro:
```scala
object Bug {
  def mf(): Int = macro mf_impl
  def mf_impl(c: Context)(): c.Expr[Int] = {
    println("macro called")
    c.abort(c.enclosingPosition, "oops")
    null
  }
}
```
If the following program is compiled
```scala
object Bug2 extends App {
  println(Bug.mf())
}
```
the compiler reports
```scala
macro called
macro called
Bug2.scala:4: error: oops
  println(Bug.mf())
                ^
one error found
```

It is not a problem for me, but I do not see why the compiler gives the code a second chance.
