Crickey, I seem to have started a robust discussion here. As the original reporter, can I say that personally I *have* been using the \u21D2 double arrow in my code, and it makes a small, though pleasant improvement to the readability— especially since it’s quite a common Scala operator. If I had the option (again for readability), I’d be tempted to use ≤, ≥, ≠ in my code too. I have been known to define π = 3.14159 on occasion…

IDEs *could* choose to display => as ⇒ but you know that they probably won’t. Or at least, the ones everybody uses won’t.

Some people might have problems when checking out and trying to compile Unicode, under some circumstances. For public code bases (like the Scala runtime libraries), I’d understand (and even support) an ASCII-only rule… But it seems odd to banish the opportunity to use the ‘right’ character for the right purpose just because a lot of tools and systems still don’t have seamless Unicode support yet. Mine does and I’d like to make use of it!

By the same token, French, Norwegian and Japanese are able to use their native characters in identifiers. You might as well stop them doing so on the basis that it creates potential portability problems.
