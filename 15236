Array.scala

{code}
  def fill[T: ClassManifest](n: Int)(elem: => T): Array[T] = {
    val b = newBuilder[T]
    var i = 0
    while (i < n) {
      b += elem
      i += 1
    }
    b.result
  }
{code}

I wonder why we need a Builder if we know the final size of Array. It's not a big problem but we'll have about log2(size) operations when building this way. Better is to create an array with provided size and then update every it's element with 'elem' function. 

The same is for 'tabulate' method.
