The following code:

{code}
object StressedContainer {
  case object C000
  case object C001
  ... // 347 more
  case object C349
}
{code}

Generates an invalid class file StressedContainer.class. javap reports:

{code}
$$ javap StressedContainer
java.lang.ClassFormatError: invalid constant type: 22
	at sun.tools.javap.ClassData.readCP(ClassData.java:180)
	at sun.tools.javap.ClassData.read(ClassData.java:81)
	at sun.tools.javap.ClassData.<init>(ClassData.java:52)
	at sun.tools.javap.JavapPrinter.<init>(JavapPrinter.java:30)
	at sun.tools.javap.Main.displayResults(Main.java:201)
	at sun.tools.javap.Main.perform(Main.java:61)
	at sun.tools.javap.Main.entry(Main.java:49)
	at sun.tools.javap.Main.main(Main.java:34)
{code}

For a smaller number of case objects, the class file is valid. For any larger number, it also generates an invalid class file. The invalid constant type varies with the number of generated classes, which suggests that something written in the class file spills over the constant pool.

This bug does *not* happen with the version 2.8.0.Beta1-prerelease, but happens with 2.8.0.RC1.
