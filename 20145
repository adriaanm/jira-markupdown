In the code sample below, both line 4 and line 5 have the same error: 4 is not CanBuildFrom[_] but in line 5, it would be expected that the parentheses should associate the (4) to the result of the .map (as an .apply() call) and not interpret it as the second parameter list of .map()

I couldn't find any reason why the current parsing rules would be in use.
```scala
val x = Map(1 -> 2, 2->4, 3-> 6) //1

val y = x.map(_.swap) //2

y(4) //3

x.map(_.swap)(4) //4

((x.map(_.swap))(4) //5
```
