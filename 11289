I guess https://github.com/scala/scala/blob/2.11.x/src/library/scala/collection/mutable/IndexedSeqView.scala offers an adequate illustration of why one might want to do this. Note that you couldn't make the type alias public even if you were inclined to do so because of variance. So every one of those Thises would be IndexedSeqView\[A, Coll\], with all that that implies.
{code}
trait IndexedSeqView[A, +Coll] ... {
  private[this] type This = IndexedSeqView[A, Coll]

  override def filter(p: A => Boolean): This       
  override def init: This                          
  override def drop(n: Int): This                  
  override def take(n: Int): This                  
  override def slice(from: Int, until: Int): This  
  override def dropWhile(p: A => Boolean): This    
  override def takeWhile(p: A => Boolean): This    
  override def span(p: A => Boolean): (This, This) 
  override def splitAt(n: Int): (This, This)       
  override def reverse: This                       
}
{code}
I don't think a self-respecting language can make someone type IndexedSeqView\[A, Coll\] twelve times in ten lines.
