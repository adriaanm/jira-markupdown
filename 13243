This problem was discussed here: http://www.nabble.com/-scala--Implicit-parameters%2C-contractive-methods-and-SBinary-ts16098040.html

In SBinary I need to be able to get something approximating the following to work:
```scala
scala> class Bin[T]
defined class Bin

scala> class Ord[T]
defined class Ord

scala> implicit def binSet[T](implicit x : Bin[T], y : Ord[T]) : Bin[Set[T]] = error("oops");
<console>:6: error: implicit method binSet is not contractive,
 because the implicit parameter type Ord[T]
 is not strictly contained in the signature Bin[Set[T]]
       implicit def binSet[T](implicit x : Bin[T], y : Ord[T]) : Bin[Set[T]] = error("oops");
```

This is safe and should work, but doesn't because the contractiveness condition (section 7.2 of the language spec) is too restrictive. 

I'd like to propose using a resolution mechanism approximately equivalent to -XFlexibleInstances from GHC: http://haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#instance-rules

Specifically, given an implicit def we allow it based on the following rules:

If it has non-implicit parameters we allow it if we'd allow the corresponding parameterless implicit def returning a function type. e.g.
```scala
  implicit def foo(x : String) = error(x);  
```

is equivalent to
```scala
  implicit def foo = (x : String) => error(x);
```

We then apply analogues of the paterson conditions. Specifically, suppose we have 
```scala
  implicit def f[T1,..TN] (implicit c1 : C1, ..., cn : CN) : S
```

We allow it if

a) for each Ti and each Cj, Ti does not appear more times in Cj than it does in S. 
b) For each Cj, the sum of the number of type parameters (including repetitions) appearing in Cj is strictly smaller than the same sum for S.

So for example we allow the type signature previously because this sum is 2 for each of Ord[T] and Bin[T], but 3 for Bin[Set[T]] and T appears only once in each constraint and once in the result type, but we would forbid the following:
```scala
  implicit def foo[T](implicit bin : Bin[(T, T)]) : Bin[T] = error("oops")
```

Because T appears twice in the type of the implicit parameter but once in the result type
```scala
  implicit def bar[T](implicit bin : Bin[List[T]]) : Bin[T] = error("oops");
```

Because the sum for Bin[List[T]] is 3 and the sum for Bin[T] is 2. 
