Ok, then here is what we know:

(a) case classes and companion objects will never work in the interpreter if they both refer to the other.

(b) 
```scala
object Foo
case class Foo(x : Int) 
```

will work in the interpreter and not in script runner. There is a separate bug for script runner, I'll break that out and assign it to Martin.

(c)
```scala
case class Foo(x : Int)
object Foo {
  def foo = Foo(10)
}
```

used to work (pre 2.7) and doesn't work anymore.


(d) the user can always wrap the case class/companion object in an object to force co-compilation.

Also:

(e) Not fixing this in the interpreter is probably not a big deal given the interpreter's other limitations (can't deal with recursive methods).

(f) If we don't want to fix this, then the error messages for failure should be improved (or the user will be WTF that the object has already been defined when they don't see that).

Reassigning to Martin, since case classes are his baby he should decide on fix or wontfix.
