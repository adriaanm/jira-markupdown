Inspired by noticing that when using Java methods that take functions as parameters needing type parameters in Scala (from http://scala-language.1934581.n4.nabble.com/Sammy-wildcards-type-inference-td4641501.html), it seems that changing this line:
```scala
val undoManager = UndoManagerFactory.unlimitedHistoryUndoManager(
```

to 
```scala
val undoManager = UndoManagerFactory.unlimitedHistoryUndoManager[Change](
```

allows the compiler to compile the project. The problem is then that the Scala compiler is unable to infer the type `C` for the signature
```scala
public static <C> UndoManager unlimitedHistoryUndoManager(
            EventStream<C> changeStream,
            Function<? super C, ? extends C> invert,
            Consumer<C> apply)
```

from the parameters given to the method.

Note that if this was
```scala
public static <C> UndoManager unlimitedHistoryUndoManager(
            EventStream<C> changeStream,
            Consumer<C> invert,
            Consumer<C> apply)
```

inference works perfectly.

On a somewhat related note, both 2.11.7 and 2.12.0-M3 are unable to apply SAM conversion to functions given to that method signature, and in fact, does not even seem to attempt to apply an SAM conversion. If this is not a known issue, should I file an issue for it?
