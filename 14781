{code}
package scala

final case class Some[+A >: scala.Nothing <: scala.Any] extends scala.Option[A] with scala.ScalaObject with scala.Product {

  val x : A = { /* compiled code */ }

  def isEmpty : scala.Boolean = { /* compiled code */ }

  def get : A = { /* compiled code */ }

  def copy[A >: scala.Nothing <: scala.Any]() : scala.Some[A] = { /* compiled code */ }

  def copy$$default$$1[A >: scala.Nothing <: scala.Any] : A = { /* compiled code */ }

  override def hashCode() : scala.Int = { /* compiled code */ }

  override def toString() : scala.Predef.String = { /* compiled code */ }

  override def equals(x$$1 : scala.Any) : scala.Boolean = { /* compiled code */ }

  override def productPrefix : java.lang.String = { /* compiled code */ }

  override def productArity : scala.Int = { /* compiled code */ }

  override def productElement(x$$1 : scala.Int) : scala.Any = { /* compiled code */ }

  override def canEqual(x$$1 : scala.Any) : scala.Boolean = { /* compiled code */ }

}
{code}
