At page 70 in the book, there is presented an example on how to produce a mapping operation on the elements of a list :
{code: language=scala}
abstract class List[A] { ...
  def map[B](f: A => B): List[B] = this match {
     case Nil => this
     case x :: xs => f(x) :: xs.map(f)
  }
}
{code}

In the case that the current instance(this) is empty it can't be returned because it has the type _List[A]_ , but the method is expected to return _List[B]_

I made a function on my own to implement the example and did it in the following manner :
{code:language=scala}
  def mapList[A,B](f: A => B)(xs:List[A]):List[B] = xs match {
    case Nil => Nil
    case x :: xs1 => f(x) :: mapList(f)(xs1)
  }
{code}
