There's an explanatory error message:
```scala
scala> def foo(width: Int) = width*2
foo: (width: Int)Int

scala> val width = (v: Int) => foo(width = v)
<console>:8: error: not found: value v
       val width = (v: Int) => foo(width = v)
                                           ^
<console>:8: warning: type-checking the invocation of method foo checks if the named argument expression 'width = ...' is a valid assignment
in the current scope. The resulting type inference error (see above) can be fixed by providing an explicit type in the local definition for width.
       val width = (v: Int) => foo(width = v)
                                         ^
```
