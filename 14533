This won't compile because the compiler says that the second case is unreachable:
```scala
null.asInstanceOf[String] match { case s: String => true; case _ => false }
```

This does compile:
```scala
null.asInstanceOf[String] match { case s: String if s != null => true; case _ => false }
```

However it doesn't work:
```scala
scala.MatchError
        at .<init>(<console>:5)
        at .<clinit>(<console>)
        at RequestResult$$.<init>(<console>:3)
        at RequestResult$$.<clinit>(<console>)
        at RequestResult$$result(<console>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Delegati...
```

This is semantically equivalent but returns false as expected.  (Note absence of a type declaration for "s.")
```scala
null.asInstanceOf[String] match { case s if s != null => true; case _ => false }
```

It appears as if Scala ignores the "if s != null" condition when there is a type declaration for s.

I know that I can just do "case null" in these simple examples, but the actual code is more complicated, and the "if s != null" construct would have been helpful, had it worked with the type declaration.
