Paul,

I did not solve the original problem, but suspect that it involved an Enumeration (a couple of values were present in the object being serialized).  One enumeration had been expanded a bit (a new class extended the basic Value).

I went back and added @SerializeVersionUID to all of these (even the class that extended Value), but still got the same failure.  At that point, had to move on ....

As a workaround, I finally changed the objects involved so that they contained nothing but primitive values, Strings, or Arrays of same.  

Where there was previously an Enumeration Value it was changed to be the ID of the entry (a simple Int).  Added a *def* to convert that back to the original Value -- so only the Int ID is actually serialized, but the caller can still work with the Enumeration value as before.  A kludge to be sure, but have already fiddled with it for 2 days without any real progress.

Also suspect that the "default" calculation of a UID works differently between the environments.  Don't know if it's the 64-bit vs 32-bit difference, different Scala versions, or what.  (Remember that if it was compiled under 2.9.1 on 32-bit Windows, and built an executable Jar, then it would execute correctly on the OSX machine with Java 1.7.0_09)

Understand that the "default" UID calculation will be very sensitive to any changes to the Class definition, but in this case (at least at the source level) the definitions were identical and it looks like it still calculated different values.  That is probably not a good thing.  There may also be something nasty going on in how an Enumeration handles serialization.

I'll see if I can build a standalone test case with an Enumeration involved to see if we can further isolate the problem.

John

