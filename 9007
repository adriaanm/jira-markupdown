OK, I've whittled this down to a bite-sized repro - below.

(It looks as though I'm going to be able to work around this by re-naming the "private[this] var reason" so that it doesn't clash with the reason in Message, which will be just fine for me).

{code}
sealed abstract class MessageType(val value: Int)
object MessageType {
    case object HELLO extends MessageType(0)
}


sealed abstract class Reason(val value: Int)
object Reason {
    case object GOOD_REASON extends Reason(0)
}


case class Message(messageType:MessageType, reason:Option[Reason] = None)


class ReproForSI6921 {

  private[this] var reason: Reason = Reason.GOOD_REASON

  def decideElection() {
    val explanation = None
    val msg = Message(MessageType.HELLO, reason = explanation)
  }
}
{code}
