I see this too with 2.9.1.final:
```
Welcome to Scala version 2.9.1.final (OpenJDK 64-Bit Server VM, Java 1.6.0_20).
Type in expressions to have them evaluated.
Type :help for more information.

scala> val n = new scala.tools.nsc.interpreter.IMain()
n: scala.tools.nsc.interpreter.IMain = scala.tools.nsc.interpreter.IMain@3f6a5d72

scala>  n.interpret("val r=1")
r: Int = 1
res0: scala.tools.nsc.interpreter.package.IR.Result = Success

scala> n.valueOfTerm("r")
res1: Option[AnyRef] = None
```

The underlying cause of this is that ReadEvalPrint.call throws an exception if you try to access the evaluated value:
```
Welcome to Scala version 2.9.1.final (OpenJDK 64-Bit Server VM, Java 1.6.0_20).
Type in expressions to have them evaluated.
Type :help for more information.

scala> import scala.tools.nsc.interpreter._
import scala.tools.nsc.interpreter._

scala> class MyIMain extends IMain {
     | def lastRequest = prevRequestList.last
     | }
defined class MyIMain

scala> val n = new MyIMain()
n: MyIMain = MyIMain@1483ce25

scala> n.interpret("val a = 1")
import scala.tools.nsc.interpreter._
res0: scala.tools.nsc.interpreter.package.IR.Result = Success

scala> val r = n.lastRequest
r: n.Request = Request(line=val a = 1, 1 trees)

scala> r.lineRep.call(r.lineRep.evalName)
java.lang.RuntimeException: Internal error: eval object class $line1.$eval, 

	at scala.sys.package$.error(package.scala:27)
	at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.evalMethod(IMain.scala:750)
	at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:704)
	at .<init>(<console>:14)
	at .<clinit>(<console>)
	at .<init>(<console>:11)
	at .<clinit>(<console>)
	at $print(<console>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:704)
	at scala.tools.nsc.interpreter.IMain$Request$$anonfun$14.apply(IMain.scala:920)
	at scala.tools.nsc.interpreter.Line$$anonfun$1.apply$mcV$sp(Line.scala:43)
	at scala.tools.nsc.io.package$$anon$2.run(package.scala:25)
	at java.lang.Thread.run(Thread.java:636)
```

IMain.valueOfTerm ultimately calls ReadEvalPrint.callEither which swallows that exception and eventually a None bubbles up and gets returned. I haven't done any more digging as to why that exception is thrown, will report more details if I find them.

Are there any known workarounds for this? We're embedding the Scala REPL and trying to customize the Print stage to dump the contents of any eval'ed collection or iterator in [Gremlin](https://github.com/tinkerpop/gremlin) and this bug is impeding progress.
