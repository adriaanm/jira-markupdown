In case the goal was computing lubs as needed to emit 1.6 classfiles (ie version 50 and up), that's been solved in 

https://github.com/magarciaEPFL/scala/commit/da9e0eb590bb6d4f487388327b5fd2dbc2e10eb6

Background, quoting from http://gallium.inria.fr/~xleroy/publi/bytecode-verification-JAR.pdf

--- start quote ---
The simplest solution to the [least upper bound of] interface problem is to be found in Sunâ€™s implementation of the
JDK bytecode verifier. (This approach is documented nowhere, but can easily be inferred by
experimentation.) Namely, bytecode verification ignores interfaces, treating all interface types as
the class type Object. Thus, the type algebra used by the verifier contains only proper classes
and no interfaces, and subtyping between proper classes is simply the inheritance relation between
them. Since Java has single inheritance (a class can implement several interfaces, but inherit from
one class only), the subtyping relation is tree-shaped and trivially forms a semi-lattice: the least
upper bound of two classes is simply their closest common ancestor in the inheritance tree.
--- end quote ---


See also http://comments.gmane.org/gmane.comp.java.vm.languages/2293
