I've taken a look at `Tuple22.class` to figure out why it's so big (32260 bytes). Beyond various unrolled methods (whose bytecode accounts for at most 2 kilobytes), I've noticed that **11358** bytes are needed for the generic signatures of `copy()` and its default arguments ({{copy$default$i}} methods).

An example signature from `Tuple4` goes like this, for `copy$default$1`:
```scala
<T1:Ljava/lang/Object;T2:Ljava/lang/Object;T3:Ljava/lang/Object;T4:Ljava/lang/Object;>()TT1;
```

The size of the signature is linear in the number of type arguments of the case class, while the number of such signatures is equal to the value number of arguments of the case class.

Given that those methods are seldom called in source code (even in Java), and calling them is probably quite inconvenient, removing just those generic signatures would achieve a 30% saving on the binary size of `Tuple22`, and savings to quantify on other classes. This might help further with extending maximal arity beyond 22, as discussed on scala-internals (https://groups.google.com/d/msg/scala-internals/RRu5bppi16Y/k_Fxj8rsDO8J).
