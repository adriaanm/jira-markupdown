Using a method with varargs different thing are accepted or fail on different platforms
```scala
val factory = new NashornScriptEngineFactory()
val engine = factory.getScriptEngine(Array("-strict"))
```

Works on Win + Oracle JDK, but errors on the other.
```text
overloaded method value getScriptEngine with alternatives:
   (x$1: String*)javax.script.ScriptEngine <and>
   (x$1: jdk.nashorn.api.scripting.ClassFilter)javax.script.ScriptEngine <and>
   (x$1: ClassLoader)javax.script.ScriptEngine
  cannot be applied to (Array[String])
           val engine = factory.getScriptEngine(Array("-strict"))
```

And vice versa:
```scala
val factory = new NashornScriptEngineFactory()
val engine = factory.getScriptEngine("-strict")
```
```text
overloaded method value getScriptEngine with alternatives:
   (x$1: Array[String])javax.script.ScriptEngine <and>
   (x$1: ClassLoader)javax.script.ScriptEngine
  cannot be applied to (String)
           val engine = factory.getScriptEngine("-strict")
```

key to the problem is probably https://docs.oracle.com/javase/8/docs/jdk/api/nashorn/jdk/nashorn/api/scripting/NashornScriptEngineFactory.html#getScriptEngine-java.lang.String...-

The varargs there and the fact that Oracle JDK does not include the source for this class and OpenJDK probably does?

I solved it for the time being by using
```scala
val factory = new NashornScriptEngineFactory()
val engine = factory.getScriptEngine(Array("-strict"), Thread.currentThread().getContextClassLoader()).asInstanceOf[NashornScriptEngine]
```

Still seemed like a bug worth reporting.
