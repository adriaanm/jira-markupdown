Presentation compiler error

{code}
java.lang.AssertionError: assertion failed
at scala.Predef$$.assert(Predef.scala:91)
at scala.tools.nsc.Global$$GlobalPhase.applyPhase(Global.scala:251)
at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$2.apply(Global.scala:238)
at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$2.apply(Global.scala:238)
at scala.Iterator$$class.foreach(Iterator.scala:375)
at scala.collection.mutable.ListBuffer$$$$anon$$0.foreach(ListBuffer.scala:255)
at scala.tools.nsc.Global$$GlobalPhase.run(Global.scala:238)
at scala.tools.nsc.Global$$Run.compileSources(Global.scala:534)
at ch.epfl.lamp.sdt.build.ScalaCompilerManager$$SemanticCompiler.unitFor(ScalaCompilerManager.java:460)
at ch.epfl.lamp.sdt.build.ScalaCompilerManager$$SemanticCompiler.tokensFor(ScalaCompilerManager.java:488)
at ch.epfl.lamp.sdt.core.ScalaProject.refreshTokens(ScalaProject.java:148)
at ch.epfl.lamp.sdt.core.ScalaProject.refreshTokens(ScalaProject.java:132)
at ch.epfl.lamp.sdt.ui.scalaeditor.ScalaEditor.tokenAt(ScalaEditor.java:174)
at ch.epfl.lamp.sdt.ui.text.ScalaHyperlinkDetector.detectHyperlinks(ScalaHyperlinkDetector.java:35)
at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:261)
at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:458)
at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:198)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1101)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3319)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2971)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2389)
at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2353)
at org.eclipse.ui.internal.Workbench.access$$4(Workbench.java:2219)
at org.eclipse.ui.internal.Workbench$$4.run(Workbench.java:466)
at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:289)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:461)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:106)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:153)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:106)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:76)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:363)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:176)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:504)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:443)
at org.eclipse.equinox.launcher.Main.run(Main.java:1169)

eclipse.buildId=I20070625-1500
java.version=1.6.0
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=linux, ARCH=x86, WS=gtk, NL=en_US
Command-line arguments:  -os linux -ws gtk -arch x86
{code}

source file was:

{code}
package ch.arrenbrecht.tracker;

import Language._

import scala.util.parsing.combinator._
import scala.util.parsing.syntax._
import scala.util.parsing.input._
import scala.util.parsing.input.CharArrayReader.EofCh

final class Parser( in: Reader[Char] ) extends Parsers {
    def this( in: String ) = this( new CharArrayReader( in.toCharArray() ) )
    type Elem = Char
    
    def parse = phrase( in )
    
    private def phrase: Parser[Cmd] = exit | env | span
    
    private def env = 'e' ^^ Env
    private def exit = 'q' ^^ Exit
    
    private def now = "now" ^^ Now
    
    private def span = defSpan | fromSpan | toSpan | fullSpan
    private def defSpan = ('-' ~ rest) ^^ (Span( null, null, _ ))
    private def fromSpan = (time ~ '-' ~rest) ^^ (v => Span( v._1, null, v._2))
    private def toSpan = ('-' ~ time ~ rest) ^^ (v => Span( null, v._1, v._2))
    private def fullSpan = (time ~ '-' ~ time ~ rest) ^^ (v => Span( v._1._1, v._1._2, v._2))

    private def time = hhmm | hh
    private def hhmm = (num ~ ':' ~ num) ^^ (v => TimeOfDay( v._1, v._2 ))
    private def hh = num ^^ (TimeOfDay( _, 0 ))
    private def num = (digit+) ^^ (v => Integer.parseInt( v.mkString ))
    private def letter = elem( "letter", _.isLetter )
    private def digit = elem( "digit", _.isDigit )
    private def chrExcept(cs: Char*) = elem("", ch => (cs forall (ch !=)))
    private def space = elem( "space", ch => ch <= ' ' && ch != EofCh )
    private def rest = (space ~ rep( chrExcept( '\n', EofCh ))) ^^ (_._2.mkString)
}
{code}
