Looks like synthetic method creation not dealing correctly with higher kinded types, something that completely redlines the concept of unsurprising.

What do you think adriaan, you or me?
{code}
// works
trait M[F[_]]  
class S[X[_] <: M[X], A](val x:X[A])
object S {
  def apply[X[_] <: M[X], A](x: X[A]): S[X, A] = new S[X, A](x)
  def unapply[X[_] <: M[X], A](p: S[X, A]) = Some(p.x)  
}
// seemingly equivalent, doesn't work
trait M[F[_]]  
case class S[X[_] <: M[X], A](x: X[A])
{code}
