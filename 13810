```scala
package bug


final class DepMap[K[_]] private (val map: Map[K[_], Any]) {

    def this() = this(Map())
    
    override def equals(that: Any): boolean = {
        that match {
            case x: DepMap[_] => this.map == x.map
            case _ => false
        }
    }
    override def hashCode: int = map.hashCode

    // rest of this class not needed to trigger bug

}
```

Compiling this program with scalac 2.7.1 causes an error:
```scala
bug.scala:11: error: the kinds of the type arguments (_[_]) do not conform to the expected kinds of the type parameters (type K) in class DepMap.
_[_]'s type parameters do not match type K's expected parameters: type _ has one type parameter, but type K has one
            case x: DepMap[_] => this.map == x.map
                    ^
one error found
```

Recompiling with the -unchecked flag generates one warning and no errors:
```scala
bug.scala:11: warning: non variable type-argument _[_] in type pattern is unchecked since it is eliminated by erasure
            case x: DepMap[_] => this.map == x.map
                    ^
one warning found
```

Expected behaviour: either both cases report errors (if the error is legitimate) or both report no errors.
