We created package private constructors that select for specific combinations of the variables that have defaults. Once this bug gets fixed, we'll just remove them and there is no change to consumers of the Spark API. The only thing I'm concerned about is that I'm surprised Scala this doesn't throw any ambiguity exceptions here. In the example below the private constructor is used even though either constructor could technically apply. Just wondering - why is this not ambiguous? Is this approach we've taken safe?
```scala
package mypackage

class Example {

  // This is our main constructor involving defaults
  def this(a: String, b: String = "foo", c: String = "bar") {
    this()
  }

  private[mypackage] def this(a: String, b: String) {
    this(a, b, "bar")
    println("called internal constructor")
  }
}

object Example {
  def main(args: Array[String]) {
    val x = new Example("a", "b")
  }
}
```
