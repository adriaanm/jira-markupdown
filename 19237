The phase order inference (topological sort) is not working properly, as it rejects valid constraints.

To illustrate this, I have created [a small example project](https://github.com/misberner/scalac-phase-bug) defining a plugin which needs to be run after the `parser`, but before the `typer`.
```scala
val runsAfter = List[String]("parser")
override val runsBefore = List[String]("typer")
```
The first 4  default phases are `parser`, `namer`, `packageobjects`, `typer`, and the latter 3 have to be executed directly after each other. A plugin to be run between `parser` and `typer` could hence be run right after `parser`. However, the setup is rejected with the following exception:
```scala
error: scala.reflect.internal.FatalError: Phase typer can't follow packageobjects, created phase-order.dot
        at scala.tools.nsc.PhaseAssembly$DependencyGraph$$anonfun$validateAndEnforceHardlinks$1.apply(PhaseAssembly.scala:138)
        at scala.tools.nsc.PhaseAssembly$DependencyGraph$$anonfun$validateAndEnforceHardlinks$1.apply(PhaseAssembly.scala:135)
        at scala.collection.mutable.HashSet.foreach(HashSet.scala:78)
        at scala.tools.nsc.PhaseAssembly$DependencyGraph.validateAndEnforceHardlinks(PhaseAssembly.scala:135)
        at scala.tools.nsc.PhaseAssembly$class.computePhaseAssembly(PhaseAssembly.scala:215)
        at scala.tools.nsc.Global.computePhaseAssembly(Global.scala:39)
        at scala.tools.nsc.Global.computePhaseDescriptors(Global.scala:748)
        at scala.tools.nsc.Global.phaseDescriptors$lzycompute(Global.scala:752)
        at scala.tools.nsc.Global.phaseDescriptors(Global.scala:752)
        at scala.tools.nsc.Global$Run.<init>(Global.scala:1300)
        at scala.tools.nsc.Global.phaseNames$lzycompute(Global.scala:765)
        at scala.tools.nsc.Global.phaseNames(Global.scala:764)
        at scala.tools.nsc.Global.phaseHelp(Global.scala:794)
        at scala.tools.nsc.Global.phaseDescriptions(Global.scala:770)
        at scala.tools.nsc.CompilerCommand.getInfoMessage(CompilerCommand.scala:92)
        at scala.tools.nsc.Driver.process(Driver.scala:53)
        at scala.tools.nsc.Driver.main(Driver.scala:68)
        at scala.tools.nsc.Main.main(Main.scala)
```
The rendered `phase-order.dot` is attached. As can be seen, there are no cyclic dependencies, and the edge between `namer` and `parser` is not blue ("right after").

The problem disappears if the additional constraint
```scala
override val runsRightAfter = Some("parser")
```
is introduced.

**Steps to Reproduce**
```scala
$ git clone git@github.com:misberner/scalac-phase-bug.git
$ cd scalac-phase-bug
$ sbt publishLocal
$ scalac -Xplugin ~/.ivy2/local/com.github.misberner.scala.test/phaseconflict_2.11/0.1-SNAPSHOT/jars/phaseconflict_2.11.jar -Xshow-phases
```
