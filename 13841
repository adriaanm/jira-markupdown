{code}
object a {
  private[this] var i = 0
  def go = List(1,2,3).foreach(i += _)
}
{code}
This compiles fine, and when run:
{code}
scala> a.go
java.lang.IllegalAccessError
	at a$$$$anonfun$$go$$1.apply(a.scala:4)
	at a$$$$anonfun$$go$$1.apply(a.scala:4)
{code}
I fully understand why this happens, but I do not think this behavior is consonant with the proper or intuitive semantics of private[this].  From the user's standpoint this code is "i +=1 ; i += 2 ; i += 3" and it only fails because of object creation that the user shouldn't even know is happening.

Workarounds are not difficult for someone who knows what's going on under the hood, but I'm opening this as a bug in the hopes that the long-term goal is not to allow the JVM limitations to have a major say in the access semantics.
