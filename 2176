Just to clarify, my motivation with this issue is to let folks use the common Java IoC frameworks like Spring/Guice/JSR250/JSR330/JSR299 in a natural way with Scala's fields/getters/setters with minimal noise & boiler plate code. So I'd like developers to be able to write Scala code like this...

{code}
 class MyComponent {
    @Autowired var service = _
  }
{code}

where @Autowired could be replaced by a number of other IoC annotations from the various frameworks such as @Resource or @Inject from Guice/JSR330 - there's about say 10 common well used annotations).

How's this for a really simple mechanism which would solve this problem very easily - as well as provide a simple mechanism folks can adapt and extend...


When adding annotations to fields/getters/setters in Scala, the compiler loads the 'annotation defaults' configuration. To do this it loads the default properties file from somewhere (these are the out of the box defaults which tries to do the right thing for most common IoC frameworks) - say at _META-INF/services/scala/compiler-annotations.default.properties_

Then it loads __all__ of the custom files (letting users overload the out of the box defaults) it can find at the URI _META-INF/services/scala/compiler-annotations.properties_

It loads the defaults into a Properties object then overwrites entries with any custom extensions it can find on the classpath. (It could maybe warn if 2 extension properties files have conflicting entries).

The properties file should look like this...

{code}
javax.annotation.Resource = setter
org.springframework.beans.factory.annotation.Autowired = setter
com.google.inject.Inject = setter
javax.inject.Inject = setter
{code}

The above supports JSR330, JSR250 and Guice - with a little bit of Spring. A few more entries and all of Spring/Guice/JSR250/JSR330/JSR299 would be supported too.

If you've not guessed by now, the format of the properties file is 

annotationClassName = [field] [getter] [setter]

(order isn't important) so that you can list which elements get the actual bytecode annotation. 

The default value if no entry is found for a given annotation type is "field getter setter".

The aforementioned example would then default the annotations in bytecode to be restricted just to the setters.

Having said that this should be an optional compiler plugin earlier in this issue - I'm now thinking, given the importance of IoC frameworks on the Java platform - that Scala's compiler should ship with this functionality (and a good set of defaults which I'm more than happy to provide) out of the box by default.

i.e. out of the box, Scala's compiler should work great for folks using Spring/Guice/JSR250/JSR330/JSR299 annotations

I'll happily provide a complete default properties file if you like?
