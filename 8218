Ah, stupid mistake on my part. I didn't escape the '$' character in the terminal, so it must have been printing out the bytecode for the generic class. I now see what you are seeing.

One final question and I'll close the issue: in the main method of the Test$ class, it is calling Foo.barA$mcI$sp on the instance of Foo$mcI$sp. Just checking this should dispatch to the specialized method of the specialized class (presumably that's what invokevirtual #28 implies)?

{code}

  public void main(java.lang.String[]);
    Code:
       0: new           #16                 // class Foo$mcI$sp
       3: dup           
       4: invokespecial #17                 // Method Foo$mcI$sp."<init>":()V
       7: astore_2      
       8: getstatic     #22                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      11: aload_2       
      12: iconst_1      
      13: invokevirtual #28                 // Method Foo.barA$mcI$sp:(I)I
      16: invokestatic  #34                 // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      19: invokevirtual #38                 // Method scala/Predef$.println:(Ljava/lang/Object;)V
      22: getstatic     #22                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      25: aload_2       
      26: iconst_2      
      27: invokevirtual #41                 // Method Foo.barB$mIc$sp:(I)I
      30: invokestatic  #34                 // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
      33: invokevirtual #38                 // Method scala/Predef$.println:(Ljava/lang/Object;)V
      36: return   
{code}
