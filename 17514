In Java, `Double.Nan == Double.NaN` (comparison of primitives) returns false, as per the IEEE spec. However, in order that Object.equals behaves wrt the law x.equals\(x\) for all x, `Double.valueOf(Double.NaN).equals(Double.valueOf(Double.NaN))` returns true!

In scala, we can get ourselves into trouble because:
```
scala> List(Double.NaN) == List(Double.NaN)
res52: Boolean = false

scala> val l = List(Double.NaN)
l: List[Double] = List(NaN)

scala> l == l
res53: Boolean = true
```
This gets worse!
```
scala> java.lang.Double.valueOf(Double.NaN) == java.lang.Double.valueOf(Double.NaN)
res57: Boolean = true

scala> List(java.lang.Double.valueOf(Double.NaN)) equals List(java.lang.Double.valueOf(Double.NaN))
res58: Boolean = false

scala> val d = java.lang.Double.valueOf(Double.NaN)
d: java.lang.Double = NaN

scala> List(d) == List(d)
res59: Boolean = true
```
To be honest, I'm not at all clear as to what can be done here; other than provide for the fact that in the == comparison, if the left hand side and right hand side are collections of type Double, we cannot use identity as a case for returning true
