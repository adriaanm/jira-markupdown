It's also possible to choose
val z: Int=>Int = a

Base.a gets a point of relative weight because parameterless, and Clazz.a gets a point because in a derived class.  It's a tie. 

Or so I imagine.  Is there an option scalac -Yexplain-overload-resolution?

This used to list the unmatching alternatives:
```scala
abstract class Base {
  //val a: Int = 1
  def a: String = "one"
}

class Clazz extends Base {
  def a(x: Int): Int = 2
  val z: Int = a
}

overlord.scala:12: error: type mismatch;
 found   : <error>
 required: Int
  val z: Int = a
```
