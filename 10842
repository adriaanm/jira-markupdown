Workaround: use following extractor to match partial functions instead of using native syntax
```scala
import universe._, Flag._
object PartialFunction {
  private val AnonFun = TypeName("$anonfun")
  private val ApplyOrElse = TermName("applyOrElse")
  private val DefaultCase = TermName("defaultCase$")
  private val IsDefinedAt = TermName("isDefinedAt")
  def unapply(tree: Tree): Option[List[CaseDef]] = tree match {
    case Match(EmptyTree, cases) => Some(cases)
    case Typed(
           Block(
             List(ClassDef(clsMods, AnonFun, Nil, Template(
               List(abspf: TypeTree, ser: TypeTree), noSelfType, List(
                 DefDef(_, termNames.CONSTRUCTOR, _, _, _, _),
                 DefDef(_, ApplyOrElse, _, _, _,
                   Match(_, cases :+
                     CaseDef(Bind(DefaultCase, Ident(nme.WILDCARD)), _, _))),
                 DefDef(_, IsDefinedAt, _, _, _, _))))),
             Apply(Select(New(Ident(AnonFun)), termNames.CONSTRUCTOR), List())),
           pf: TypeTree)
      if pf.tpe != null && pf.tpe <:< typeOf[scala.PartialFunction[_, _]] &&
         abspf.tpe != null && abspf.tpe <:< typeOf[scala.runtime.AbstractPartialFunction[_, _]] &&
         ser.tpe != null && ser.tpe =:= typeOf[scala.Serializable] &&
         clsMods.hasFlag(FINAL) && clsMods.hasFlag(SYNTHETIC) =>
      Some(cases)
    case _ =>
      None
  }
}
```
