I've marked this bug as critical in light of our current Mission: Optimization. Since Sun only gave us 4 fast ways to access local variables (the Xload_I family), we should make sure we don't waste them. I stumbled on this while going through the bytecode generated under -Yvirtpatmat.

{code}
object Test {
  def test(x: Int) = {
    val y = x
    println(y)
  }
}
{code}

{code}
$ qsc -optimize /private/tmp/optimize_alloc_local.scala 
$ javap -c -classpath /tmp Test\$
<snip>
public void test(int);
  Code:
   0:	iload_1
   1:	istore_2
   2:	getstatic	#20; //Predef
   5:	iload_2
   6:	invokestatic	#26; //boxToInteger
   9:	invokevirtual	#30; //println
   12:	return
{code}

So, yeah, optimizer, how about generating the following bytecode, mmmh?

{code}
   0:	getstatic	#19; //Predef
   3:	iload_1
   4:	invokestatic	#26; //boxToInteger
   7:	invokevirtual	#30; //println
   10:	return
{code}
