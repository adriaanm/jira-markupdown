```scala
package test

abstract class SymbolLoaders {
  val global : Global
  abstract class Loader { def complete(sym : global.Symbol) : Unit }
  class MSILLoader extends Loader {
    private object typeParser extends CLRTypes {
      val global : SymbolLoaders.this.global.type = SymbolLoaders.this.global
    }
    def complete(sym : global.Symbol) = {
      Console.println("completing " + sym)
      typeParser.parseType(sym.asInstanceOf)
    }
  }
  def loader : Loader = new MSILLoader
}
class Global {
  class Symbol
  val loaders = new SymbolLoaders {
    val global : Global.this.type = Global.this
  }
}
abstract class CLRTypes {
  val global : Global
  def parseType(root : global.Symbol) = {}
}


object Go {
  def main(args : Array[String]) : Unit = {
    val global = new Global
    val sym = new global.Symbol
    global.loaders.loader.complete(sym)
  }
}
```

On run:
```scala
completing test.Global$$Symbol@6b97fd
Exception in thread "main" java.lang.ClassCastException: test.Global$$Symbol
	at test.SymbolLoaders$$MSILLoader.complete(Go.scala:12)
	at test.Go$$.main(Go.scala:33)
	at test.Go.main(Go.scala)
```

Note that without the "asInstanceOf", the code is statically type safe and will run without a run time error.
