scala.collection.TraversableLike:

{code:|borderStyle=solid}
def dropWhile(p: A => Boolean): Repr = {
  val b = newBuilder
  var go = false
  for (x <- this) {
    if (!p(x)) go = true
    if (go) b += x
  }
  b.result
}
```scala


If the predicate {{p}} is an expensive computation than it unnecessarily slows {{dropWhile}} down after {{go}} is {{true}}.

Suggestion:

{code:|borderStyle=solid}
def dropWhile(p: A => Boolean): Repr = {
  val b = newBuilder
  var go = false
  for (x <- this) {
    if (go) b += x
    else { if (!p(x)) go = true }
  }
  b.result
}
```
