`take` in `(Vector.fill(1)("a") ++ Vector.fill(64)("a")).take(Int.MaxValue)` fails, with 63 for 64 it succeeds. This is minimized from this Twitter report: https://twitter.com/travisbrown/status/673331342273150976

The issue starts at the integer overflow in this comparison:
https://github.com/scala/scala/blob/v2.11.7/src/library/scala/collection/immutable/Vector.scala#L159

For this case, I claimed on Twitter that using unsignedCompare(Int, Int) (see e.g. http://www.drmaciver.com/2008/08/unsigned-comparison-in-javascala/ for one clever implementation) would suffice as a fix â€” but I've not verified no loopholes remain.

It's not clear to me why dropBack0 fails there, but it's safe to assume it wasn't designed to handle negative arguments. I'm hoping the result of ++ is still kosher here, but I don't have the hybris of reviewing the code in the time I have.

Travis Brown tested this on 2.11, I did on 2.11.7, but the overflowing comparing was already there in 2009, and I'm assuming since always. Would you please test other maintained branches? https://github.com/scala/scala/commit/6f7723bea494da2616edc1877d2402d356787512#diff-c6f1c361902458cf90978d39ae61cfa8L128
