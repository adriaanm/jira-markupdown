Maybe related lack of warning from SO.

"Any" seems to mean: OK, I don't need to help you anymore.

http://stackoverflow.com/questions/28859882/is-it-a-type-checker-bug

Similar to the SO example:
```scala
scala> import concurrent._,ExecutionContext.Implicits.global
import concurrent._
import ExecutionContext.Implicits.global

scala> trait Verify[A] { def apply(a: A): Boolean }
defined trait Verify

scala> case class FV[A](f: Future[A], v: Verify[A])
defined class FV

scala> val vint = new Verify[Int] { def apply(i: Int) = i == 42 }
vint: Verify[Int] = $anon$1@15ff3e9e

scala> val x = FV(Future(3), vint)
x: FV[Int] = FV(scala.concurrent.impl.Promise$DefaultPromise@291caca8,$anon$1@15ff3e9e)

scala> (x: FV[_]) match { case FV(f: Future[String], v) => v(f.value.get.get) }
<console>:17: warning: non-variable type argument String in type pattern scala.concurrent.Future[String] is unchecked since it is eliminated by erasure
              (x: FV[_]) match { case FV(f: Future[String], v) => v(f.value.get.get) }
                                            ^
res1: Boolean = false

scala> (x: FV[_]) match { case FV(f: Future[Any], v) => v(f.value.get.get) }
res2: Boolean = false

scala> (x: FV[_]) match { case FV(f: Future[Any], v) => v("nope") }
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
  at scala.runtime.BoxesRunTime.unboxToInt(BoxesRunTime.java:105)
  at $anon$1.apply(<console>:12)
  ... 33 elided
```

