In the upper or lower bound of a type parameter for an inherited member, an ancestor's type parameters are not properly replaced.

You can see this in the standard library API documentation in several places.  For example, in the ++, copyTo*, grouped, and other methods of [http://www.scala-lang.org/api/current/scala/xml/pull/ProducerConsumerIterator.html ProducerConsumerIterator], there is a type variable 'A' as the lower bound of a new type parameter.  This 'A' is probably the unreplaced type parameter of the 'Iterator' ancestor.  It should be 'T'.  Or, there is [http://www.scala-lang.org/api/current/scala/collection/BitSet.html BitSet], which should have Int substituted for 'A' for those methods.

A test case is:
{code}
trait A[Q] {
  def ret: List[Q]
  def ret2[Z >: Q](z: Z): Z
  def ret3[Y <: Q](y: Y): Y
  type X >: Q
}
trait B[T] extends A[T]
{code}

In the generated documentation for B, Q should be replaced by T.  This is the case for the Q in the return type of 'ret', but not in the bounds of 'ret2', 'ret3', or 'X'.

This is for 2.8.0, 2.8.1.RC4, and the nightly scaladoc.

I assumed it was some missing or improper `asSeenFrom` in `ModelFactory`, but I couldn't fix this in my own code, which has this same problem (I think).
