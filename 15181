Consider the following three classes:

The first is a simple annotation:

{code}
import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD, ElementType.FIELD})
public @interface A {}
{code}

The next two are Scala files that implement a trait and a class that mixes in that trait, each in their own file (T.scala and S.scala, respectively):

{code}
trait T {
  @A
  var foo:String = _
}
{code}

{code}
class C extends T {
  @A
  var bar:String = _
}
{code}

In the trait, there is a var that contains an annotation.

When C and T are compiled together, the annotations in T will appear in the class file. However if C is recompiled without T, the annotations will not be present in the generated class file for C.

This can be verified by disassembling the class file with javap -verbose.

For example:

{code}
$$ javac A.java
$$ scalac C.scala T.scala
$$ javap -verbose C
public java.lang.String foo();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	SI-45; //Field foo:Ljava/lang/String;
   4:	areturn
  LineNumberTable: 
   line 1: 0

  RuntimeVisibleAnnotations: length = 0x6
   00 01 00 05 00 00 
{code}

After running scalac C.scala a second time, without including T.scala:

{code}
$$ touch C.scala
$$ scalac C.scala
$$ javap -verbose C
public java.lang.String foo();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	SI-45; //Field foo:Ljava/lang/String;
   4:	areturn
  LineNumberTable: 
   line 1: 0

{code}

Notice that no annotations are present on the foo accessor in the second decompilation of C. 

It is very common to recompile this way, for example, when using the scalac Ant task that recompiles only modified files.

This can be reproduced against scala-2.7.7.final using the attached files.
