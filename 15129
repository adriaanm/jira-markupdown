```scala
scala> import scala.collection.mutable._                   
import scala.collection.mutable._

scala> new HashMap[Int, Int] with SynchronizedMap[Int, Int]
res0: scala.collection.mutable.HashMap[Int,Int] with scala.collection.mutable.SynchronizedMap[Int,Int] = Map()

scala> res0.clone()
res1: res0.Self = Map()
```
Maybe this is related to the implementation of clone() casting to whatever you tell it?
```scala
trait Cloneable[+A <: AnyRef]  {
  override def clone: A = super.clone().asInstanceOf[A]
}
```
I should point out that specifying a concrete type for clone() is not a solution because a method like ++ is implemented as "clone() <ins><ins>= x" and on Set for example </ins></ins> returns "This", so that implementation won't work unless clone() also returns "This".
