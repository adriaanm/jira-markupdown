It fails with “calibration failure”, while it tries to run a supposedly non-tail-call-optimized method (which is of course optimized on platforms which support tail calls).

{code}
  def calibrate: Int = {
    val calibrator = new Calibrator();
    var stop = false;
    var n = 1;
    while (!stop) {
      try {
        calibrator.f(n, n);
        if (n >= Int.MaxValue / 2) sys.error("calibration failure");
        n = 2 * n;
      } catch {
        case exception: compat.Platform.StackOverflowError => stop = true
      }
    }
    4 * n
  }
{code}

Apart from that, it also hardcodes that certain methods fail with a StackOverflowError in the checkfile, which is not true on all platforms.

As mentioned in https://groups.google.com/d/topic/scala-internals/FDuwuP1daAg/discussion, I'll just check for Avian and make the test pass.
