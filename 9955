Ok, I've tracked it down to the groovypp library that does some AST transformations (valid in groovy, almost like macros in scala) to get static typed compilation.

I've made a small project with the least possible code to show the error:

https://github.com/gerritjvv/SI7741

I'm using:
 one empty interface => MyModule.groovy
 one single method class that implements the MyModule interface => MyModuleImpl
 The UsingIMain class calls the IMain class and performs the correct settings.
 
I've copied all of the jars (some are not relevant to the code) into the test-lib directory, it also contains the scala jars from my patched repo (https://github.com/gerritjvv/scala.git). 
The test.sh script performs the classpath and bootclasspath setup. Passing a single parameter true to the script tells UsingIMain to set the property ignoreinnercls=true, which will activate the patch I've made, 
by default its false and the scala compiler will give an error.

Below are examples of two runs I've made:

gvanvuuren@gvanvuuren-UX31E:~/checkouts/SI7741/si7741$ ./test.sh 
import scala.tools.nsc.interpreter._
import scala.tools.nsc._
getIMain: (cls: ClassLoader)scala.tools.nsc.interpreter.IMain
m: ClassLoader => scala.tools.nsc.interpreter.IMain = <function1>
ctx: java.util.Map[String,Object] = {module=test.si7741.MyModuleImpl@69ee8449}
ctx: java.util.Map[String,Object] = {module=test.si7741.MyModuleImpl@69ee8449}
error: error while loading MyModule, class file '/home/gvanvuuren/checkouts/SI7741/si7741/target/si7741-0.1.0.jar(test/si7741/MyModule.class)' is broken
(class java.util.NoSuchElementException/None.get)


gvanvuuren@gvanvuuren-UX31E:~/checkouts/SI7741/si7741$ ./test.sh true
import scala.tools.nsc.interpreter._
import scala.tools.nsc._
getIMain: (cls: ClassLoader)scala.tools.nsc.interpreter.IMain
m: ClassLoader => scala.tools.nsc.interpreter.IMain = <function1>
ctx: java.util.Map[String,Object] = {module=test.si7741.MyModuleImpl@76ad043}
ctx: java.util.Map[String,Object] = {module=test.si7741.MyModuleImpl@76ad043}
CTX {module=test.si7741.MyModuleImpl@76ad043}
!!!!!! Result: 1
import scala.collection.JavaConversions._
import test.si7741._
mymodule: test.si7741.MyModuleImpl = test.si7741.MyModuleImpl@76ad043
