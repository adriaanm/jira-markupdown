Consider the following code:

{code}
    "correctly define apply()" in {
      val prop = forAll { (i: Int, str: String) =>
        (str.length > 0) ==> {
          val idx = Math.abs(i % str.length)    // <=== looky here!
          val stream = LineStream(str)
          
          stream(0) mustEqual stream.head
          stream(idx) mustEqual str(idx)
        }
      }
{code}

Obviously, this code is inside a thunk inside a lambda inside another thunk finally inside a class constructor (not shown).  The full context is included for reference, since I didn't have time to come up with a minimal case.

The line in question will generate the following invoke:

{code}
   15:	invokeinterface	SI-40,  2; //InterfaceMethod scala/MathCommon.abs:(I)I
{code}

However, scala.MathCommon is not an interface, it is a class.  This of course results in an exception at runtime.
