Here's a simpler example which makes this fail:
```scala
class A(x: Int)

object B {
  def bar(n: => Int) = n
}

class B extends A ({
  def foo(n: => Int): Int = if (n == 0) 1 else B.bar(foo(n - 1))
  foo(10)
})
```
The problem is the recursive call to class foo in the anonymous class that's created
for bar's call by name parameter. To resolve that call lambda lift tries to find member `foo' of B. But since `foo' is defined in the constructor, it is not a member of `B'.
