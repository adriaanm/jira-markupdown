Anonymous class can derive from serializable base class
(either via java.io.Serializable or @serializable).
Currently, there is no way to associate a serialVersionUID
with the anonymous class.
{code}
@serializable
trait Foo {
  def xy: Int
  override def toString: String = "Foo["+ xy + "]"
}
// Can not associate serialVersionUID here
val x = new Foo {
  def xy = 2
}
{code}
This was noted in Ticket SI-832. There were two problems
with 832. First it was marked as an enhancement.
If scalability is important to Scala, then being able to
detect during deserialization when there is a
serialVersionUID mismatch is a base capability - not
an enhancement. Secondly, it was stated that there was
a work around, create a named class. Well, there is
no need to even use Scala since the work around is to
use Java ... but Scala lets one do things in an easier
and, code-wise, more efficient manner - hence using
a name class is a Java-like work around and is not in
the spirit of Scala.

Proposal:

Add code to the Scala class tools/nsc/transform/CleanUp.scala
which adds a serialVersionUID to an anonymous class if
its base class is serializable. Something like:
{code}
case cdef @ ClassDef(mods, name, tparams, impl) =>
    val sym = cdef.symbol
    // is this an anonymous class?
    if (sym.isAnonymousClass && sym.parentHasAnnotation(SerializableAttr)) {
      sym addAnnotation serialVersionUIDAnnotation
    }
    super.transform(tree)
{code}
(About 90% down the file where a serialVersionUID is automatically
generated for anonymous functions.)

At some future time, Scala syntax can be changed to increase its
scalability by supporting the adding of serialVersionUID to
anonymous classes.
Until then, with the above change, during the preparation for
application code release, a post-compile stage can use
Java's serialver and class file editing scripts to set each
anonymous class' serialVersionUID to the value generated by
serialver. This will allow for the detection of application version
mismatches in distributed environments when using
serialization.
