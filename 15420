We end up imposing both inconvenience and confusion when we return collection.Map from standard methods, because you can't assign a collection.Map to an immutable.Map, which of course is what a plain old "Map "is.  There may be other places where this is an issue but this was the only one I saw on Traversable.

I already rewrote it like this:
{code}
  def groupBy[K](f: A => K): immutable.Map[K, Repr] = {
    val m = mutable.Map.empty[K, Builder[A, Repr]]
    for (elem <- this) {
      val key = f(elem)
      val bldr = m.getOrElseUpdate(key, newBuilder)
      bldr += elem
    }
    val b = immutable.Map.newBuilder[K, Repr]
    for ((k, v) <- m)
      b += ((k, v.result))
    
    b.result
  }
{code}
...and for now I will stack it up with my towering stack of patches waiting for 2.8 to ship.  But, as it brings a signature change, it'd be nice to do it now.
