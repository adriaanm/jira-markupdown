{code}
import scala.reflect.macros.Context
import language.experimental.macros

trait Impls {
  def impl(c: Context)(x: c.Expr[Any]) = x
}

object Macros extends Impls {
  def foo(x: Any) = macro impl
}
{code}

{code}
object Test extends App {
  import Macros._
  println(foo(42))
}
{code}

{code}
Macros_Test_2.scala:9: error: macro implementation not found: foo (the most common reason for that is that you cannot use macro implementations in the same compilation run that defines them)
if you do need to define macro implementations along with the rest of your program, consider two-phase compilation with -Xmacro-fallback-classpath in the second phase pointing to the output of the first phase
  println(foo(42))
             ^
one error found
{code}
