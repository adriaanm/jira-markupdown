I would be very interested in such a feature.

For now, in Java I am expected to use an aspect to avoid polluting my serialized business classes with technical stuff in a transversal thread safe manner (using transient fields and a transient lock with late initialization for each of them is ugly):
```scala
class A {

  @Cachable
  public B lazyMethod() {
    return new B();
  }

}
```

And the code of the aspect looking for method with @Cachable annotation invocation (I have also implemented a way to invalidate the cache but I don't know if it could be the point here):
```scala
public aspect CachingAspect {

	MethodCache methodCache = new MethodCache();
	WeakLockRepository lockRepo = new WeakLockRepository();
        LockRepository<Object> objectLockRepository = new LockRepository<Object>();

	Object around(): execution(* *(..)) && @annotation(org.openmole.commons.aspect.caching.Cachable) {
		
		Object object = thisJoinPoint.getThis();
		String method = thisJoinPointStaticPart.getSignature().toString();

		Object ret = methodCache.getCachedMethodResult(object, method);
		
		if(ret !=  null) return ret;

		Lock lock = lockRepo.getLockFor(object, method);

		lock.lock();
		try {		
			objectLockRepository.lock(object);

                        try{
                            ret = methodCache.getCachedMethodResult(object, method);
                            if(ret == null) {
				ret = proceed();
				methodCache.putCachedMethodResult(object, method, ret);
                            }
                            return ret;
                        } finally {
                            objectLockRepository.unlock(object);
                        }
			
		} finally {
			lock.unlock();
		}
	}

        before() : execution(* *(..)) && @annotation(org.openmole.commons.aspect.caching.ChangeState) {
             Object object = thisJoinPoint.getThis();
             objectLockRepository.lock(object);

              try {
                methodCache.clear(object);
                softMethodCache.clear(object);
             } finally {
		objectLockRepository.unlock(object);
             }
  	}
}
```

Basically the method cache is a WeakHashMap of Object -> Map( Method -> Cache ).

This is pretty inefficient because it requires accessing 2ï¿½maps for a getting to the cached object.
