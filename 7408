The failure mode changed in 2.10.0. In https://github.com/scala/scala/pull/826, the return type of the synthetic copy method was inferred, rather than explicitly provided. If the type parameter is named `_`, it is inferred as `CaseClass[Any]`.
```scala
~/code/scala2 scala210
Welcome to Scala version 2.10.0-20121024-085118-2c554249fd (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_27).
Type in expressions to have them evaluated.
Type :help for more information.

scala> case class CaseTest[_](someData:String)
defined class CaseTest

scala> new CaseTest[Int]("").copy()
res0: CaseTest[Any] = CaseTest()

scala> case class CaseTest[A](someData:String)
defined class CaseTest

scala> new CaseTest[Int]("").copy()
res1: CaseTest[Nothing] = CaseTest()

scala> case class CaseTest[_](someData:String)
defined class CaseTest

scala> new CaseTest[Int]("").copy[Int]()
res2: CaseTest[Any] = CaseTest()

scala> case class CaseTest[A](someData:String)
defined class CaseTest

scala> new CaseTest[Int]("").copy[Int]()
res3: CaseTest[Int] = CaseTest()

scala> case class CaseTest[_](someData:String)
defined class CaseTest

scala> val x = CaseTest[Int]("")
x: CaseTest[Any] = CaseTest()

scala> x.copy
                                               def copy[_](someData: String): CaseTest[Any]  
```

I figured I'd be able to trip up Value Classes with this, but while we can generate some funny looking signatures, they seem to go unnoticed.
```scala
scala> class CCC[_](val value: String) extends AnyVal { def foo[_]: Option[`_`] = None }
...
          final def foo$extension[_ >: Nothing <: Any, _ >: Nothing <: Any]($this: CCC[_]): Option[Any] = scala.None;
```

That sort of signature comes up without the _, of course, but seems to be innocuous as everything is symful by that stage.
```scala
scala> class C[A](val value: String) extends AnyVal { def foo[A] = this }
...
          final def foo$extension[A >: Nothing <: Any, A >: Nothing <: Any]($this: C[A]): C[A] = $this;
```
