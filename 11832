I'm testing with a 2.11.8 snapshot (7a950df664405ff9abe5068f70f6e2e6d586c541), and OpenJDK 1.8.0_66-internal-b01.

Without the `() => x`, `javap` gives:
```
public class scala.reflect.FieldAccessTest$TestClass {
  private final int x;
  ...
  private int x();
  ...
}
```

With it:
```
  private final int scala$reflect$FieldAccessTest$TestClass$$x;
  ...
  public int scala$reflect$FieldAccessTest$TestClass$$x();
```

`JavaMirrors.fieldToJava()` is called from `reflectField()`, and it calls `jclazz getDeclaredField expandedName(fld)` in line 1261:
```scala
def fieldToJava(fld: TermSymbol): jField = fieldCache.toJava(fld) {
  val jclazz = classToJava(fld.owner.asClass)
  val jname = fld.name.dropLocal.toString
  try jclazz getDeclaredField jname
  catch {
    case ex: NoSuchFieldException => jclazz getDeclaredField expandedName(fld)
  }
}
```

Inside `Class.getDeclaredField()`, `Class.searchFields()` is called and fails to match the expanded name `scala$reflect$FieldAccessTest$TestClass$$x` to the interned name on line 2958:
```scala
private static Field searchFields(Field[] fields, String name) {
    String internedName = name.intern();
    for (int i = 0; i < fields.length; i++) {
        if (fields[i].getName() == internedName) {
            return getReflectionFactory().copyField(fields[i]);
        }
    }
    return null;
}
```

Which leads me to believe that the expanded names are not being interned.
