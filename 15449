{code}
scala>trait C[A]
defined trait C

scala>

scala>def ImplicitParamCA[CC[A], A](implicit ev: C[A]) {
     | implicitly[C[A]]
     |}
<console>:7: error: could not find implicit value for parameter e: C[A]
           implicitly[C[A]]
                     ^

scala>def ImplicitParamCA[CC[X], A](implicit ev: C[A]) {
     | implicitly[C[A]]
     |}
ImplicitParamCA: [CC[X],A](implicit ev: C[A])Unit
{code}

*Section 4.4:*

  The above scoping restrictions are generalized to the case of nested type parameter clauses, which declare higher-order type parameters. Higher-order type parame- ters (the type parameters of a type parameter t ) are only visible in their immediately surrounding parameter clause (possibly including clauses at a deeper nesting level) and in the bounds of t . Therefore, their names must only be pairwise different from the names of other visible parameters. Since the names of higher-order type pa- rameters are thus often irrelevant, they may be denoted with a ‘_’, which is nowhere visible.

----

By the way, shouldn't the syntax description in this section mention View Bounds? It mentions Context Bounds with a reference to a later section.
