I spotted some possibly inconsistent behaviour when passing companion objects as the shorthand parameter to functions accepting a block, such as `map`, compared to when passing the automatically created companion object of a case class. StackOverflow question can be found [here](http://stackoverflow.com/q/9683133/586748).

Basically, it works when the class is a case class, but not if it's not, and the companion object is manually defined.

For example
```java
class Model
class ModelWrapper(val m: Model)
object ModelWrapper { def apply(model: Model) = new ModelWrapper(model) }

val m1 = new Model; val m2 = new Model; val m3 = new Model

List(m1, m2, m3).map(ModelWrapper)

<console>:14: error: type mismatch;
 found   : ModelWrapper.type (with underlying type object ModelWrapper)
 required: Model => ?
                  List(m1, m2, m3).map(ModelWrapper)

//however List(m1, m2, m3).map(ModelWrapper.apply) and List(m1, m2, m3).map(ModelWrapper.(_)) both work
```

Whereas with a case class there's no problem 
```java
class Model
case class ModelWrapper(model: Model) 

val m1 = new Model; val m2 = new Model; val m3 = new Model

List(m1, m2, m3).map(ModelWrapper)
```

Serj on SO posted a workaround - making the companion object extend Function[Model, ModelWrapper]. However, according to the Scala specification, as far as I can see, the built-in companion object doesn't extend Function - should this difference in behaviour exist?
