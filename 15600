Mr. Rytz was so fast he closed scala/bug#3766 before I could add my observations, so we win a new ticket.

If WrappedArray[T] is the representation of polymorphic arrays, then shouldn't this work? (It is, isn't it? I can't find any other candidate for the title.  Not that the result is any different for ArraySeq etc.) The doc comment ("Equivalent to System.arraycopy, except that it works also for polymorphic arrays") suggests it is the only reason for it to exist.
```scala
scala> val x1 = scala.collection.mutable.WrappedArray.make[Int](new Array[Int](5))
x1: scala.collection.mutable.WrappedArray[Int] = WrappedArray(0, 0, 0, 0, 0)

scala> val x2 = scala.collection.mutable.WrappedArray.make[Int](new Array[Int](5))
x2: scala.collection.mutable.WrappedArray[Int] = WrappedArray(0, 0, 0, 0, 0)

scala> Array.copy(x1, 0, x2, 0, 1)
scala.MatchError: WrappedArray(0, 0, 0, 0, 0)  
```

It looks to me that the only case slowcopy is catching is copying from one actual Array to another and boxing or unboxing is required, but does nothing useful for non-Array representations.  For sure the methods in ScalaRunTime will all throw exceptions on any non-array parameter.
```scala
scala> val x1 = Array.fill(5)(42)   
x1: Array[Int] = Array(42, 42, 42, 42, 42)

scala> val x2 = new Array[AnyRef](5)
x2: Array[AnyRef] = Array(null, null, null, null, null)

// System.arraycopy would ArrayStoreException here
scala> Array.copy(x1, 0, x2, 0, 5)  

scala> x2
res34: Array[AnyRef] = Array(42, 42, 42, 42, 42)
```
