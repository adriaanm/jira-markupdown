```scala
trait Foo[@specialized A, Repr] {
  self: Repr =>
}
trait Bar[A] extends Foo[A, Object] { }
```
```
error: scala.reflect.internal.Types$TypeError: illegal inheritance;
 self-type Foo$mcV$sp[Repr] does not conform to Foo[Unit,Repr]'s selftype Foo[Unit,Repr] with Repr
	at scala.tools.nsc.typechecker.Contexts$Context.error(Contexts.scala:283)
	at scala.tools.nsc.typechecker.Infer$Inferencer.error(Infer.scala:207)
	at scala.tools.nsc.typechecker.Typers$Typer.validateParentClass$1(Typers.scala:1293)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$validateParentClasses$1.apply(Typers.scala:1304)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$validateParentClasses$1.apply(Typers.scala:1304)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
```
I tried fixing this by setting typeOfThis on the specialized classes to include the self type of the original class, but I didn't get anywhere.  Suppressing the conformance check in Typers only moves the crash further downfield.

This issue prevents the specialization of e.g. LinearSeqOptimized.
