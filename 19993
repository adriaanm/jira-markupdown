Similar to SI-1209, SI-1814 and SI-801, except the workaround of specifying the return type of the method doesn't work because it's an implicit object, not an implicit method.

{code}
case class MyClass()

object BugReport {
  implicitly[Ordering[MyClass]] // error: No implicit Ordering defined for MyClass.
}

// if this module is moved above BugReport, the compilation error disappears
object MyClass {
  implicit object MyOrdering extends Ordering[MyClass] {
    def compare(x: MyClass, y: MyClass) = ???
  }
}
{code}
