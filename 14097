I noticed that method parameter annotation in a Scala object are set in the singleton object instance, and not in the static method of the "facade".

For example, that code:

{code}
object ObjectTestAnnotation {
 //@InjectService is a simple java annotation with Runtime retention, see at the end for details
 def methodWithParamAnnot(@InjectService("service id") s:String) = s
}
{code}

Compile into two classes, ObjectTestAnnotation and ObjectTestAnnotation$$ which look like that:
{code}
% javap test.ObjectTestAnnotation
....
 public static final java.lang.String methodWithParamAnnot(java.lang.String);
...

% javap test.ObjectTestAnnotation\$$
....
 public java.lang.String methodWithParamAnnot(java.lang.String);
....
{code}


In that example, the @InjectService annotation is actually set in ObjectTestAnnotation$$#methodWithParamAnnot and not in ObjectTestAnnotation#methodWithParamAnnot.

That means that this differ from the Java equivalent code, where it is the static method that has the annotated parameter.

This is not a problem if one query the reflexion API (call seems to be well forwarded to the object), but it's problematic when one use a bytecode manipulation library, like Javassist - and especially when it's done in a third party framework for which one can't tell to look into Foo or Foo$$ depending of the method.
In this case, the framework directly look for the "ObjectTestAnnotation.class" file, find the static method but without the annotation.


I join a test example (that use maven). Run the "run.sh" script build and run it, but the more interesting part is the source code that show how the reflexion API and Javassist differ.
