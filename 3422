Well I think you can get pretty close:
(also use three curly braces to surround syntax, see the wiki formatting)
```scala
object SqlDsl {
  case object *
  def SELECT(all : *.type) : SelectClause = SelectAllClause
  def SELECT(sels : Symbol*) : SelectClause = SelectSomeClause(sels)
  sealed trait SelectClause {
    def FROM(from : Symbol) : Query = Query(this, FromClause(from))
  }
  case object SelectAllClause extends SelectClause
  case class SelectSomeClause(sels : Seq[Symbol]) extends SelectClause
  case class Query(selectClause : SelectClause, fromClause : FromClause)
  case class FromClause(from : Symbol)
}
```
--usage:
you have to have a parens around the items in the select call, though I don't see it as being all that terrible. I think that maybe you can get even better with perhaps 
```scala
import SqlDsl._
println(SELECT(*) FROM 'User)
println(SELECT('Name, 'PreName) FROM 'User)
println(SELECT ('Name, 'PreName) FROM 'User)
```
yielding:
```scala
Query(SelectAllClause,FromClause('User))
Query(SelectSomeClause(Array('Name, 'PreName)),FromClause('User))
Query(SelectSomeClause(Array('Name, 'PreName)),FromClause('User))
```
