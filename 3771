Fun fun! Sometime between r21000 and RC1 the example reported above started working:
```scala
scala> scala.tools.nsc.io.ZipArchive.fromPath("/local/lib/java/winstone.jar") foreach println
/local/lib/java/winstone.jar(winstone/)
/local/lib/java/winstone.jar(META-INF/)
/local/lib/java/winstone.jar(jndi.properties)
/local/lib/java/winstone.jar(javax/)
```
However I only know this because I was trying to find out when pending/run/bug3150.scala starting throwing a verify error under -optimise.  When I started backtracking it quickly switched into this mixinImplClassMembers crasher.  I'm guessing they're not connected, but that the crasher was masking this bug.

It's definitely related to it claiming to be equal to null: if I change the equals method to "null != other" it no longer crashes.  I realize the language (now) requires you to be unequal to null, but the penalty for violating this should be inconsistent equality, not invalid bytecode.
```scala
object Test {
  case object Bob { override def equals(other: Any) = true }
  def f(x: Any) = x match { case Bob => Bob }
  
  def main(args: Array[String]): Unit = f(Bob)
}
```
```scala
% scalac -optimise -d /tmp pending/run/bug3150.scala ; scala -cp /tmp Test
java.lang.VerifyError: (class: Test$$, method: f signature: (Ljava/lang/Object;)LTest$$Bob$$;) Unable to pop operand off an empty stack
	at Test.main(bug3150.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
```
