Given the code below
```scala
object toto extends Application {
  @remote trait Foo {}
  object foo extends java.rmi.server.UnicastRemoteObject with Foo {
  }
}
```
the Scala compiler generates the class files:
```scala
toto.class
toto$$.class
toto$$foo$$.class
toto$$Foo.class
```
and the RMI compiler (Java 5 or 6) produces the following error:
```scala
> rmic -classpath $$SCALA_HOME/lib/scala-library.jar:/tmp -d /tmp toto\$$foo\$$
error: An error has occurred in the compiler; please file a bug report (http://java.sun.com/cgi-bin/bugreport.cgi).
sun.tools.java.CompilerError: getInnerClassField
    at sun.tools.java.ClassDefinition.getInnerClassMember(ClassDefinition.java:326)
    at sun.tools.java.ClassDefinition.extendsCanAccess(ClassDefinition.java:658)
    at sun.tools.javac.SourceClass.checkSupers(SourceClass.java:806)
    at sun.tools.javac.SourceClass.resolveTypeStructure(SourceClass.java:1226)
    at sun.tools.javac.SourceClass.basicCheck(SourceClass.java:1079)
    at sun.tools.java.ClassDeclaration.getClassDefinition(ClassDeclaration.java:134)
    at sun.rmi.rmic.Main.compileClass(Main.java:716)
    at sun.rmi.rmic.Main.compileAllClasses(Main.java:662)
    at sun.rmi.rmic.Main.doCompile(Main.java:556)
    at sun.rmi.rmic.Main.compile(Main.java:148)
    at sun.rmi.rmic.Main.main(Main.java:785)
1 error
```
The problem lies in the name mangling of Scala classes which terminates class names with a '$$'.

Workarounds with current naming scheme:[[BR]]
1) move `foo` to the top-level in the Scala source or[[BR]]
2) comment out the addition of the `InnerClass` section in the generated class file.
