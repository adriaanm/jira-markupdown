{code}
/*
 * Cerres (c) 2012 Eva Darulova
 */

import language.experimental.macros
import scala.reflect.macros.Context
import language.implicitConversions
import collection.mutable.ListBuffer
import collection.mutable.Stack


object Macros {

  case class Interval(xlo: Double, xhi: Double) {
    def *(y: Interval): Interval = this
  }

  def certify(f1: ((Double, Double) => Double), f2:((Double, Double) => Double), x1: Double,
    x2: Double): Array[Interval] = macro certify2_impl

  def certify2_impl(c: Context)(f1: c.Expr[(Double, Double) => Double],
    f2: c.Expr[(Double, Double) => Double], x1: c.Expr[Double], x2: c.Expr[Double]): c.Expr[Array[Interval]] = {
    import c.universe._

    val vectorTree = doubleVector2Scala(c)(List(x1.tree, x2.tree)) //c.Expr[DoubleVector]
    val derTree = multivariate2Derivatives(c)(List(f1, f2))
    c.Expr[Array[Interval]](reify(affine2SmartFloats(List(x1.splice, x2.splice),
      //error1(derTree.splice, vectorTree.splice))).tree)
      error2(vectorTree.splice))).tree)
  }

  //def error1(J: Array[Array[(Interval, Interval) => Interval]], x: DoubleVector): Array[Interval] = {
  def error2(x: DoubleVector): Array[Interval] = {
    new Array[Interval](2)
  }

  def doubleVector2Scala(c: Context)(v: List[c.Tree]): c.Expr[DoubleVector] = {
    import c.universe._
    val constructor = Select(New(Ident(newTypeName("DoubleVector"))), newTermName("<init>"))
    val body = array2Scala(c)(v)
    c.Expr[DoubleVector](Apply(constructor, List(Literal(Constant(v.size)), body)))
  }


  def affine2SmartFloats(x: List[Double], ints: Array[Interval]): Array[Interval] = {
    new Array[Interval](x.length)
  }

  private def multivariate2Derivatives(c: Context)(fncs: List[c.Expr[(Double, Double) => Double]])
  : c.Expr[Array[Array[(Interval, Interval) => Interval]]] = {
    import c.universe._

    // TODO: preprocess trees for.spliceuation
    val dim = fncs.length
    val f = new Array[Expression](dim)
    var params: List[String] = null

    var tmp = scala2Funktion(c)(fncs(0).tree)
    params = tmp.params
    f(0) = tmp.body

    for (i <- 1 until dim) {
      tmp = scala2Funktion(c)(fncs(i).tree)
      if (params != tmp.params) {
        c.error(c.enclosingPosition, "The parameters of the functions do not match!")
        return null
      }
      f(i) = tmp.body
    }
    val jacobian = new Array[Array[Expression]](dim)
    for (i <- 0 until dim) {
      jacobian(i) = new Array[Expression](dim)
      val f_i = f(i)
      for (j <- 0 until dim) {
        jacobian(i)(j) = f_i
      }
    }

    val derivatives = Jacobian(params, jacobian)
    val derTree = jacobian2ScalaFncs(c)(derivatives)
    derTree
  }

  class DoubleVector(dim: Int, data: Array[Double]) {
    def this(d: Int) = this(d, new Array[Double](d))

    def update(i: Int, y: Double) = data(i) = y
    def apply(i: Int) = data(i)
    override def toString: String = data.toList.toString

  }


  def scala2Funktion(c: Context)(f: c.Tree): Funktion = {
    import c.universe._
    f match {
      case Function(parameter, body) =>
        var params = ListBuffer[String]()
        for (p <- parameter) params += p.name.encoded
        Funktion(params.toList, scala2Expression(c)(body, params.toList))

    }
  }

  // We need to keep track which variables are given to the function, and which
  // are parameters... For those we need to find some way of getting the value
  def scala2Expression(c: Context)(e: c.Tree, vars: List[String]): Expression = {
    import c.universe._
    e match {
      case Ident(name) =>
        if (vars.contains(name.encoded)) Var(name.encoded)
        else Param(name.encoded)

      case Literal(c) => Const(c.doubleValue)

      case Select(This(clsName), ident) => Param(ident.encoded)

      case Apply(Select(lhs, name), args) =>
        name.encoded match {
          case "$plus" => Add(scala2Expression(c)(lhs, vars), scala2Expression(c)(args.head, vars))
          case "$minus" => Sub(scala2Expression(c)(lhs, vars), scala2Expression(c)(args.head, vars))
          case "$times" =>
            // Make sure constants are always left
            val right = scala2Expression(c)(args.head, vars)
            right match {
              case Const(d) => Mult(right, scala2Expression(c)(lhs, vars))
              case _ => Mult(scala2Expression(c)(lhs, vars), right)
            }
          case "$div" => Div(scala2Expression(c)(lhs, vars), scala2Expression(c)(args.head, vars))

          case _ =>
            c.error(c.enclosingPosition, "Unknown operation: " + c.universe.showRaw(e))
            return null
        }
      case _ =>
        c.error(c.enclosingPosition, "Tree not recognized: " + c.universe.showRaw(e))
        return null
    }
  }


  def jacobian2ScalaFncs(c: Context)(j: Jacobian): c.Expr[Array[Array[(Interval, Interval) => Interval]]] = {
    import c.universe._
    import Flag._
    val path =Select(Select(Ident(newTermName("base")), newTermName("interval")), newTermName("Interval")) //getPath(c)("Interval")

    val rowBuffer = ListBuffer[Tree]()
    for (row <- j.exprs) {
      val fncBuffer = ListBuffer[Tree]()
      for (e <- row) {
        val paramBuffer = ListBuffer[ValDef]()
        for (paramName <- j.params)
        paramBuffer += ValDef(Modifiers(PARAM), newTermName(paramName),
          Ident(newTypeName("Interval")), EmptyTree)
        val params = paramBuffer.toList
        val expr = expr2ScalaFnc(c)(e, path)
        fncBuffer += Function(params, expr)
      }
      rowBuffer += array2Scala(c)(fncBuffer.toList)
    }
    val body = array2Scala(c)(rowBuffer.toList)
    c.Expr[Array[Array[(Interval, Interval) => Interval]]](body)
  }

  def array2Scala(c: Context)(list: List[c.Tree]): c.Tree = {
    import c.universe._
    Apply(Select(Select(Ident(newTermName("scala")), newTermName("Array")), newTermName("apply")), list)
  }

  // If we have function from Double to Double, we don't need to wrap...
  def expr2ScalaFnc(c: Context)(expr: Expression, path: c.Tree): c.Tree = {
    import c.universe._
    expr match {
      case Const(d) => Apply(Select(path, newTermName("apply")), List(Literal(Constant(d))))

      case Var(n) => Ident(newTermName(n))
      case Param(n) => Ident(newTermName(n))
      case Neg(e) => Select(expr2ScalaFnc(c)(e, path), newTermName("unary_$minus"))
      case Add(l, r) =>
        Apply(Select(expr2ScalaFnc(c)(l, path), newTermName("$plus")),
          List(expr2ScalaFnc(c)(r, path)))
      case Sub(l, r) =>
        Apply(Select(expr2ScalaFnc(c)(l, path), newTermName("$minus")),
          List(expr2ScalaFnc(c)(r, path)))
      case Mult(l, r) =>
        Apply(Select(expr2ScalaFnc(c)(l, path), newTermName("$times")),
          List(expr2ScalaFnc(c)(r, path)))
      case Div(l, r) =>
        Apply(Select(expr2ScalaFnc(c)(l, path), newTermName("$div")),
          List(expr2ScalaFnc(c)(r, path)))

    }
  }

  case class Jacobian(params: List[String], exprs: Array[Array[Expression]]){ }

  case class Functions(params: List[String], exprs: Array[Expression]) {}

  // params are sorted in the order the parameters are given
  case class Funktion(params: List[String], body: Expression)

  sealed abstract class Expression {
    def +(e: Expression) = Add(this, e)
    def -(e: Expression) = Sub(this, e)
    def *(e: Expression) = Mult(this, e)
    def /(e: Expression) = Div(this, e)
    def unary_- = Neg(this)
  }

  case class Const(d: Double) extends Expression
  // bound variables
  case class Var(name: String) extends Expression
  // parameters of the function defined elsewhere
  // Need name at compile time, value at runtime...
  case class Param(name: String) extends Expression
  case class Add(l: Expression, r: Expression) extends Expression
  case class Neg(e: Expression) extends Expression
  case class Sub(l: Expression, r: Expression) extends Expression
  case class Mult(l: Expression, r: Expression) extends Expression
  case class Div(l: Expression, r: Expression) extends Expression
}
{code}

{code}
object MacroTest extends App {
  import Macros._

  // removing the wrapper of the method makes the bug disappear...
  def stressDistribution: Double = {

    val roots = Array(0.1565200696473004, 0.4933763741817787)
    //val smart = certify((x1: Double, x2: Double) => x1 * x2,(x1: Double, x2: Double) => x1 * x2,
    //  roots(0), roots(1))
    val smart: Array[Interval] = affine2SmartFloats(List.apply[Double](wrapDoubleArray(Array({roots(0); roots(1)}))), error2(new DoubleVector(2, Array(roots(0), wrapDoubleArray(Array({roots(1)}))))))
    //println(smart(0))
    //println(smart(1))
    0.0
  }
 }
{code}

{code}
myke compile C:\Projects\Kepler\sandbox\1\Test_2.scala 
git: branch = topic/weak-subtype, commit = 5e5f5bc89a adds weak_<:< to the API (Eugene Burmako, 21.08.2012 18:27:37 +02:00)
psi: filename = cmd.exe, arguments = /C c:\PROGRA~1\Java\JDK\bin\java.exe -cp "C:\Projects\Kepler\test\files\codelib\code.jar;C:\Projects\Kepler\lib\jline.jar;C:\Projects\Kepler\lib\fjbg.jar;C:\Projects\Kepler\build\locker\classes\compiler;C:\Projects\Kepler\build\asm\classes;C:\Projects\Kepler\build\libs\forkjoin.jar;C:\Projects\Kepler\build\locker\classes\reflect;C:\Projects\Kepler\build\locker\classes\library" -Dscala.usejavacp=true -Dscala.repl.vids=1 -Dscala.repl.autoruncode=C:\Users\xeno.by/.scala_autorun -Dscala.repl.maxprintstring=0 scala.tools.nsc.Main -deprecation -unchecked -Xexperimental -language:experimental.macros -Ymacro-debug-verbose -Xlog-implicits -Yshow-trees-compact -Yshow-trees-stringified -g:vars Test_2.scala, home = C:\Projects\Kepler\sandbox\1
looking for macro implementation: macro method certify
resolved implementation as Macros$.certify2_impl
loading implementation class: Macros$
macro classloader: initializing from -cp: List(file:/c:/PROGRA~1/Java/JDK/jre/lib/resources.jar, file:/c:/PROGRA~1/Java/JDK/jre/lib/rt.jar, file:/c:/PROGRA~1/Java/JDK/jre/lib/jsse.jar, file:/c:/PROGRA~1/Java/JDK/jre/lib/jce.jar, file:/c:/PROGRA~1/Java/JDK/jre/lib/charsets.jar, file:/c:/PROGRA~1/Java/JDK/jre/lib/ext/dnsns.jar, file:/c:/PROGRA~1/Java/JDK/jre/lib/ext/localedata.jar, file:/c:/PROGRA~1/Java/JDK/jre/lib/ext/sunjce_provider.jar, file:/C:/Projects/Kepler/test/files/codelib/code.jar, file:/C:/Projects/Kepler/lib/jline.jar, file:/C:/Projects/Kepler/lib/fjbg.jar, file:/C:/Projects/Kepler/build/locker/classes/compiler/, file:/C:/Projects/Kepler/build/asm/classes/, file:/C:/Projects/Kepler/build/libs/forkjoin.jar, file:/C:/Projects/Kepler/build/locker/classes/reflect/, file:/C:/Projects/Kepler/build/locker/classes/library/, file:/C:/Projects/Kepler/sandbox/1/./, file:/C:/PROGRA~2/QUICKT~1/QTSystem/QTJava.zip, file:/c:/PROGRA~1/Java/JDK16~1.0_3/lib/tools.jar, file:/C:/Program%20Files%20(x86)/QuickTime/QTSystem/QTJava.zip)
classloader is: scala.tools.nsc.util.ScalaClassLoader$URLClassLoader@13505258 of type class scala.tools.nsc.util.ScalaClassLoader$URLClassLoader with classpath [file:/c:/PROGRA~1/Java/JDK/jre/lib/resources.jar,file:/c:/PROGRA~1/Java/JDK/jre/lib/rt.jar,file:/c:/PROGRA~1/Java/JDK/jre/lib/jsse.jar,file:/c:/PROGRA~1/Java/JDK/jre/lib/jce.jar,file:/c:/PROGRA~1/Java/JDK/jre/lib/charsets.jar,file:/c:/PROGRA~1/Java/JDK/jre/lib/ext/dnsns.jar,file:/c:/PROGRA~1/Java/JDK/jre/lib/ext/localedata.jar,file:/c:/PROGRA~1/Java/JDK/jre/lib/ext/sunjce_provider.jar,file:/C:/Projects/Kepler/test/files/codelib/code.jar,file:/C:/Projects/Kepler/lib/jline.jar,file:/C:/Projects/Kepler/lib/fjbg.jar,file:/C:/Projects/Kepler/build/locker/classes/compiler/,file:/C:/Projects/Kepler/build/asm/classes/,file:/C:/Projects/Kepler/build/libs/forkjoin.jar,file:/C:/Projects/Kepler/build/locker/classes/reflect/,file:/C:/Projects/Kepler/build/locker/classes/library/,file:/C:/Projects/Kepler/sandbox/1/./,file:/C:/PROGRA~2/QUICKT~1/QTSystem/QTJava.zip,file:/c:/PROGRA~1/Java/JDK16~1.0_3/lib/tools.jar,file:/C:/Program%20Files%20(x86)/QuickTime/QTSystem/QTJava.zip] and parent being sun.misc.Launcher$AppClassLoader@546b97fd of type class sun.misc.Launcher$AppClassLoader with classpath [file:/C:/Projects/Kepler/test/files/codelib/code.jar,file:/C:/Projects/Kepler/lib/jline.jar,file:/C:/Projects/Kepler/lib/fjbg.jar,file:/C:/Projects/Kepler/build/locker/classes/compiler/,file:/C:/Projects/Kepler/build/asm/classes/,file:/C:/Projects/Kepler/build/libs/forkjoin.jar,file:/C:/Projects/Kepler/build/locker/classes/reflect/,file:/C:/Projects/Kepler/build/locker/classes/library/] and parent being sun.misc.Launcher$ExtClassLoader@63c78e57 of type class sun.misc.Launcher$ExtClassLoader with classpath [file:/C:/Program%20Files/Java/jdk/jre/lib/ext/dnsns.jar,file:/C:/Program%20Files/Java/jdk/jre/lib/ext/localedata.jar,file:/C:/Program%20Files/Java/jdk/jre/lib/ext/sunjce_provider.jar] and parent being primordial classloader with boot classpath [c:\PROGRA~1\Java\JDK\jre\lib\resources.jar;c:\PROGRA~1\Java\JDK\jre\lib\rt.jar;c:\PROGRA~1\Java\JDK\jre\lib\sunrsasign.jar;c:\PROGRA~1\Java\JDK\jre\lib\jsse.jar;c:\PROGRA~1\Java\JDK\jre\lib\jce.jar;c:\PROGRA~1\Java\JDK\jre\lib\charsets.jar;c:\PROGRA~1\Java\JDK\jre\lib\modules\jdk.boot.jar;c:\PROGRA~1\Java\JDK\jre\classes]
successfully loaded macro impl as (Macros$@1ca37c6a, public scala.reflect.base.Exprs$Expr Macros$.certify2_impl(scala.reflect.macros.Context,scala.reflect.base.Exprs$Expr,scala.reflect.base.Exprs$Expr,scala.reflect.base.Exprs$Expr,scala.reflect.base.Exprs$Expr))
calculateUndetparams: Set()
performing macro expansion Macros.certify(((x1: Double, x2: Double) => x1.*(x2)), ((x1: Double, x2: Double) => x1.*(x2)), roots.apply(0), roots.apply(1)) at source-C:\Projects\Kepler\sandbox\1\Test_2.scala,line-9,offset=241
context: MacroContext(certify@source-C:\Projects\Kepler\sandbox\1\Test_2.scala,line-9,offset=241 +0)
argss: List(List(Expr[Nothing](((x1: Double, x2: Double) => x1.*(x2))), Expr[Nothing](((x1: Double, x2: Double) => x1.*(x2))), Expr[Nothing](roots.apply(0)), Expr[Nothing](roots.apply(1))))
binding: MacroImplBinding(Macros$,certify2_impl,List(-1, -1, -1, -1, -1),List())
preparedArgss: List(List(Expr[Nothing](((x1: Double, x2: Double) => x1.*(x2))), Expr[Nothing](((x1: Double, x2: Double) => x1.*(x2))), Expr[Nothing](roots.apply(0)), Expr[Nothing](roots.apply(1))), List())
original:
Macros.this.affine2SmartFloats(immutable.this.List.apply(roots.apply(0), roots.apply(1)), Macros.this.error2(new DoubleVector(2, scala.Array.apply(roots.apply(0), roots.apply(1)))))
Apply(Select(This(newTypeName("Macros")), newTermName("affine2SmartFloats")), List(Apply(Select(Select(This(newTypeName("immutable")), newTermName("List")), newTermName("apply")), List(Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(0)))), Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(1)))))), Apply(Select(This(newTypeName("Macros")), newTermName("error2")), List(Apply(Select(New(Ident(newTypeName("DoubleVector"))), nme.CONSTRUCTOR), List(Literal(Constant(2)), Apply(Select(Select(Ident(newTermName("scala")), newTermName("Array")), newTermName("apply")), List(Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(0)))), Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(1))))))))))))
typechecking against macro def return type Array[Macros.Interval]: Macros.this.affine2SmartFloats(immutable.this.List.apply(roots.apply(0), roots.apply(1)), Macros.this.error2(new DoubleVector(2, scala.Array.apply(roots.apply(0), roots.apply(1)))))
undetParam added: type A
undetParam inferred: type A as Double
successfully typechecked against macro def return type Array[Macros.Interval]:
Macros.this.affine2SmartFloats(immutable.this.List.apply[Double](roots.apply(0), roots.apply(1)), Macros.this.error2(new Macros.DoubleVector(2, scala.Array.apply(roots.apply(0), roots.apply(1)))))
Macros.this.affine2SmartFloats(immutable.this.List.apply[Double](roots.apply(0), roots.apply(1)), Macros.this.error2(new Macros.DoubleVector(2, scala.Array.apply(roots.apply(0), roots.apply(1)))))
typechecking against expected type ?: Macros.this.affine2SmartFloats(immutable.this.List.apply(roots.apply(0), roots.apply(1)), Macros.this.error2(new DoubleVector(2, scala.Array.apply(roots.apply(0), roots.apply(1)))))
successfully typechecked against expected type ?:
Macros.this.affine2SmartFloats(immutable.this.List.apply[Double](roots.apply(0), roots.apply(1)), Macros.this.error2(new Macros.DoubleVector(2, scala.Array.apply(roots.apply(0), roots.apply(1)))))
Macros.this.affine2SmartFloats(immutable.this.List.apply[Double](roots.apply(0), roots.apply(1)), Macros.this.error2(new Macros.DoubleVector(2, scala.Array.apply(roots.apply(0), roots.apply(1)))))

     while compiling: Test_2.scala
        during phase: erasure
     library version: version 2.10.0-20120821-082153-3764275901
    compiler version: version 2.10.0-20120821-082153-3764275901
  reconstructed args: -Ymacro-debug-verbose -Xlog-implicits -unchecked -deprecation -language experimental.macros -Yshow-trees-stringified -Yoverride-vars -Xexperimental -Yshow-trees-compact -Yoverride-objects -Yinfer-argument-types

  last tree to typer: ArrayValue
              symbol: null
   symbol definition: null
                 tpe: Array[Double]
       symbol owners: 
      context owners: value smart -> method stressDistribution -> object MacroTest -> package <empty>

== Enclosing template or block ==

def stressDistribution(): Double = {
  val roots: Array[Double] = scala.Array.apply(0.1565200696473004, scala.this.Predef.wrapDoubleArray(Array[Double]{0.4933763741817787}));
  val smart: Array[Macros.Interval] = Macros.this.affine2SmartFloats(immutable.this.List.apply[Double](scala.this.Predef.wrapDoubleArray(Array[Double]{roots.apply(0), roots.apply(1)})), Macros.this.error2(new Macros.DoubleVector(2, scala.Array.apply(roots.apply(0), scala.this.Predef.wrapDoubleArray(Array[Double]{roots.apply(1)})))));
  0.0
}
DefDef(Modifiers(), newTermName("stressDistribution"), List(), List(List()), TypeTree().setOriginal(Select(Ident(scala), scala.Double)), Block(List(ValDef(Modifiers(), newTermName("roots"), TypeTree(), Apply(Select(Select(Ident(scala), scala.Array), newTermName("apply")), List(Literal(Constant(0.1565200696473004)), Apply(Select(Select(This(newTypeName("scala")), scala.Predef), newTermName("wrapDoubleArray")), List(ArrayValue(TypeTree(), List(Literal(Constant(0.4933763741817787))))))))), ValDef(Modifiers(), newTermName("smart"), TypeTree(), Apply(Select(This(newTypeName("Macros")), newTermName("affine2SmartFloats")), List(Apply(TypeApply(Select(Select(This(newTypeName("immutable")), scala.collection.immutable.List), newTermName("apply")), List(TypeTree())), List(Apply(Select(Select(This(newTypeName("scala")), scala.Predef), newTermName("wrapDoubleArray")), List(ArrayValue(TypeTree(), List(Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(0)))), Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(1)))))))))), Apply(Select(This(newTypeName("Macros")), newTermName("error2")), List(Apply(Select(New(TypeTree()), nme.CONSTRUCTOR), List(Literal(Constant(2)), Apply(Select(Select(Ident(scala), scala.Array), newTermName("apply")), List(Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(0)))), Apply(Select(Select(This(newTypeName("scala")), scala.Predef), newTermName("wrapDoubleArray")), List(ArrayValue(TypeTree(), List(Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(1)))))))))))))))))), Literal(Constant(0.0))))
error: 
     while compiling: Test_2.scala
        during phase: erasure

== Expanded type of tree ==

TypeRef(
  TypeSymbol(
     library version: version 2.10.0-20120821-082153-3764275901
    final class Array[T] extends Serializable with Cloneable
  )
  args = List(
    compiler version: version 2.10.0-20120821-082153-3764275901
  reconstructed args: -Ymacro-debug-verbose -Xlog-implicits -unchecked -deprecation -language experimental.macros -Yshow-trees-stringified -Yoverride-vars -Xexperimental -Yshow-trees-compact -Yoverride-objects -Yinfer-argument-types
    TypeRef(TypeSymbol(final abstract class Double extends AnyVal))
  )

  last tree to typer: ArrayValue
              symbol: null
)

unhandled exception while transforming Test_2.scala
   symbol definition: null
                 tpe: Array[Double]
       symbol owners: 
      context owners: value smart -> method stressDistribution -> object MacroTest -> package <empty>

== Enclosing template or block ==

def stressDistribution(): Double = {
  val roots: Array[Double] = scala.Array.apply(0.1565200696473004, scala.this.Predef.wrapDoubleArray(Array[Double]{0.4933763741817787}));
  val smart: Array[Macros.Interval] = Macros.this.affine2SmartFloats(immutable.this.List.apply[Double](scala.this.Predef.wrapDoubleArray(Array[Double]{roots.apply(0), roots.apply(1)})), Macros.this.error2(new Macros.DoubleVector(2, scala.Array.apply(roots.apply(0), scala.this.Predef.wrapDoubleArray(Array[Double]{roots.apply(1)})))));
  0.0
}
DefDef(Modifiers(), newTermName("stressDistribution"), List(), List(List()), TypeTree().setOriginal(Select(Ident(scala), scala.Double)), Block(List(ValDef(Modifiers(), newTermName("roots"), TypeTree(), Apply(Select(Select(Ident(scala), scala.Array), newTermName("apply")), List(Literal(Constant(0.1565200696473004)), Apply(Select(Select(This(newTypeName("scala")), scala.Predef), newTermName("wrapDoubleArray")), List(ArrayValue(TypeTree(), List(Literal(Constant(0.4933763741817787))))))))), ValDef(Modifiers(), newTermName("smart"), TypeTree(), Apply(Select(This(newTypeName("Macros")), newTermName("affine2SmartFloats")), List(Apply(TypeApply(Select(Select(This(newTypeName("immutable")), scala.collection.immutable.List), newTermName("apply")), List(TypeTree())), List(Apply(Select(Select(This(newTypeName("scala")), scala.Predef), newTermName("wrapDoubleArray")), List(ArrayValue(TypeTree(), List(Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(0)))), Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(1)))))))))), Apply(Select(This(newTypeName("Macros")), newTermName("error2")), List(Apply(Select(New(TypeTree()), nme.CONSTRUCTOR), List(Literal(Constant(2)), Apply(Select(Select(Ident(scala), scala.Array), newTermName("apply")), List(Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(0)))), Apply(Select(Select(This(newTypeName("scala")), scala.Predef), newTermName("wrapDoubleArray")), List(ArrayValue(TypeTree(), List(Apply(Select(Ident(newTermName("roots")), newTermName("apply")), List(Literal(Constant(1)))))))))))))))))), Literal(Constant(0.0))))

== Expanded type of tree ==

TypeRef(
  TypeSymbol(
    final class Array[T] extends Serializable with Cloneable
  )
  args = List(
    TypeRef(TypeSymbol(final abstract class Double extends AnyVal))
  )
)

uncaught exception during compilation: java.lang.NullPointerException
error: java.lang.NullPointerException
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.preEraseApply(Erasure.scala:1037)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.preErase(Erasure.scala:1095)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1170)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:659)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1160)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:659)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1160)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:659)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1160)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:659)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1160)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.internal.Trees$$anonfun$itransform$1.apply(Trees.scala:1170)
	at scala.reflect.internal.Trees$$anonfun$itransform$1.apply(Trees.scala:1169)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1168)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:677)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:675)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:675)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1179)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.internal.Trees$$anonfun$itransform$2.apply(Trees.scala:1176)
	at scala.reflect.internal.Trees$$anonfun$itransform$2.apply(Trees.scala:1174)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1173)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1178)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:677)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:675)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:675)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1217)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.scala$tools$nsc$transform$TypingTransformers$TypingTransformer$$super$transform(TypingTransformers.scala:44)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform$1.apply(TypingTransformers.scala:44)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform$1.apply(TypingTransformers.scala:44)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:44)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer.transformTemplate(Trees.scala:661)
	at scala.reflect.internal.Trees$$anonfun$itransform$4.apply(Trees.scala:1221)
	at scala.reflect.internal.Trees$$anonfun$itransform$4.apply(Trees.scala:1220)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1219)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:677)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:675)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:675)
	at scala.reflect.internal.Trees$$anonfun$itransform$7.apply(Trees.scala:1239)
	at scala.reflect.internal.Trees$$anonfun$itransform$7.apply(Trees.scala:1239)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1238)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.scala$tools$nsc$transform$TypingTransformers$TypingTransformer$$super$transform(TypingTransformers.scala:44)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform$2.apply(TypingTransformers.scala:46)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform$2.apply(TypingTransformers.scala:46)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:46)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer.transform(Erasure.scala:1192)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer.transform(Erasure.scala:807)
	at scala.tools.nsc.ast.Trees$Transformer.transformUnit(Trees.scala:227)
	at scala.tools.nsc.transform.Transform$Phase.apply(Transform.scala:30)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:455)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:422)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:422)
	at scala.collection.Iterator$class.foreach(Iterator.scala:726)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1155)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:422)
	at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1566)
	at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1540)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:1536)
	at scala.tools.nsc.Global$Run.compile(Global.scala:1646)
	at scala.tools.nsc.Driver.doCompile(Driver.scala:33)
	at scala.tools.nsc.Main$.doCompile(Main.scala:79)
	at scala.tools.nsc.Driver.process(Driver.scala:54)
	at scala.tools.nsc.Driver.main(Driver.scala:67)
	at scala.tools.nsc.Main.main(Main.scala)

Exception in thread "main" java.lang.NullPointerException
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.preEraseApply(Erasure.scala:1037)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.preErase(Erasure.scala:1095)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1170)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:659)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1160)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:659)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1160)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:659)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1160)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformTrees$1.apply(Trees.scala:659)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformTrees(Trees.scala:659)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1160)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.internal.Trees$$anonfun$itransform$1.apply(Trees.scala:1170)
	at scala.reflect.internal.Trees$$anonfun$itransform$1.apply(Trees.scala:1169)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1168)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:677)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:675)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:675)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1179)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.internal.Trees$$anonfun$itransform$2.apply(Trees.scala:1176)
	at scala.reflect.internal.Trees$$anonfun$itransform$2.apply(Trees.scala:1174)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1173)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1178)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:677)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:675)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:675)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1217)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.scala$tools$nsc$transform$TypingTransformers$TypingTransformer$$super$transform(TypingTransformers.scala:44)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform$1.apply(TypingTransformers.scala:44)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform$1.apply(TypingTransformers.scala:44)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:44)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer.transformTemplate(Trees.scala:661)
	at scala.reflect.internal.Trees$$anonfun$itransform$4.apply(Trees.scala:1221)
	at scala.reflect.internal.Trees$$anonfun$itransform$4.apply(Trees.scala:1220)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1219)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:48)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:933)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:677)
	at scala.reflect.api.Trees$Transformer$$anonfun$transformStats$1.apply(Trees.scala:675)
	at scala.collection.immutable.List.loop$1(List.scala:164)
	at scala.collection.immutable.List.mapConserve(List.scala:180)
	at scala.reflect.api.Trees$Transformer.transformStats(Trees.scala:675)
	at scala.reflect.internal.Trees$$anonfun$itransform$7.apply(Trees.scala:1239)
	at scala.reflect.internal.Trees$$anonfun$itransform$7.apply(Trees.scala:1239)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:19)
	at scala.reflect.internal.Trees$class.itransform(Trees.scala:1238)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.internal.SymbolTable.itransform(SymbolTable.scala:12)
	at scala.reflect.api.Trees$Transformer.transform(Trees.scala:656)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.scala$tools$nsc$transform$TypingTransformers$TypingTransformer$$super$transform(TypingTransformers.scala:44)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform$2.apply(TypingTransformers.scala:46)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer$$anonfun$transform$2.apply(TypingTransformers.scala:46)
	at scala.reflect.api.Trees$Transformer.atOwner(Trees.scala:684)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:34)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.atOwner(TypingTransformers.scala:28)
	at scala.tools.nsc.transform.TypingTransformers$TypingTransformer.transform(TypingTransformers.scala:46)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer$$anon$1.transform(Erasure.scala:1182)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer.transform(Erasure.scala:1192)
	at scala.tools.nsc.transform.Erasure$ErasureTransformer.transform(Erasure.scala:807)
	at scala.tools.nsc.ast.Trees$Transformer.transformUnit(Trees.scala:227)
	at scala.tools.nsc.transform.Transform$Phase.apply(Transform.scala:30)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:455)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:422)
	at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:422)
	at scala.collection.Iterator$class.foreach(Iterator.scala:726)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1155)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:422)
	at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1566)
	at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1540)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:1536)
	at scala.tools.nsc.Global$Run.compile(Global.scala:1646)
	at scala.tools.nsc.Driver.doCompile(Driver.scala:33)
	at scala.tools.nsc.Main$.doCompile(Main.scala:79)
	at scala.tools.nsc.Driver.process(Driver.scala:54)
	at scala.tools.nsc.Driver.main(Driver.scala:67)
	at scala.tools.nsc.Main.main(Main.scala)
{code}
