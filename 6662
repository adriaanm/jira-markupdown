"Type aliases can't have companion objects" unfortunately doesn't clarify much for whomever may attempt this.  The precise behavior and relationship of a type alias and a value of the same name, compiled separately or together, is what is at issue, especially if the type alias is defined in a package object.  Also at issue is the feasibility of implementation: it is undesirable to have prohibitions which we cannot or will not recognize at compile time and which manifest as mysterious errors.

I know you don't mean "type aliases can't share a name with a term" because that would break the standard library in a hundred places.  So I take it you mean "type aliases and terms of the same name have no special relationship."
