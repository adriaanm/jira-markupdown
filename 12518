I found this surprising too:

{code:scala}
def foo(t1: List[T], t2: List[T]) = (t1, t2) match {
  case (Nil, Nil) => ()
}
{code}

This code issues a warning:
{code}[warn] It would fail on the following inputs: (List(_), List(_)), (List(_), Nil), (Nil, List(_))}{code}

But this code issues no warnings:

{code:scala}
def foo(t1: List[T], t2: List[T]) = (t1, t2) match {
  case (Nil, Nil) => ()
  case (List(_), List(_)) => ()
}
{code}

even though there are still missing cases.

Do you think it's related?
