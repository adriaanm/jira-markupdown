It seems that the compiler infers Nothing when neither the variable type or the generic parameter type is specified in a function call. This issue might be related to #SI-1754

There's a test case to reproduce the issue:
```scala
import org.scalatest.FunSuite

class BindingTest extends FunSuite {

  test("Dynamic binding test") {
    proc()
    val foo = proc()
    assert(foo == "test")
  }

  def proc[T](): T = "test".asInstanceOf[T]
}
```

This test throws an exception: java.lang.ClassCastException: java.lang.String cannot be cast to scala.runtime.Nothing$

.asInstanceOf[T] casts the generic type properly and proc() returns a String (the invocation to proc() works fine), but it fails to assign the variable foo because foo type is inferred as Nothing.

Is it the expected behaviour?

I think the compiler could give your a warning, because it causes a very weird exception in runtime.

And I don't understand why Nothing is inferred instead of AnyRef, is there a design reason for that?
