In 2.7.0-RC1 I get a deadlock when shutting down the Scala Actors system
with this program.  The deadlock is not reproducible 100% of the time, but
I get it on JDK6 on Linux and JDK5 on Mac OS X around 50% of the time.
```scala
import scala.actors.Actor
import scala.actors.Actor._
import scala.actors.Scheduler

case class Foo
case class Bar
case class Exit

object Test extends Application
{
  System.err.println("starting 1")
  val a = actor {
    try {
      while (true) {
        System.err.println("looping")
        val z = receive {
          case f : Foo => { System.err.println(f); 1 }
          case b : Bar => { System.err.println(b); 2 }
          case _ : Exit => { System.err.println("exiting"); self.exit; 3 }
          case x : AnyRef => { System.err.println(x.getClass().getName()); 4 }
        }
        System.err.println("receive returned " + z)
      }
      System.err.println("got here")
    }
    catch {
      case e => System.err.println(e)
    }
  }

  System.err.println("starting 2")
  a ! Foo()
  a ! Bar()
  System.err.println("starting 3")
  a ! Exit()

  //  Thread.sleep(500)
  System.err.println("Scheduler.snapshot")
  Scheduler.snapshot
  System.err.println("Scheduler.shutdown")
  Scheduler.shutdown
  System.err.println("Actor.clearSelf")
  Actor.clearSelf

  System.err.println("starting 4")
}
```
```scala
"Thread-0" prio=5 tid=0x0100d4e0 nid=0x854800 waiting for monitor entry [0xb0c8a000..0xb0c8ad90]
        at java.lang.Object.wait(Native Method)
        - waiting on <0x05984198> (a scala.actors.FJTaskScheduler2)
        at scala.actors.FJTaskScheduler2.liftedTree3$$1(FJTaskScheduler2.scala:116)
        at scala.actors.FJTaskScheduler2.run(FJTaskScheduler2.scala:115)
        - locked <0x05984198> (a scala.actors.FJTaskScheduler2)
```
```scala
"Thread-1" daemon prio=5 tid=0x0100d940 nid=0x872000 waiting for monitor entry [0xb0d0b000..0xb0d0bd90]
        at scala.actors.Scheduler$$.unPendReaction(Scheduler.scala:90)
        - waiting to lock <0x05984248> (a scala.actors.Scheduler$$)
        at scala.actors.Reaction.run(Reaction.scala:88)
        at scala.actors.FJTask$$Wrap.run(Unknown Source)
        at scala.actors.FJTaskRunner.scanWhileIdling(Unknown Source)
        at scala.actors.FJTaskRunner.run(Unknown Source)
```
```scala
"main" prio=5 tid=0x010015e0 nid=0xb0801000 in Object.wait() [0xb07ff000..0xb0800148]
        at java.lang.Object.wait(Native Method)
        - waiting on <0x0598de70> (a scala.actors.FJTaskRunner)
        at java.lang.Thread.join(Thread.java:1113)
        - locked <0x0598de70> (a scala.actors.FJTaskRunner)
        at java.lang.Thread.join(Thread.java:1166)
        at scala.actors.FJTaskRunnerGroup.snapshot(Unknown Source)
        at scala.actors.FJTaskScheduler2.snapshot(FJTaskScheduler2.scala:215)
        - locked <0x05984198> (a scala.actors.FJTaskScheduler2)
        at scala.actors.Scheduler$$.snapshot(Scheduler.scala:46)
        - locked <0x05984248> (a scala.actors.Scheduler$$)
        at Test$$.<init>(t1.scala:39)
        at Test$$.<clinit>(t1.scala)
        at Test.main(t1.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at scala.tools.nsc.ObjectRunner$$$$anonfun$$run$$1.apply(ObjectRunner.scala:75)
        at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
        at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
        at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:161)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
```

It appears that the lock on `scala.actors.Scheduler$$` is held by `Scheduler.snapshot`
while Actor.exit is trying to run `Scheduler.unPendReaction()`  which needs the same
lock.
