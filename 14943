You can introspect using the product* methods on a case class to find element count, their indices and values - but not names. Some would argue the name is way more useful than the index within the class declaration to application programmers.

To be easily be able to convert a case class / Product to/from a Map it would be very handy to be able to look up a product name for a specific index.

We can call productArity to find how many items on a Product/case class, can call productElement(i) to find the value of i - but we can't find the name of element i.


So how about an optional trait NamedProduct which case classes can implement which adds

def productElementName(index: Int) : String

then without doing any hacky reflection hacks (which are quite hard to get right with inheritance and to avoid all the built in methods to be avoided etc), folks can easily turn maps into products and vice versa.

The code generated case class could just have a static lazy value (on the helper object) to lazily calculate it if someone calls productElementName?
