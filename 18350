The issue is that Avian's GC is currently not precise enough to determine the exact lifetime of each local/stack reference, and therefore considers the `this` reference to be reachable in situations where it could have been collected.

This can cause issues (as seen in run/stream_length and run/t4294: {{java.lang.OutOfMemoryError}}) if code relies on the garbage collection of these values to keep memory consumption constant.

I'll skip these two tests on Avian until the GC implementation is fixed.
