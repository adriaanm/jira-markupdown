Thank you for your comments. I feel your scala-user thread reinforces my position. I am not asking to be able to customize the accessors; I was giving examples of why it is important to allow private vars.

My observation in scala 2.8.1 is that the scala accessors take on the visibility of the var, but the Bean accessors are always public.

Using scala -print, if I make my var protected, I see:
```scala
    @scala.reflect.BeanProperty private[this] var test: Int = _;
    protected <accessor> def test(): Int = line5$$object$$$$iw$$$$iw.this.test;
    protected <accessor> def test_=(x$$1: Int): Unit = line5$$object$$$$iw$$$$iw.this.test = x$$1;
    def setTest(x$$1: Int): Unit = line5$$object$$$$iw$$$$iw.this.test = x$$1;
    def getTest(): Int = line5$$object$$$$iw$$$$iw.this.test();
```

getTest and setTest are public (as they should be IMO).

I really just want to know why private is disallowed. I found your comment in the compiler source, "avoids name clashes with private fields in traits." That's unsatisfying. I promise to not name a private field "setTest" in any trait I inherit from!
