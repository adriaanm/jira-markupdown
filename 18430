Working with Akka.IO and TCP Sockets an HandlerActor would receive a ByteString. This is incompatible with the scala.xml.pull.XMLEventReader. 

In XML Streams (e.g. XMPP) chunks of xml tags are sent over a socket. using the java api, the socket basically is an input stream where the XMLEventReader can read from - the socket is blocked if no data is received and the XMLEventReader just waits for more bytes from the socket.

In Actors(with Akka) I'll only get xml data encapsulated in ByteStrings which are essentially byte arrays or a closed(!) input stream. The XMLEventReader checks if the XML is valid and - if not - crashes with a FatalError.

Exception in thread "XMLEventReader" scala.xml.parsing.FatalError: expected closing tag of stream:stream
	at scala.xml.parsing.MarkupParser$class.errorNoEnd(MarkupParser.scala:40)
	at scala.xml.pull.XMLEventReader$Parser.errorNoEnd(XMLEventReader.scala:59)
	at scala.xml.parsing.MarkupParserCommon$class.xEndTag(MarkupParserCommon.scala:93)
	at scala.xml.pull.XMLEventReader$Parser.xEndTag(XMLEventReader.scala:59)
	at scala.xml.parsing.MarkupParser$class.element1(MarkupParser.scala:568)
	at scala.xml.pull.XMLEventReader$Parser.element1(XMLEventReader.scala:59)
	at scala.xml.parsing.MarkupParser$class.content1(MarkupParser.scala:418)
	at scala.xml.pull.XMLEventReader$Parser.content1(XMLEventReader.scala:59)
	at scala.xml.parsing.MarkupParser$class.document(MarkupParser.scala:239)
	at scala.xml.pull.XMLEventReader$Parser.document(XMLEventReader.scala:59)
	at scala.xml.pull.XMLEventReader$Parser$$anonfun$run$1.apply(XMLEventReader.scala:94)
	at scala.xml.pull.XMLEventReader$Parser$$anonfun$run$1.apply(XMLEventReader.scala:94)
	at scala.xml.pull.ProducerConsumerIterator$class.interruptibly(XMLEventReader.scala:117)
	at scala.xml.pull.XMLEventReader.interruptibly(XMLEventReader.scala:26)
	at scala.xml.pull.XMLEventReader$Parser.run(XMLEventReader.scala:94)
	at java.lang.Thread.run(Thread.java:722)


-----
The expected behavior would be a mechanism where a XML chunck is send to the XMLStreamReader without any input stream dependencies and without validating the global xml structure.
