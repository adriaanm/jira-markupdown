```scala
ï¿½ scala
Welcome to Scala version 2.8.0.Beta1-prerelease (Java HotSpot(TM) Client VM, Java 1.6.0_17).
Type in expressions to have them evaluated.
Type :help for more information.

scala> val l = List(1,2)
l: List[Int] = List(1, 2)

scala> l.map{case n => <tr>n</tr>}
res0: List[scala.xml.Elem] = List(<tr>n</tr>, <tr>n</tr>)

scala> <table>l.map{case n => <tr>n</tr>}</table>
<console>:1: error: in XML literal:  expected end of Scala block
       <table>l.map{case n => <tr>n</tr>}</table>
                          ^
<console>:1: error: in XML literal: in XML content, please use '}}' to express '}'
       <table>l.map{case n => <tr>n</tr>}</table>
                                        ^
<console>:1: error:  I encountered a '}' where I didn't expect one, maybe this tag isn't closed <table>
       <table>l.map{case n => <tr>n</tr>}</table>
        ^
Exception in thread "main" java.lang.AssertionError: assertion failed
        at scala.Predef$$.assert(Predef.scala:89)
        at scala.tools.nsc.ast.parser.Scanners$$Scanner.resume(Scanners.scala:63)
        at scala.tools.nsc.ast.parser.MarkupParsers$$MarkupParser.xLiteralCommon(MarkupParsers.scala:433)
        at scala.tools.nsc.ast.parser.MarkupParsers$$MarkupParser.xLiteral(MarkupParsers.scala:447)
        at scala.tools.nsc.ast.parser.Parsers$$UnitParser.xmlLiteral(Parsers.scala:127)
        at scala.tools.nsc.ast.parser.Parsers$$Parser.simpleExpr(Parsers.scala:1214)
        at scala.tools.nsc.ast.parser.Parsers$$Parser.prefixExpr(Parsers.scala:1191)
        at scala.tools.nsc.ast.parser.Parsers$$Parser.postfixExpr(Parsers.scala:1143)
        at scala.tools.nsc.ast.parser.Parsers$$Parser.expr0(Parsers.scala:1068)
        at scala.tools.nsc.ast.parser.Parsers$$Parser.expr(Parsers.scala:991)
        at scala.tools.nsc.ast.parser.Parsers$$Parser$$$$anonfun$$templateStatSeq$$1.apply(Parsers.scala:2508)
        at scala.tools.nsc.ast.parser.Parsers$$Parser$$$$anonfun$$templateStatSeq$$1.apply(Parsers.scala:2503)
        at scala.tools.nsc.ast.parser.Parsers$$Parser.checkNoEscapingPlaceholders(Parsers.scala:199)
        at scala.tools.nsc.ast.parser.Parsers$$Parser.templateStatSeq(Parsers.scala:2503)
        at scala.tools.nsc.Interpreter$$$$anonfun$$scala$$tools$$nsc$$Interpreter$$$$parse$$2.simpleParse$$1(Interpreter.scala:379)
        at scala.tools.nsc.Interpreter$$$$anonfun$$scala$$tools$$nsc$$Interpreter$$$$parse$$2.apply(Interpreter.scala:381)
        at scala.tools.nsc.Interpreter$$$$anonfun$$scala$$tools$$nsc$$Interpreter$$$$parse$$2.apply(Interpreter.scala:372)
        at scala.tools.nsc.reporters.Reporter.withIncompleteHandler(Reporter.scala:76)
        at scala.tools.nsc.Interpreter.interpret(Interpreter.scala:446)
        at scala.tools.nsc.InterpreterLoop.interpretStartingWith(InterpreterLoop.scala:391)
        at scala.tools.nsc.InterpreterLoop.command(InterpreterLoop.scala:367)
        at scala.tools.nsc.InterpreterLoop.processLine$$1(InterpreterLoop.scala:249)
        at scala.tools.nsc.InterpreterLoop.repl(InterpreterLoop.scala:267)
        at scala.tools.nsc.InterpreterLoop.main(InterpreterLoop.scala:439)
        at scala.tools.nsc.MainGenericRunner$$.createLoop$$1(MainGenericRunner.scala:118)
        at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:143)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
```
