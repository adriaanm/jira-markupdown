OK, I wrote up code that should implement the proxy around sun.misc. Attached is a small program that implements exactly the code in {{object InstallSignalHandler}} in two ways: One by importing sun.misc directly, the other using reflection. I use it to catch SIGINT, and print a message, and both ways work the same. I haven't yet compiled the scala code myself so perhaps someone can put this together with Paul's code.

There may be better ways to handle the possibility of something going wrong; at least, convert the println statements into repldbg() or whatever. But the code as written will work.

{code}
package testproxy

import java.lang.reflect.{Array=>_,_}

object SignalProxy {
  val clazz = try {
     Class.forName("sun.misc.Signal")
  } catch {
    case e: ClassNotFoundException => null
  }

  def apply(name: String) = {
    try {
      clazz.getConstructor(classOf[String]).newInstance(name).asInstanceOf[Object]
    } catch {
      case e: Exception => {
        println("Caught exception in SignalProxy.apply: " + e)
        null
      }
    }
  }

  def handle(rsig: Object, proxy: Object): Boolean = {
    try {
      if (clazz != null) {
        val handlerclazz = SignalHandlerProxy.clazz
        if (handlerclazz != null) {
          val m = clazz.getMethod("handle", clazz, handlerclazz)
          m.invoke(null, rsig, proxy)
        }
      }
    } catch {
      case e: Exception => {
        println("Caught exception in SignalProxy.handle: " + e)
        return false
      }
    }
    return true
  }
}

object SignalHandlerProxy {
  val clazz = try {
     Class.forName("sun.misc.SignalHandler")
  } catch {
    case e: ClassNotFoundException => null
  }

  def apply(rsig: Object)(body: => Unit) = {
    if (clazz == null) null
    else try {
      Proxy.newProxyInstance(clazz.getClassLoader(), Array(clazz),
        new SignalHandlerProxy(rsig)(body))
    } catch {
      case e: Exception => {
        println("Caught exception in SignalHandlerProxy.apply: " + e)
        null
      }
    }
  }
}

class SignalHandlerProxy(rsig: Object)(body: => Unit) extends InvocationHandler
{
  def invoke(proxy: Object, m: Method, args: Array[Object]) = {
    
    if (m.getName == "handle")
    {
      val nsig = args(0)
      if (nsig == rsig)
        body
    }
    null
  }
}

object TestSignal1 extends App {
  object InstallSignalHandler {
    import sun.misc.{ Signal, SignalHandler }
    def apply(name: String)(body: => Unit): Unit = {
      val rsig = new Signal(name)
      Signal.handle(rsig, new SignalHandler { def handle(nsig: Signal): Unit = if (rsig == nsig) body })
    }
  }

  InstallSignalHandler("INT") {
    println("Caught SIGINT")
  }
  Thread.sleep(5000)
}

object TestSignal2 extends App {
  object InstallSignalHandler {
    def apply(name: String)(body: => Unit): Unit = {
      val rsig = SignalProxy(name)
      val handler =
        if (rsig != null) SignalHandlerProxy(rsig)(body) else null
      if (handler != null)
        SignalProxy.handle(rsig, handler)
      else
        println("Unable to install signal handler for " + name)
    }
  }

  InstallSignalHandler("INT") {
    println("Caught SIGINT")
  }
  Thread.sleep(5000)
}
{code}
