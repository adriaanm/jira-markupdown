Status update: I prepared the pull request but there is a problem in the backend: the closure elimination phase incorrectly eliminates some code and this leads to a failed test: 

{code}
$ cat test/files/run/tailcalls-base2.scala 
// This test checks correct handling of the this pointer in the tailcalls transformation
trait Base {
  def message: String
  class T(i: Int) { println(message) ; def msg = message }

  @annotation.tailrec final /* make sure it's transformed by tailcalls */
  def tailCall(a:Int, other: Base): T =
    if (a == 0) 
      new T(0)
    else 
      other.tailCall(a-1, this) // tail call-transformed
}

class ReturnsInt extends Base { def message = this.getClass.toString }
class ReturnsStr extends Base { def message = this.getClass.toString }

object Test extends App {
  val rInt = new ReturnsInt
  val rStr = new ReturnsStr

  for (x <- 1 to 10)
    println(rInt.tailCall(x, rStr).msg)
}

$ build/quick/bin/scalac test/files/run/tailcalls-base2.scala -d classes
$ build/quick/bin/scala -cp classes Test
class ReturnsStr
class ReturnsStr
class ReturnsInt
class ReturnsInt
class ReturnsStr
class ReturnsStr
class ReturnsInt
class ReturnsInt
class ReturnsStr
class ReturnsStr
class ReturnsInt
class ReturnsInt
class ReturnsStr
class ReturnsStr
class ReturnsInt
class ReturnsInt
class ReturnsStr
class ReturnsStr
class ReturnsInt
class ReturnsInt

$ build/quick/bin/scalac test/files/run/tailcalls-base2.scala -d classes -optimize
$ build/quick/bin/scala -cp classes Test
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
class ReturnsStr
{code}
