= problem =
One of the most common imperative constructs is a repeat loop:

for(_ <- 1 to n) {
}

Although we support many (even peculiar) looping scenarios, there is no way to clearly express the intent in this common one.

= analysis =
Researched here are a few ways of expressing the repeat construct:

[http://stackoverflow.com/questions/5764049/most-elegant-repeat-loop-in-scala]
```scala
List.fill(10)(println("hi"))
```
```scala
(1 to 10).foreach(_ => println("hi"))
```
```scala
def rep[A](n: Int)(f: => A) { if (n > 0) { f; rep(n-1)(f) } }
rep(5) { println("hi") }
```

However the one that seems by far most elegant and consistent the following:
```scala
class Rep(n: Int) {
  def times[A](f: => A) { loop(f, n) }
  private def loop[A](f: => A, n: Int) { if (n > 0) { f; loop(f, n-1) } }
}
implicit def int2Rep(i: Int): Rep = new Rep(i)

// use it with
10.times { println("hi") }
```

My propositions is to add the 
```scala
def times[A](f: => A)
```
method to RichInt class.
