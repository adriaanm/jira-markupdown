This is a rather cryptic internal compiler error. I'm registering it here so that it can be used for bugtracking.

The sourcecode is a slightly modified version of the Scala 2.8.0.RC1 source package, where I have replaced usage of Java files with a custom memory-based files. It was during the introduction of these files this error occurs.


**Exception:**
```scala
java.lang.RuntimeException: Compilation failed because of an internal compiler e
rror; see the error output for details.
        at scala.Predef$$.error(Predef.scala:60)
        at scala.tools.ant.sabbus.ScalacFork.execute(ScalacFork.scala:118)
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
        at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav
a:106)
        at org.apache.tools.ant.Task.perform(Task.java:348)
        at org.apache.tools.ant.Target.execute(Target.java:357)
        at org.apache.tools.ant.Target.performTasks(Target.java:385)
        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1337)
        at org.apache.tools.ant.Project.executeTarget(Project.java:1306)
        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExe
cutor.java:41)
        at org.apache.tools.ant.Project.executeTargets(Project.java:1189)
        at org.apache.tools.ant.Main.runBuild(Main.java:758)
        at org.apache.tools.ant.Main.startAnt(Main.java:217)
        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
```



**Logfile:**
```scala
Buildfile: build.xml
     [echo] Using scalacfork.jvmargs: -Xms128M -Xmx1024M -Xss1M -XX:MaxPermSize=128M

init:
     [echo] Using scalac.args.all:  
     [echo] Using javac.args: 
     [echo] Build number is '2.8.0.r0-b20100419182308'
     [echo] Built 19 april 2010, 18:23:08 from revision 0 with Java HotSpot(TM) Client VM 1.6.0_18

locker.start:

locker.pre-lib:

locker.lib:

locker.pre-comp:

locker.comp:

locker.done:

quick.start:

quick.pre-lib:

quick.lib:

quick.newlibs:

quick.libs:

quick.newforkjoin:

quick.forkjoin:

quick.pre-comp:

quick.comp:
[scalacfork] Compiling 3 files to D:\downloads\scala-2.8.0.RC1-sources\build\quick\classes\compiler
[scalacfork] exception when typing final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork] exception when typing final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]   def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]     $$anonfun.super.this();
[scalacfork]     ()
[scalacfork]   };
[scalacfork]   final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]   <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]   <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]   final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork] }
[scalacfork] exception when typing {
[scalacfork]   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]     def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]       $$anonfun.super.this();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]     <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]   };
[scalacfork]   (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork] }
[scalacfork] exception when typing interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]     def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]       $$anonfun.super.this();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]     <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]   };
[scalacfork]   (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork] })
[scalacfork] exception when typing final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]     def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]       $$anonfun.super.this();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]     <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]   };
[scalacfork]   (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork] })
[scalacfork] exception when typing final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]   def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]     $$anonfun.super.this();
[scalacfork]     ()
[scalacfork]   };
[scalacfork]   final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]       def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]         $$anonfun.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]       <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]       final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]     };
[scalacfork]     (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]   });
[scalacfork]   <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]   <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]   final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork] }
[scalacfork] exception when typing {
[scalacfork]   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]     def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]       $$anonfun.super.this();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]     });
[scalacfork]     <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]   };
[scalacfork]   (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork] }
[scalacfork] exception when typing ByteCode.aliasForType(path).flatMap({
[scalacfork]   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]     def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]       $$anonfun.super.this();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]     });
[scalacfork]     <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]   };
[scalacfork]   (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork] })
[scalacfork] exception when typing final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor(path: java.lang.String): Option = ByteCode.aliasForType(path).flatMap({
[scalacfork]   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]     def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]       $$anonfun.super.this();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]     });
[scalacfork]     <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]   };
[scalacfork]   (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork] })
[scalacfork] exception when typing class SubCompletor extends java.lang.Object with scala.tools.nsc.interpreter.CompletionAware with ScalaObject {
[scalacfork]   <local> <paramaccessor> val scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root: java.lang.String = _;
[scalacfork]   def this($$outer: scala.tools.nsc.interpreter.PackageCompletion, root: java.lang.String): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = {
[scalacfork]     SubCompletor.super.this();
[scalacfork]     SubCompletor.this./*CompletionAware$$class*/$$init$$();
[scalacfork]     ()
[scalacfork]   };
[scalacfork]   final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor(path: java.lang.String): Option = ByteCode.aliasForType(path).flatMap({
[scalacfork]     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]       def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]         $$anonfun.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]       });
[scalacfork]       <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]       final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]     };
[scalacfork]     (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]   });
[scalacfork]   lazy private[this] var pkgObject: Option = _;
[scalacfork]   <stable> <accessor> lazy def pkgObject(): Option = {
[scalacfork]     SubCompletor.this.pkgObject = interpreter.this.package.classForName(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".package$$")).map({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(x: java.lang.Class): scala.tools.nsc.interpreter.PackageObjectCompletion = new scala.tools.nsc.interpreter.PackageObjectCompletion(x);
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]     });
[scalacfork]     SubCompletor.this.pkgObject
[scalacfork]   };
[scalacfork]   def pkgObjectMembers(): List = SubCompletor.this.pkgObject().map({
[scalacfork]     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]       def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]         $$anonfun.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       final def apply(x$$2: scala.tools.nsc.interpreter.PackageObjectCompletion): List = x$$2.completionsFor(Parsed.apply(""));
[scalacfork]       <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]       final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]     };
[scalacfork]     (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]   }).getOrElse({
[scalacfork]     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]       def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]         $$anonfun.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       final def apply(): object Nil = immutable.this.Nil;
[scalacfork]       <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]       final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]     };
[scalacfork]     (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]   });
[scalacfork]   final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos(): List = scala.Option.apply(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer().agent().dottedPaths().get(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root)).getOrElse({
[scalacfork]     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]       def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]         $$anonfun.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       final def apply(): object Nil = immutable.this.Nil;
[scalacfork]       <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]       final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]     };
[scalacfork]     (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]   });
[scalacfork]   def completions(): List = {
[scalacfork]     val xs: List = SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos().map({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(x$$3: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): java.lang.String = x$$3.visibleName();
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]     }, immutable.this.List.canBuildFrom()).filterNot({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(x$$4: java.lang.String): Boolean = x$$4.==("package");
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]     });
[scalacfork]     {
[scalacfork]       <synthetic> val x$$5: List = xs;
[scalacfork]       SubCompletor.this.pkgObjectMembers().:::(x$$5)
[scalacfork]     }
[scalacfork]   };
[scalacfork]   override def follow(segment: java.lang.String): Option = {
[scalacfork]     <synthetic> val nonLocalReturnKey1: java.lang.Object = new java.lang.Object();
[scalacfork]     try {
[scalacfork]       SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer().follow(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".").+(segment)).orElse({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(): Option = {
[scalacfork]             $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos().filter({
[scalacfork]               final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                 def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                   $$anonfun.super.this();
[scalacfork]                   ()
[scalacfork]                 };
[scalacfork]                 final def apply(check$$ifrefutable$$1: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): Boolean = {
[scalacfork]                   var temp1: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = check$$ifrefutable$$1;
[scalacfork]                   {
[scalacfork]                     var temp2: Option = PackageCompletion.CompletionInfo.unapply(temp1);
[scalacfork]                     if (temp2.isEmpty().unary_!())
[scalacfork]                       {
[scalacfork]                         segment.==(temp2.get()._1())
[scalacfork]                       }
[scalacfork]                     else
[scalacfork]                       {
[scalacfork]                         false
[scalacfork]                       }
[scalacfork]                   }
[scalacfork]                 };
[scalacfork]                 <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                 final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]               };
[scalacfork]               (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]             }).foreach({
[scalacfork]               final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                 def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                   $$anonfun.super.this();
[scalacfork]                   ()
[scalacfork]                 };
[scalacfork]                 final def apply(x$$6: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): Unit = {
[scalacfork]                   var temp7: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = x$$6;
[scalacfork]                   {
[scalacfork]                     var temp8: Option = PackageCompletion.CompletionInfo.unapply(temp7);
[scalacfork]                     if (temp8.isEmpty().unary_!())
[scalacfork]                       {
[scalacfork]                         var temp9: Tuple2 = temp8.get();
[scalacfork]                         var temp11: java.lang.String = temp9._2();
[scalacfork]                         if (segment.==(temp9._1()))
[scalacfork]                           {
[scalacfork]                             interpreter.this.package.classForName(temp11).foreach({
[scalacfork]                               final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                                 def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                                   $$anonfun.super.this();
[scalacfork]                                   ()
[scalacfork]                                 };
[scalacfork]                                 final def apply(clazz: java.lang.Class): Nothing = throw new scala.runtime.NonLocalReturnControl(nonLocalReturnKey1, new Some(new scala.tools.nsc.interpreter.StaticCompletion(clazz)));
[scalacfork]                                 <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                                 final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                               };
[scalacfork]                               (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                             })
[scalacfork]                           }
[scalacfork]                         else
[scalacfork]                           throw new MatchError(temp7)
[scalacfork]                       }
[scalacfork]                     else
[scalacfork]                       throw new MatchError(temp7)
[scalacfork]                   }
[scalacfork]                 };
[scalacfork]                 <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                 final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]               };
[scalacfork]               (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]             });
[scalacfork]             $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor($$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".").+(segment))
[scalacfork]           };
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]       })
[scalacfork]     } catch {
[scalacfork]       case (ex @ (_: scala.runtime.NonLocalReturnControl)) => if (ex.key().eq(nonLocalReturnKey1))
[scalacfork]         ex.value().asInstanceOf[Option]()
[scalacfork]       else
[scalacfork]         throw ex
[scalacfork]     }
[scalacfork]   };
[scalacfork]   override def toString(): java.lang.String = scala.this.Predef.augmentString("SubCompletor(%s)").format(scala.this.Predef.genericWrapArray(Array[java.lang.Object]{SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root}.$$asInstanceOf[Array[java.lang.Object]]()));
[scalacfork]   protected <synthetic> <paramaccessor> val $$outer: scala.tools.nsc.interpreter.PackageCompletion = _;
[scalacfork]   <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion = SubCompletor.this.$$outer
[scalacfork] }
[scalacfork] exception when typing class PackageCompletion extends java.lang.Object with scala.tools.nsc.interpreter.CompletionAware with ScalaObject {
[scalacfork]   <local> <paramaccessor> val scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$classpath: List = _;
[scalacfork]   def this(classpath: List): scala.tools.nsc.interpreter.PackageCompletion = {
[scalacfork]     PackageCompletion.super.this();
[scalacfork]     PackageCompletion.this./*CompletionAware$$class*/$$init$$();
[scalacfork]     ()
[scalacfork]   };
[scalacfork]   class CompletionAgent extends java.lang.Object with ScalaObject {
[scalacfork]     def this($$outer: scala.tools.nsc.interpreter.PackageCompletion): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = {
[scalacfork]       CompletionAgent.super.this();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     private[this] val dottedPaths: java.util.concurrent.ConcurrentHashMap = new java.util.concurrent.ConcurrentHashMap();
[scalacfork]     <stable> <accessor> def dottedPaths(): java.util.concurrent.ConcurrentHashMap = CompletionAgent.this.dottedPaths;
[scalacfork]     private[this] val topLevelPackages: scala.concurrent.DelayedLazyVal = new scala.concurrent.DelayedLazyVal({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(): List = PackageCompletion.enumToList($$anonfun.this.$$outer.dottedPaths().keys()).filterNot({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x$$1: java.lang.String): Boolean = scala.this.Predef.augmentString(x$$1).contains('.');
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]         });
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(CompletionAgent.this): Function0)
[scalacfork]     }, {
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0$$mcV$$sp {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(): Unit = $$anonfun.this.apply$$mcV$$sp();
[scalacfork]         <specialized> def apply$$mcV$$sp(): Unit = PackageCompletion.getDottedPaths($$anonfun.this.$$outer.dottedPaths(), $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$$$outer().scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$classpath);
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(CompletionAgent.this): Function0)
[scalacfork]     });
[scalacfork]     <stable> <accessor> def topLevelPackages(): scala.concurrent.DelayedLazyVal = CompletionAgent.this.topLevelPackages;
[scalacfork]     protected <synthetic> <paramaccessor> val $$outer: scala.tools.nsc.interpreter.PackageCompletion = _;
[scalacfork]     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion = CompletionAgent.this.$$outer
[scalacfork]   };
[scalacfork]   private[this] val agent: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = new scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent(PackageCompletion.this);
[scalacfork]   <stable> <accessor> def agent(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = PackageCompletion.this.agent;
[scalacfork]   def completions(): List = PackageCompletion.this.agent().topLevelPackages().apply();
[scalacfork]   override def follow(id: java.lang.String): Option = if (PackageCompletion.this.agent().dottedPaths().containsKey(id))
[scalacfork]     new Some(new scala.tools.nsc.interpreter.PackageCompletion#SubCompletor(PackageCompletion.this, id))
[scalacfork]   else
[scalacfork]     scala.None;
[scalacfork]   class SubCompletor extends java.lang.Object with scala.tools.nsc.interpreter.CompletionAware with ScalaObject {
[scalacfork]     <local> <paramaccessor> val scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root: java.lang.String = _;
[scalacfork]     def this($$outer: scala.tools.nsc.interpreter.PackageCompletion, root: java.lang.String): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = {
[scalacfork]       SubCompletor.super.this();
[scalacfork]       SubCompletor.this./*CompletionAware$$class*/$$init$$();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor(path: java.lang.String): Option = ByteCode.aliasForType(path).flatMap({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]         });
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]     });
[scalacfork]     lazy private[this] var pkgObject: Option = _;
[scalacfork]     <stable> <accessor> lazy def pkgObject(): Option = {
[scalacfork]       SubCompletor.this.pkgObject = interpreter.this.package.classForName(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".package$$")).map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x: java.lang.Class): scala.tools.nsc.interpreter.PackageObjectCompletion = new scala.tools.nsc.interpreter.PackageObjectCompletion(x);
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]       });
[scalacfork]       SubCompletor.this.pkgObject
[scalacfork]     };
[scalacfork]     def pkgObjectMembers(): List = SubCompletor.this.pkgObject().map({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(x$$2: scala.tools.nsc.interpreter.PackageObjectCompletion): List = x$$2.completionsFor(Parsed.apply(""));
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]     }).getOrElse({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(): object Nil = immutable.this.Nil;
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]     });
[scalacfork]     final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos(): List = scala.Option.apply(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer().agent().dottedPaths().get(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root)).getOrElse({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(): object Nil = immutable.this.Nil;
[scalacfork]         <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]         final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]     });
[scalacfork]     def completions(): List = {
[scalacfork]       val xs: List = SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos().map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$3: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): java.lang.String = x$$3.visibleName();
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]       }, immutable.this.List.canBuildFrom()).filterNot({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$4: java.lang.String): Boolean = x$$4.==("package");
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]       });
[scalacfork]       {
[scalacfork]         <synthetic> val x$$5: List = xs;
[scalacfork]         SubCompletor.this.pkgObjectMembers().:::(x$$5)
[scalacfork]       }
[scalacfork]     };
[scalacfork]     override def follow(segment: java.lang.String): Option = {
[scalacfork]       <synthetic> val nonLocalReturnKey1: java.lang.Object = new java.lang.Object();
[scalacfork]       try {
[scalacfork]         SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer().follow(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".").+(segment)).orElse({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(): Option = {
[scalacfork]               $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos().filter({
[scalacfork]                 final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                   def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                     $$anonfun.super.this();
[scalacfork]                     ()
[scalacfork]                   };
[scalacfork]                   final def apply(check$$ifrefutable$$1: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): Boolean = {
[scalacfork]                     var temp1: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = check$$ifrefutable$$1;
[scalacfork]                     {
[scalacfork]                       var temp2: Option = PackageCompletion.CompletionInfo.unapply(temp1);
[scalacfork]                       if (temp2.isEmpty().unary_!())
[scalacfork]                         {
[scalacfork]                           segment.==(temp2.get()._1())
[scalacfork]                         }
[scalacfork]                       else
[scalacfork]                         {
[scalacfork]                           false
[scalacfork]                         }
[scalacfork]                     }
[scalacfork]                   };
[scalacfork]                   <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                   <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                   final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                 };
[scalacfork]                 (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]               }).foreach({
[scalacfork]                 final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                   def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                     $$anonfun.super.this();
[scalacfork]                     ()
[scalacfork]                   };
[scalacfork]                   final def apply(x$$6: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): Unit = {
[scalacfork]                     var temp7: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = x$$6;
[scalacfork]                     {
[scalacfork]                       var temp8: Option = PackageCompletion.CompletionInfo.unapply(temp7);
[scalacfork]                       if (temp8.isEmpty().unary_!())
[scalacfork]                         {
[scalacfork]                           var temp9: Tuple2 = temp8.get();
[scalacfork]                           var temp11: java.lang.String = temp9._2();
[scalacfork]                           if (segment.==(temp9._1()))
[scalacfork]                             {
[scalacfork]                               interpreter.this.package.classForName(temp11).foreach({
[scalacfork]                                 final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                                   def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                                     $$anonfun.super.this();
[scalacfork]                                     ()
[scalacfork]                                   };
[scalacfork]                                   final def apply(clazz: java.lang.Class): Nothing = throw new scala.runtime.NonLocalReturnControl(nonLocalReturnKey1, new Some(new scala.tools.nsc.interpreter.StaticCompletion(clazz)));
[scalacfork]                                   <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                                   <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                                   final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                                 };
[scalacfork]                                 (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                               })
[scalacfork]                             }
[scalacfork]                           else
[scalacfork]                             throw new MatchError(temp7)
[scalacfork]                         }
[scalacfork]                       else
[scalacfork]                         throw new MatchError(temp7)
[scalacfork]                     }
[scalacfork]                   };
[scalacfork]                   <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                   <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                   final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                 };
[scalacfork]                 (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]               });
[scalacfork]               $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor($$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".").+(segment))
[scalacfork]             };
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]         })
[scalacfork]       } catch {
[scalacfork]         case (ex @ (_: scala.runtime.NonLocalReturnControl)) => if (ex.key().eq(nonLocalReturnKey1))
[scalacfork]           ex.value().asInstanceOf[Option]()
[scalacfork]         else
[scalacfork]           throw ex
[scalacfork]       }
[scalacfork]     };
[scalacfork]     override def toString(): java.lang.String = scala.this.Predef.augmentString("SubCompletor(%s)").format(scala.this.Predef.genericWrapArray(Array[java.lang.Object]{SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root}.$$asInstanceOf[Array[java.lang.Object]]()));
[scalacfork]     protected <synthetic> <paramaccessor> val $$outer: scala.tools.nsc.interpreter.PackageCompletion = _;
[scalacfork]     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion = SubCompletor.this.$$outer
[scalacfork]   }
[scalacfork] }
[scalacfork] exception when typing package interpreter {
[scalacfork]   class PackageCompletion extends java.lang.Object with scala.tools.nsc.interpreter.CompletionAware with ScalaObject {
[scalacfork]     <local> <paramaccessor> val scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$classpath: List = _;
[scalacfork]     def this(classpath: List): scala.tools.nsc.interpreter.PackageCompletion = {
[scalacfork]       PackageCompletion.super.this();
[scalacfork]       PackageCompletion.this./*CompletionAware$$class*/$$init$$();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     class CompletionAgent extends java.lang.Object with ScalaObject {
[scalacfork]       def this($$outer: scala.tools.nsc.interpreter.PackageCompletion): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = {
[scalacfork]         CompletionAgent.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       private[this] val dottedPaths: java.util.concurrent.ConcurrentHashMap = new java.util.concurrent.ConcurrentHashMap();
[scalacfork]       <stable> <accessor> def dottedPaths(): java.util.concurrent.ConcurrentHashMap = CompletionAgent.this.dottedPaths;
[scalacfork]       private[this] val topLevelPackages: scala.concurrent.DelayedLazyVal = new scala.concurrent.DelayedLazyVal({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(): List = PackageCompletion.enumToList($$anonfun.this.$$outer.dottedPaths().keys()).filterNot({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(x$$1: java.lang.String): Boolean = scala.this.Predef.augmentString(x$$1).contains('.');
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]           });
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(CompletionAgent.this): Function0)
[scalacfork]       }, {
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0$$mcV$$sp {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(): Unit = $$anonfun.this.apply$$mcV$$sp();
[scalacfork]           <specialized> def apply$$mcV$$sp(): Unit = PackageCompletion.getDottedPaths($$anonfun.this.$$outer.dottedPaths(), $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$$$outer().scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$classpath);
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(CompletionAgent.this): Function0)
[scalacfork]       });
[scalacfork]       <stable> <accessor> def topLevelPackages(): scala.concurrent.DelayedLazyVal = CompletionAgent.this.topLevelPackages;
[scalacfork]       protected <synthetic> <paramaccessor> val $$outer: scala.tools.nsc.interpreter.PackageCompletion = _;
[scalacfork]       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion = CompletionAgent.this.$$outer
[scalacfork]     };
[scalacfork]     private[this] val agent: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = new scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent(PackageCompletion.this);
[scalacfork]     <stable> <accessor> def agent(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = PackageCompletion.this.agent;
[scalacfork]     def completions(): List = PackageCompletion.this.agent().topLevelPackages().apply();
[scalacfork]     override def follow(id: java.lang.String): Option = if (PackageCompletion.this.agent().dottedPaths().containsKey(id))
[scalacfork]       new Some(new scala.tools.nsc.interpreter.PackageCompletion#SubCompletor(PackageCompletion.this, id))
[scalacfork]     else
[scalacfork]       scala.None;
[scalacfork]     class SubCompletor extends java.lang.Object with scala.tools.nsc.interpreter.CompletionAware with ScalaObject {
[scalacfork]       <local> <paramaccessor> val scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root: java.lang.String = _;
[scalacfork]       def this($$outer: scala.tools.nsc.interpreter.PackageCompletion, root: java.lang.String): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = {
[scalacfork]         SubCompletor.super.this();
[scalacfork]         SubCompletor.this./*CompletionAware$$class*/$$init$$();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor(path: java.lang.String): Option = ByteCode.aliasForType(path).flatMap({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]           });
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]       });
[scalacfork]       lazy private[this] var pkgObject: Option = _;
[scalacfork]       <stable> <accessor> lazy def pkgObject(): Option = {
[scalacfork]         SubCompletor.this.pkgObject = interpreter.this.package.classForName(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".package$$")).map({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x: java.lang.Class): scala.tools.nsc.interpreter.PackageObjectCompletion = new scala.tools.nsc.interpreter.PackageObjectCompletion(x);
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]         });
[scalacfork]         SubCompletor.this.pkgObject
[scalacfork]       };
[scalacfork]       def pkgObjectMembers(): List = SubCompletor.this.pkgObject().map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$2: scala.tools.nsc.interpreter.PackageObjectCompletion): List = x$$2.completionsFor(Parsed.apply(""));
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]       }).getOrElse({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(): object Nil = immutable.this.Nil;
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]       });
[scalacfork]       final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos(): List = scala.Option.apply(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer().agent().dottedPaths().get(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root)).getOrElse({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]           def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(): object Nil = immutable.this.Nil;
[scalacfork]           <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]           <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]           final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]       });
[scalacfork]       def completions(): List = {
[scalacfork]         val xs: List = SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos().map({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x$$3: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): java.lang.String = x$$3.visibleName();
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]         }, immutable.this.List.canBuildFrom()).filterNot({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x$$4: java.lang.String): Boolean = x$$4.==("package");
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]         });
[scalacfork]         {
[scalacfork]           <synthetic> val x$$5: List = xs;
[scalacfork]           SubCompletor.this.pkgObjectMembers().:::(x$$5)
[scalacfork]         }
[scalacfork]       };
[scalacfork]       override def follow(segment: java.lang.String): Option = {
[scalacfork]         <synthetic> val nonLocalReturnKey1: java.lang.Object = new java.lang.Object();
[scalacfork]         try {
[scalacfork]           SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer().follow(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".").+(segment)).orElse({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]               def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(): Option = {
[scalacfork]                 $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos().filter({
[scalacfork]                   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                     def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                       $$anonfun.super.this();
[scalacfork]                       ()
[scalacfork]                     };
[scalacfork]                     final def apply(check$$ifrefutable$$1: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): Boolean = {
[scalacfork]                       var temp1: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = check$$ifrefutable$$1;
[scalacfork]                       {
[scalacfork]                         var temp2: Option = PackageCompletion.CompletionInfo.unapply(temp1);
[scalacfork]                         if (temp2.isEmpty().unary_!())
[scalacfork]                           {
[scalacfork]                             segment.==(temp2.get()._1())
[scalacfork]                           }
[scalacfork]                         else
[scalacfork]                           {
[scalacfork]                             false
[scalacfork]                           }
[scalacfork]                       }
[scalacfork]                     };
[scalacfork]                     <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                   };
[scalacfork]                   (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                 }).foreach({
[scalacfork]                   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                     def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                       $$anonfun.super.this();
[scalacfork]                       ()
[scalacfork]                     };
[scalacfork]                     final def apply(x$$6: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): Unit = {
[scalacfork]                       var temp7: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = x$$6;
[scalacfork]                       {
[scalacfork]                         var temp8: Option = PackageCompletion.CompletionInfo.unapply(temp7);
[scalacfork]                         if (temp8.isEmpty().unary_!())
[scalacfork]                           {
[scalacfork]                             var temp9: Tuple2 = temp8.get();
[scalacfork]                             var temp11: java.lang.String = temp9._2();
[scalacfork]                             if (segment.==(temp9._1()))
[scalacfork]                               {
[scalacfork]                                 interpreter.this.package.classForName(temp11).foreach({
[scalacfork]                                   final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                                     def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                                       $$anonfun.super.this();
[scalacfork]                                       ()
[scalacfork]                                     };
[scalacfork]                                     final def apply(clazz: java.lang.Class): Nothing = throw new scala.runtime.NonLocalReturnControl(nonLocalReturnKey1, new Some(new scala.tools.nsc.interpreter.StaticCompletion(clazz)));
[scalacfork]                                     <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                                     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                                     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                                   };
[scalacfork]                                   (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                                 })
[scalacfork]                               }
[scalacfork]                             else
[scalacfork]                               throw new MatchError(temp7)
[scalacfork]                           }
[scalacfork]                         else
[scalacfork]                           throw new MatchError(temp7)
[scalacfork]                       }
[scalacfork]                     };
[scalacfork]                     <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                     <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                     final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                   };
[scalacfork]                   (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                 });
[scalacfork]                 $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor($$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".").+(segment))
[scalacfork]               };
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]               final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]           })
[scalacfork]         } catch {
[scalacfork]           case (ex @ (_: scala.runtime.NonLocalReturnControl)) => if (ex.key().eq(nonLocalReturnKey1))
[scalacfork]             ex.value().asInstanceOf[Option]()
[scalacfork]           else
[scalacfork]             throw ex
[scalacfork]         }
[scalacfork]       };
[scalacfork]       override def toString(): java.lang.String = scala.this.Predef.augmentString("SubCompletor(%s)").format(scala.this.Predef.genericWrapArray(Array[java.lang.Object]{SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root}.$$asInstanceOf[Array[java.lang.Object]]()));
[scalacfork]       protected <synthetic> <paramaccessor> val $$outer: scala.tools.nsc.interpreter.PackageCompletion = _;
[scalacfork]       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion = SubCompletor.this.$$outer
[scalacfork]     }
[scalacfork]   };
[scalacfork]   final class PackageCompletion extends java.lang.Object with ScalaObject {
[scalacfork]     def this(): object scala.tools.nsc.interpreter.PackageCompletion = {
[scalacfork]       PackageCompletion.super.this();
[scalacfork]       ()
[scalacfork]     };
[scalacfork]     private[this] val EXPAND_SEPARATOR_STRING: java.lang.String = "$$$$";
[scalacfork]     <stable> <accessor> def EXPAND_SEPARATOR_STRING(): java.lang.String = PackageCompletion.this.EXPAND_SEPARATOR_STRING;
[scalacfork]     private[this] val ANON_CLASS_NAME: java.lang.String = "$$anon";
[scalacfork]     <stable> <accessor> def ANON_CLASS_NAME(): java.lang.String = PackageCompletion.this.ANON_CLASS_NAME;
[scalacfork]     private[this] val TRAIT_SETTER_SEPARATOR_STRING: java.lang.String = "$$_setter_$$";
[scalacfork]     <stable> <accessor> def TRAIT_SETTER_SEPARATOR_STRING(): java.lang.String = PackageCompletion.this.TRAIT_SETTER_SEPARATOR_STRING;
[scalacfork]     private[this] val IMPL_CLASS_SUFFIX: java.lang.String = "$$class";
[scalacfork]     <stable> <accessor> def IMPL_CLASS_SUFFIX(): java.lang.String = PackageCompletion.this.IMPL_CLASS_SUFFIX;
[scalacfork]     def ignoreClassName(x: java.lang.String): Boolean = x.contains(PackageCompletion.this.EXPAND_SEPARATOR_STRING()).||(x.contains(PackageCompletion.this.ANON_CLASS_NAME())).||(x.contains(PackageCompletion.this.TRAIT_SETTER_SEPARATOR_STRING())).||(x.endsWith(PackageCompletion.this.IMPL_CLASS_SUFFIX())).||(x.matches(".*\$$\d+$$"));
[scalacfork]     def enumToList(e: java.util.Enumeration): List = PackageCompletion.this.enumToListInternal(e, immutable.this.Nil);
[scalacfork]     private def enumToListInternal(e: java.util.Enumeration, xs: List): List = {
[scalacfork]       <synthetic> val _$$this: object scala.tools.nsc.interpreter.PackageCompletion = PackageCompletion.this;
[scalacfork]       _enumToListInternal(_$$this,e,xs){
[scalacfork]         if (e.==(null).||(e.hasMoreElements().unary_!()))
[scalacfork]           xs
[scalacfork]         else
[scalacfork]           _enumToListInternal(PackageCompletion.this, e, {
[scalacfork]             <synthetic> val x$$7: java.lang.Object = e.nextElement();
[scalacfork]             xs.::(x$$7)
[scalacfork]           })
[scalacfork]       }
[scalacfork]     };
[scalacfork]     final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$isClass(s: java.lang.String): Boolean = s.endsWith(".class");
[scalacfork]     private def processNames(xs: List): List = xs.map({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this(): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(x$$8: java.lang.String): java.lang.String = scala.this.Predef.augmentString(x$$8).dropRight(6);
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(): Function1)
[scalacfork]     }, immutable.this.List.canBuildFrom()).filterNot({
[scalacfork]       {
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x: java.lang.String): Boolean = PackageCompletion.this.ignoreClassName(x);
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       }
[scalacfork]     }).distinct();
[scalacfork]     def getDirClassFiles(dir: scala.tools.nsc.io.Directory): List = PackageCompletion.this.processNames(dir.deepList(dir.deepList$$default$$1()).map({
[scalacfork]       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]         def this(): anonymous class $$anonfun = {
[scalacfork]           $$anonfun.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def apply(x$$9: scala.tools.nsc.io.Path): java.lang.String = dir.relativize(x$$9).path();
[scalacfork]         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]       };
[scalacfork]       (new anonymous class $$anonfun(): Function1)
[scalacfork]     }).filter({
[scalacfork]       {
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(s: java.lang.String): Boolean = PackageCompletion.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$isClass(s);
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       }
[scalacfork]     }).toList());
[scalacfork]     def getJarClassFiles(jar: scala.tools.nsc.io.File): List = if (jar.exists().unary_!())
[scalacfork]       immutable.this.Nil
[scalacfork]     else
[scalacfork]       PackageCompletion.this.processNames(PackageCompletion.this.enumToList(new scalahack.io.JarFile(new scalahack.io.File(jar.path())).entries()).map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$10: java.util.jar.JarEntry): java.lang.String = x$$10.getName();
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       }, immutable.this.List.canBuildFrom()).filter({
[scalacfork]         {
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(s: java.lang.String): Boolean = PackageCompletion.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$isClass(s);
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }
[scalacfork]       }));
[scalacfork]     final class CompletionInfo extends java.lang.Object with ScalaObject {
[scalacfork]       def this(): object scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = {
[scalacfork]         CompletionInfo.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       def unapply(that: java.lang.Object): Option = {
[scalacfork]         var temp13: java.lang.Object = that;
[scalacfork]         if (temp13.isInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]())
[scalacfork]           {
[scalacfork]             var temp14: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = temp13.asInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]();
[scalacfork]             val x: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = temp14;
[scalacfork]             new Some(new Tuple2(x.visibleName(), x.className()))
[scalacfork]           }
[scalacfork]         else
[scalacfork]           {
[scalacfork]             scala.None
[scalacfork]           }
[scalacfork]       }
[scalacfork]     };
[scalacfork]     abstract class CompletionInfo extends java.lang.Object with ScalaObject {
[scalacfork]       def this(): scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = {
[scalacfork]         CompletionInfo.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       def visibleName(): java.lang.String;
[scalacfork]       def className(): java.lang.String;
[scalacfork]       def getBytes(): Array[Byte];
[scalacfork]       override def hashCode(): Int = CompletionInfo.this.visibleName().hashCode();
[scalacfork]       override def equals(other: java.lang.Object): Boolean = {
[scalacfork]         var temp15: java.lang.Object = other;
[scalacfork]         if (temp15.isInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]())
[scalacfork]           {
[scalacfork]             CompletionInfo.this.visibleName().==(temp15.asInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]().visibleName())
[scalacfork]           }
[scalacfork]         else
[scalacfork]           {
[scalacfork]             false
[scalacfork]           }
[scalacfork]       }
[scalacfork]     };
[scalacfork]     @serializable case class DirCompletionInfo extends scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo with ScalaObject with Product {
[scalacfork]       <synthetic> def copy$$default$$3(): scala.tools.nsc.io.Directory = DirCompletionInfo.this.dir();
[scalacfork]       <synthetic> def copy$$default$$2(): java.lang.String = DirCompletionInfo.this.className();
[scalacfork]       <synthetic> def copy$$default$$1(): java.lang.String = DirCompletionInfo.this.visibleName();
[scalacfork]       <caseaccessor> <paramaccessor> private[this] val visibleName: java.lang.String = _;
[scalacfork]       <stable> <caseaccessor> <accessor> <paramaccessor> def visibleName(): java.lang.String = DirCompletionInfo.this.visibleName;
[scalacfork]       <caseaccessor> <paramaccessor> private[this] val className: java.lang.String = _;
[scalacfork]       <stable> <caseaccessor> <accessor> <paramaccessor> def className(): java.lang.String = DirCompletionInfo.this.className;
[scalacfork]       <caseaccessor> <paramaccessor> private[this] val dir: scala.tools.nsc.io.Directory = _;
[scalacfork]       <stable> <caseaccessor> <accessor> <paramaccessor> def dir(): scala.tools.nsc.io.Directory = DirCompletionInfo.this.dir;
[scalacfork]       def this(visibleName: java.lang.String, className: java.lang.String, dir: scala.tools.nsc.io.Directory): scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo = {
[scalacfork]         DirCompletionInfo.super.this();
[scalacfork]         DirCompletionInfo.this./*Product$$class*/$$init$$();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       lazy private[this] var file: scala.tools.nsc.io.File = _;
[scalacfork]       <stable> <accessor> lazy def file(): scala.tools.nsc.io.File = {
[scalacfork]         DirCompletionInfo.this.file = DirCompletionInfo.this.dir()./({
[scalacfork]           val x$$17: scala.tools.nsc.io.Path = io.this.Path.string2path(DirCompletionInfo.this.className());
[scalacfork]           val x$$18: scala.io.Codec = io.File.apply$$default$$2(x$$17);
[scalacfork]           io.File.apply(x$$17, x$$18)
[scalacfork]         });
[scalacfork]         DirCompletionInfo.this.file
[scalacfork]       };
[scalacfork]       def getBytes(): Array[Byte] = try {
[scalacfork]         DirCompletionInfo.this.file().toByteArray()
[scalacfork]       } catch {
[scalacfork]         case (_: java.lang.Exception) => scala.Array.apply(scala.this.Predef.wrapByteArray(Array[Byte]{}.$$asInstanceOf[Array[Byte]]()), reflect.this.Manifest.Byte())
[scalacfork]       };
[scalacfork]       <synthetic> def copy(visibleName: java.lang.String = visibleName, className: java.lang.String = className, dir: scala.tools.nsc.io.Directory = dir): scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo = new scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo(visibleName, className, dir);
[scalacfork]       override def toString(): java.lang.String = ScalaRunTime.this._toString(DirCompletionInfo.this);
[scalacfork]       override def productPrefix(): java.lang.String = "DirCompletionInfo";
[scalacfork]       override def productArity(): Int = 3;
[scalacfork]       override def productElement(x$$1: Int): java.lang.Object = {
[scalacfork]         val temp17: Int = x$$1;
[scalacfork]         (temp17: Int) match {
[scalacfork]           case 0 => {
[scalacfork]             visibleName()
[scalacfork]           }
[scalacfork]           case 1 => {
[scalacfork]             className()
[scalacfork]           }
[scalacfork]           case 2 => {
[scalacfork]             dir()
[scalacfork]           }
[scalacfork]           case _ => {
[scalacfork]             throw new java.lang.IndexOutOfBoundsException(x$$1.toString())
[scalacfork]           }
[scalacfork]         }
[scalacfork]       };
[scalacfork]       override def canEqual(x$$1: java.lang.Object): Boolean = x$$1.$$isInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo]()
[scalacfork]     };
[scalacfork]     @serializable case class JarCompletionInfo extends scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo with ScalaObject with Product {
[scalacfork]       <synthetic> def copy$$default$$3(): scala.tools.nsc.io.File = JarCompletionInfo.this.jar();
[scalacfork]       <synthetic> def copy$$default$$2(): java.lang.String = JarCompletionInfo.this.className();
[scalacfork]       <synthetic> def copy$$default$$1(): java.lang.String = JarCompletionInfo.this.visibleName();
[scalacfork]       <caseaccessor> <paramaccessor> private[this] val visibleName: java.lang.String = _;
[scalacfork]       <stable> <caseaccessor> <accessor> <paramaccessor> def visibleName(): java.lang.String = JarCompletionInfo.this.visibleName;
[scalacfork]       <caseaccessor> <paramaccessor> private[this] val className: java.lang.String = _;
[scalacfork]       <stable> <caseaccessor> <accessor> <paramaccessor> def className(): java.lang.String = JarCompletionInfo.this.className;
[scalacfork]       <caseaccessor> <paramaccessor> private[this] val jar: scala.tools.nsc.io.File = _;
[scalacfork]       <stable> <caseaccessor> <accessor> <paramaccessor> def jar(): scala.tools.nsc.io.File = JarCompletionInfo.this.jar;
[scalacfork]       def this(visibleName: java.lang.String, className: java.lang.String, jar: scala.tools.nsc.io.File): scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = {
[scalacfork]         JarCompletionInfo.super.this();
[scalacfork]         JarCompletionInfo.this./*Product$$class*/$$init$$();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       lazy private[this] var jarfile: scalahack.io.JarFile = _;
[scalacfork]       <stable> <accessor> lazy def jarfile(): scalahack.io.JarFile = {
[scalacfork]         JarCompletionInfo.this.jarfile = new scalahack.io.JarFile(new scalahack.io.File(JarCompletionInfo.this.jar().path()));
[scalacfork]         JarCompletionInfo.this.jarfile
[scalacfork]       };
[scalacfork]       lazy private[this] var entry: java.util.zip.ZipEntry = _;
[scalacfork]       <stable> <accessor> lazy def entry(): java.util.zip.ZipEntry = {
[scalacfork]         JarCompletionInfo.this.entry = JarCompletionInfo.this.jarfile().getEntry(JarCompletionInfo.this.className());
[scalacfork]         JarCompletionInfo.this.entry
[scalacfork]       };
[scalacfork]       def getBytes(): Array[Byte] = if (JarCompletionInfo.this.entry().==(null))
[scalacfork]         scala.Array.apply(scala.this.Predef.wrapByteArray(Array[Byte]{}.$$asInstanceOf[Array[Byte]]()), reflect.this.Manifest.Byte())
[scalacfork]       else
[scalacfork]         {
[scalacfork]           val x: scala.tools.nsc.io.Streamable#Bytes = {
[scalacfork]             final class $$anon extends java.lang.Object with scala.tools.nsc.io.Streamable#Bytes {
[scalacfork]               def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo): anonymous class $$anon = {
[scalacfork]                 $$anon.super.this();
[scalacfork]                 $$anon.this./*Bytes$$class*/$$init$$();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               def inputStream(): java.io.InputStream = $$anon.this.$$outer.jarfile().getInputStream($$anon.this.$$outer.entry());
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$JarCompletionInfo$$$$anon$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = $$anon.this.$$outer
[scalacfork]             };
[scalacfork]             new anonymous class $$anon(JarCompletionInfo.this)
[scalacfork]           };
[scalacfork]           x.toByteArray()
[scalacfork]         };
[scalacfork]       <synthetic> def copy(visibleName: java.lang.String = visibleName, className: java.lang.String = className, jar: scala.tools.nsc.io.File = jar): scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = new scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo(visibleName, className, jar);
[scalacfork]       override def toString(): java.lang.String = ScalaRunTime.this._toString(JarCompletionInfo.this);
[scalacfork]       override def productPrefix(): java.lang.String = "JarCompletionInfo";
[scalacfork]       override def productArity(): Int = 3;
[scalacfork]       override def productElement(x$$1: Int): java.lang.Object = {
[scalacfork]         val temp18: Int = x$$1;
[scalacfork]         (temp18: Int) match {
[scalacfork]           case 0 => {
[scalacfork]             visibleName()
[scalacfork]           }
[scalacfork]           case 1 => {
[scalacfork]             className()
[scalacfork]           }
[scalacfork]           case 2 => {
[scalacfork]             jar()
[scalacfork]           }
[scalacfork]           case _ => {
[scalacfork]             throw new java.lang.IndexOutOfBoundsException(x$$1.toString())
[scalacfork]           }
[scalacfork]         }
[scalacfork]       };
[scalacfork]       override def canEqual(x$$1: java.lang.Object): Boolean = x$$1.$$isInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo]()
[scalacfork]     };
[scalacfork]     def getDottedPaths(map: java.util.concurrent.ConcurrentHashMap, classpath: List): Unit = {
[scalacfork]       val cp: List = classpath.distinct().map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x: java.net.URL): scala.tools.nsc.io.Path = io.Path.apply(x.getPath());
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       }, immutable.this.List.canBuildFrom());
[scalacfork]       val jars: List = cp.filter({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$11: scala.tools.nsc.io.Path): Boolean = x$$11.hasExtension("jar", scala.this.Predef.wrapRefArray(Array[java.lang.String]{}.$$asInstanceOf[Array[java.lang.String]]()));
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       }).map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$12: scala.tools.nsc.io.Path): scala.tools.nsc.io.File = x$$12.toFile();
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       }, immutable.this.List.canBuildFrom());
[scalacfork]       def isUnderScalaHome(d: scala.tools.nsc.io.Directory): Boolean = d.parents().exists({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$13: scala.tools.nsc.io.Directory): Boolean = x$$13.==(scala.tools.util.PathResolver.Defaults.scalaHomeDir());
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       });
[scalacfork]       val dirs: List = cp.collect({
[scalacfork]         final <synthetic> class $$anonfun extends java.lang.Object with PartialFunction {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             $$anonfun.this./*Function1$$class*/$$init$$();
[scalacfork]             $$anonfun.this./*PartialFunction$$class*/$$init$$();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x0$$1: scala.tools.nsc.io.Path): scala.tools.nsc.io.Directory = {
[scalacfork]             var temp19: scala.tools.nsc.io.Path = x0$$1;
[scalacfork]             if (temp19.isInstanceOf[scala.tools.nsc.io.Directory]())
[scalacfork]               {
[scalacfork]                 temp19.asInstanceOf[scala.tools.nsc.io.Directory]()
[scalacfork]               }
[scalacfork]             else
[scalacfork]               throw new MatchError(temp19)
[scalacfork]           };
[scalacfork]           final def isDefinedAt(x$$1: scala.tools.nsc.io.Path): Boolean = {
[scalacfork]             var temp21: scala.tools.nsc.io.Path = x$$1;
[scalacfork]             temp21.isInstanceOf[scala.tools.nsc.io.Directory]()
[scalacfork]           };
[scalacfork]           override <bridge> def andThen(g: Function1): Function1 = $$anonfun.this.andThen(g);
[scalacfork]           final <bridge> def isDefinedAt(x: java.lang.Object): Boolean = $$anonfun.this.isDefinedAt(x);
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): PartialFunction)
[scalacfork]       }, immutable.this.List.canBuildFrom()).filter({
[scalacfork]         {
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(d: scala.tools.nsc.io.Directory): Boolean = isUnderScalaHome(d);
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }
[scalacfork]       });
[scalacfork]       def subpaths(s: java.lang.String): List = {
[scalacfork]         val segs: Array[java.lang.String] = scala.reflect.NameTransformer.decode(s).split("[/.]");
[scalacfork]         val components: Array[java.lang.String] = scala.this.Predef.refArrayOps(segs).dropRight(1);
[scalacfork]         scala.this.Predef.intWrapper(1).to(components.<arr>length()).toList().flatMap({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(i: Int): List = {
[scalacfork]               val k: java.lang.String = scala.this.Predef.refArrayOps(scala.this.Predef.refArrayOps(components).take(i)).mkString(".");
[scalacfork]               if (segs.<arr>apply(i).contains("$$"))
[scalacfork]                 {
[scalacfork]                   val dollarsegs: List = scala.this.Predef.refArrayOps(segs.<arr>apply(i).split("$$")).toList();
[scalacfork]                   scala.this.Predef.intWrapper(1).to(dollarsegs.length().-(1)).toList().map({
[scalacfork]                     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                       def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                         $$anonfun.super.this();
[scalacfork]                         ()
[scalacfork]                       };
[scalacfork]                       final def apply(j: Int): Tuple2 = {
[scalacfork]                         val newk: java.lang.String = k.+(".").+(dollarsegs.take(j).mkString("."));
[scalacfork]                         scala.this.Predef.any2ArrowAssoc(k).->(dollarsegs.apply(j))
[scalacfork]                       };
[scalacfork]                       <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                       final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                     };
[scalacfork]                     (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                   }, immutable.this.List.canBuildFrom())
[scalacfork]                 }
[scalacfork]               else
[scalacfork]                 immutable.this.List.apply(scala.this.Predef.wrapRefArray(Array[Tuple2]{scala.this.Predef.any2ArrowAssoc(k).->(segs.<arr>apply(i))}.$$asInstanceOf[Array[Tuple2]]()))
[scalacfork]             };
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }, immutable.this.List.canBuildFrom())
[scalacfork]       };
[scalacfork]       def addToMap(key: java.lang.String, info: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): java.lang.Object = if (map.containsKey(key))
[scalacfork]         {
[scalacfork]           val vs: List = map.get(key);
[scalacfork]           if (vs.contains(info))
[scalacfork]             ()
[scalacfork]           else
[scalacfork]             map.put(key, {
[scalacfork]               <synthetic> val x$$14: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = info;
[scalacfork]               vs.::(x$$14)
[scalacfork]             })
[scalacfork]         }
[scalacfork]       else
[scalacfork]         map.put(key, immutable.this.List.apply(scala.this.Predef.wrapRefArray(Array[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]{info}.$$asInstanceOf[Array[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]]())));
[scalacfork]       def oneDir(dir: scala.tools.nsc.io.Directory): Unit = PackageCompletion.this.getDirClassFiles(dir).foreach({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(cl: java.lang.String): Unit = subpaths(cl).foreach({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(x$$15: Tuple2): java.lang.Object = {
[scalacfork]                 var temp23: Tuple2 = x$$15;
[scalacfork]                 if (temp23.ne(null))
[scalacfork]                   {
[scalacfork]                     addToMap(temp23._1(), new scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo(temp23._2(), cl, dir))
[scalacfork]                   }
[scalacfork]                 else
[scalacfork]                   throw new MatchError(temp23)
[scalacfork]               };
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]           });
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       });
[scalacfork]       def oneJar(jar: scala.tools.nsc.io.File): Unit = PackageCompletion.this.getJarClassFiles(jar).foreach({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(cl: java.lang.String): Unit = subpaths(cl).foreach({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(x$$16: Tuple2): java.lang.Object = {
[scalacfork]                 var temp26: Tuple2 = x$$16;
[scalacfork]                 if (temp26.ne(null))
[scalacfork]                   {
[scalacfork]                     addToMap(temp26._1(), new scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo(temp26._2(), cl, jar))
[scalacfork]                   }
[scalacfork]                 else
[scalacfork]                   throw new MatchError(temp26)
[scalacfork]               };
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]           });
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       });
[scalacfork]       jars.foreach({
[scalacfork]         {
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(jar: scala.tools.nsc.io.File): Unit = oneJar(jar);
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }
[scalacfork]       });
[scalacfork]       dirs.foreach({
[scalacfork]         {
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(dir: scala.tools.nsc.io.Directory): Unit = oneDir(dir);
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }
[scalacfork]       })
[scalacfork]     };
[scalacfork]     final <synthetic> class JarCompletionInfo extends scala.runtime.AbstractFunction3 with ScalaObject {
[scalacfork]       def this(): object scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = {
[scalacfork]         JarCompletionInfo.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       case <synthetic> def unapply(x$$0: scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo): Option = if (x$$0.==(null))
[scalacfork]         scala.this.None
[scalacfork]       else
[scalacfork]         new Some(new Tuple3(x$$0.visibleName(), x$$0.className(), x$$0.jar()));
[scalacfork]       case <synthetic> def apply(visibleName: java.lang.String, className: java.lang.String, jar: scala.tools.nsc.io.File): scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = new scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo(visibleName, className, jar);
[scalacfork]       case <synthetic> <bridge> def apply(v1: java.lang.Object, v2: java.lang.Object, v3: java.lang.Object): java.lang.Object = JarCompletionInfo.this.apply(v1, v2, v3)
[scalacfork]     };
[scalacfork]     final <synthetic> class DirCompletionInfo extends scala.runtime.AbstractFunction3 with ScalaObject {
[scalacfork]       def this(): object scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo = {
[scalacfork]         DirCompletionInfo.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       case <synthetic> def unapply(x$$0: scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo): Option = if (x$$0.==(null))
[scalacfork]         scala.this.None
[scalacfork]       else
[scalacfork]         new Some(new Tuple3(x$$0.visibleName(), x$$0.className(), x$$0.dir()));
[scalacfork]       case <synthetic> def apply(visibleName: java.lang.String, className: java.lang.String, dir: scala.tools.nsc.io.Directory): scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo = new scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo(visibleName, className, dir);
[scalacfork]       case <synthetic> <bridge> def apply(v1: java.lang.Object, v2: java.lang.Object, v3: java.lang.Object): java.lang.Object = DirCompletionInfo.this.apply(v1, v2, v3)
[scalacfork]     }
[scalacfork]   }
[scalacfork] }
[scalacfork] exception when typing package scala.tools.nsc {
[scalacfork]   package interpreter {
[scalacfork]     class PackageCompletion extends java.lang.Object with scala.tools.nsc.interpreter.CompletionAware with ScalaObject {
[scalacfork]       <local> <paramaccessor> val scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$classpath: List = _;
[scalacfork]       def this(classpath: List): scala.tools.nsc.interpreter.PackageCompletion = {
[scalacfork]         PackageCompletion.super.this();
[scalacfork]         PackageCompletion.this./*CompletionAware$$class*/$$init$$();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       class CompletionAgent extends java.lang.Object with ScalaObject {
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = {
[scalacfork]           CompletionAgent.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         private[this] val dottedPaths: java.util.concurrent.ConcurrentHashMap = new java.util.concurrent.ConcurrentHashMap();
[scalacfork]         <stable> <accessor> def dottedPaths(): java.util.concurrent.ConcurrentHashMap = CompletionAgent.this.dottedPaths;
[scalacfork]         private[this] val topLevelPackages: scala.concurrent.DelayedLazyVal = new scala.concurrent.DelayedLazyVal({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(): List = PackageCompletion.enumToList($$anonfun.this.$$outer.dottedPaths().keys()).filterNot({
[scalacfork]               final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                 def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                   $$anonfun.super.this();
[scalacfork]                   ()
[scalacfork]                 };
[scalacfork]                 final def apply(x$$1: java.lang.String): Boolean = scala.this.Predef.augmentString(x$$1).contains('.');
[scalacfork]                 <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                 final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]               };
[scalacfork]               (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]             });
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(CompletionAgent.this): Function0)
[scalacfork]         }, {
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0$$mcV$$sp {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(): Unit = $$anonfun.this.apply$$mcV$$sp();
[scalacfork]             <specialized> def apply$$mcV$$sp(): Unit = PackageCompletion.getDottedPaths($$anonfun.this.$$outer.dottedPaths(), $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$$$outer().scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$classpath);
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(CompletionAgent.this): Function0)
[scalacfork]         });
[scalacfork]         <stable> <accessor> def topLevelPackages(): scala.concurrent.DelayedLazyVal = CompletionAgent.this.topLevelPackages;
[scalacfork]         protected <synthetic> <paramaccessor> val $$outer: scala.tools.nsc.interpreter.PackageCompletion = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$CompletionAgent$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion = CompletionAgent.this.$$outer
[scalacfork]       };
[scalacfork]       private[this] val agent: scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = new scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent(PackageCompletion.this);
[scalacfork]       <stable> <accessor> def agent(): scala.tools.nsc.interpreter.PackageCompletion#CompletionAgent = PackageCompletion.this.agent;
[scalacfork]       def completions(): List = PackageCompletion.this.agent().topLevelPackages().apply();
[scalacfork]       override def follow(id: java.lang.String): Option = if (PackageCompletion.this.agent().dottedPaths().containsKey(id))
[scalacfork]         new Some(new scala.tools.nsc.interpreter.PackageCompletion#SubCompletor(PackageCompletion.this, id))
[scalacfork]       else
[scalacfork]         scala.None;
[scalacfork]       class SubCompletor extends java.lang.Object with scala.tools.nsc.interpreter.CompletionAware with ScalaObject {
[scalacfork]         <local> <paramaccessor> val scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root: java.lang.String = _;
[scalacfork]         def this($$outer: scala.tools.nsc.interpreter.PackageCompletion, root: java.lang.String): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = {
[scalacfork]           SubCompletor.super.this();
[scalacfork]           SubCompletor.this./*CompletionAware$$class*/$$init$$();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor(path: java.lang.String): Option = ByteCode.aliasForType(path).flatMap({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(name: java.lang.String): Option = interpreter.this.package.classForName(name.+("$$")).map({
[scalacfork]               final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                 def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                   $$anonfun.super.this();
[scalacfork]                   ()
[scalacfork]                 };
[scalacfork]                 final def apply(clazz: java.lang.Class): scala.tools.nsc.interpreter.StaticCompletion = new scala.tools.nsc.interpreter.StaticCompletion(clazz);
[scalacfork]                 <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                 final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]               };
[scalacfork]               (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]             });
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]         });
[scalacfork]         lazy private[this] var pkgObject: Option = _;
[scalacfork]         <stable> <accessor> lazy def pkgObject(): Option = {
[scalacfork]           SubCompletor.this.pkgObject = interpreter.this.package.classForName(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".package$$")).map({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(x: java.lang.Class): scala.tools.nsc.interpreter.PackageObjectCompletion = new scala.tools.nsc.interpreter.PackageObjectCompletion(x);
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]           });
[scalacfork]           SubCompletor.this.pkgObject
[scalacfork]         };
[scalacfork]         def pkgObjectMembers(): List = SubCompletor.this.pkgObject().map({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x$$2: scala.tools.nsc.interpreter.PackageObjectCompletion): List = x$$2.completionsFor(Parsed.apply(""));
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]         }).getOrElse({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(): object Nil = immutable.this.Nil;
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]         });
[scalacfork]         final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos(): List = scala.Option.apply(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer().agent().dottedPaths().get(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root)).getOrElse({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]             def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(): object Nil = immutable.this.Nil;
[scalacfork]             <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]             <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]             final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]         });
[scalacfork]         def completions(): List = {
[scalacfork]           val xs: List = SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos().map({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(x$$3: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): java.lang.String = x$$3.visibleName();
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]           }, immutable.this.List.canBuildFrom()).filterNot({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(x$$4: java.lang.String): Boolean = x$$4.==("package");
[scalacfork]               <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]               <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(SubCompletor.this): Function1)
[scalacfork]           });
[scalacfork]           {
[scalacfork]             <synthetic> val x$$5: List = xs;
[scalacfork]             SubCompletor.this.pkgObjectMembers().:::(x$$5)
[scalacfork]           }
[scalacfork]         };
[scalacfork]         override def follow(segment: java.lang.String): Option = {
[scalacfork]           <synthetic> val nonLocalReturnKey1: java.lang.Object = new java.lang.Object();
[scalacfork]           try {
[scalacfork]             SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer().follow(SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".").+(segment)).orElse({
[scalacfork]               final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction0 {
[scalacfork]                 def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor): anonymous class $$anonfun = {
[scalacfork]                   $$anonfun.super.this();
[scalacfork]                   ()
[scalacfork]                 };
[scalacfork]                 final def apply(): Option = {
[scalacfork]                   $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$infos().filter({
[scalacfork]                     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                       def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                         $$anonfun.super.this();
[scalacfork]                         ()
[scalacfork]                       };
[scalacfork]                       final def apply(check$$ifrefutable$$1: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): Boolean = {
[scalacfork]                         var temp1: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = check$$ifrefutable$$1;
[scalacfork]                         {
[scalacfork]                           var temp2: Option = PackageCompletion.CompletionInfo.unapply(temp1);
[scalacfork]                           if (temp2.isEmpty().unary_!())
[scalacfork]                             {
[scalacfork]                               segment.==(temp2.get()._1())
[scalacfork]                             }
[scalacfork]                           else
[scalacfork]                             {
[scalacfork]                               false
[scalacfork]                             }
[scalacfork]                         }
[scalacfork]                       };
[scalacfork]                       <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                       final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                     };
[scalacfork]                     (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                   }).foreach({
[scalacfork]                     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                       def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                         $$anonfun.super.this();
[scalacfork]                         ()
[scalacfork]                       };
[scalacfork]                       final def apply(x$$6: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): Unit = {
[scalacfork]                         var temp7: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = x$$6;
[scalacfork]                         {
[scalacfork]                           var temp8: Option = PackageCompletion.CompletionInfo.unapply(temp7);
[scalacfork]                           if (temp8.isEmpty().unary_!())
[scalacfork]                             {
[scalacfork]                               var temp9: Tuple2 = temp8.get();
[scalacfork]                               var temp11: java.lang.String = temp9._2();
[scalacfork]                               if (segment.==(temp9._1()))
[scalacfork]                                 {
[scalacfork]                                   interpreter.this.package.classForName(temp11).foreach({
[scalacfork]                                     final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                                       def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                                         $$anonfun.super.this();
[scalacfork]                                         ()
[scalacfork]                                       };
[scalacfork]                                       final def apply(clazz: java.lang.Class): Nothing = throw new scala.runtime.NonLocalReturnControl(nonLocalReturnKey1, new Some(new scala.tools.nsc.interpreter.StaticCompletion(clazz)));
[scalacfork]                                       <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                                       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                                       final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                                     };
[scalacfork]                                     (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                                   })
[scalacfork]                                 }
[scalacfork]                               else
[scalacfork]                                 throw new MatchError(temp7)
[scalacfork]                             }
[scalacfork]                           else
[scalacfork]                             throw new MatchError(temp7)
[scalacfork]                         }
[scalacfork]                       };
[scalacfork]                       <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                       <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                       final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                     };
[scalacfork]                     (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                   });
[scalacfork]                   $$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$aliasCompletor($$anonfun.this.$$outer.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root.+(".").+(segment))
[scalacfork]                 };
[scalacfork]                 <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = _;
[scalacfork]                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$anonfun$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#SubCompletor = $$anonfun.this.$$outer;
[scalacfork]                 final <bridge> def apply(): java.lang.Object = $$anonfun.this.apply()
[scalacfork]               };
[scalacfork]               (new anonymous class $$anonfun(SubCompletor.this): Function0)
[scalacfork]             })
[scalacfork]           } catch {
[scalacfork]             case (ex @ (_: scala.runtime.NonLocalReturnControl)) => if (ex.key().eq(nonLocalReturnKey1))
[scalacfork]               ex.value().asInstanceOf[Option]()
[scalacfork]             else
[scalacfork]               throw ex
[scalacfork]           }
[scalacfork]         };
[scalacfork]         override def toString(): java.lang.String = scala.this.Predef.augmentString("SubCompletor(%s)").format(scala.this.Predef.genericWrapArray(Array[java.lang.Object]{SubCompletor.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$root}.$$asInstanceOf[Array[java.lang.Object]]()));
[scalacfork]         protected <synthetic> <paramaccessor> val $$outer: scala.tools.nsc.interpreter.PackageCompletion = _;
[scalacfork]         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$SubCompletor$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion = SubCompletor.this.$$outer
[scalacfork]       }
[scalacfork]     };
[scalacfork]     final class PackageCompletion extends java.lang.Object with ScalaObject {
[scalacfork]       def this(): object scala.tools.nsc.interpreter.PackageCompletion = {
[scalacfork]         PackageCompletion.super.this();
[scalacfork]         ()
[scalacfork]       };
[scalacfork]       private[this] val EXPAND_SEPARATOR_STRING: java.lang.String = "$$$$";
[scalacfork]       <stable> <accessor> def EXPAND_SEPARATOR_STRING(): java.lang.String = PackageCompletion.this.EXPAND_SEPARATOR_STRING;
[scalacfork]       private[this] val ANON_CLASS_NAME: java.lang.String = "$$anon";
[scalacfork]       <stable> <accessor> def ANON_CLASS_NAME(): java.lang.String = PackageCompletion.this.ANON_CLASS_NAME;
[scalacfork]       private[this] val TRAIT_SETTER_SEPARATOR_STRING: java.lang.String = "$$_setter_$$";
[scalacfork]       <stable> <accessor> def TRAIT_SETTER_SEPARATOR_STRING(): java.lang.String = PackageCompletion.this.TRAIT_SETTER_SEPARATOR_STRING;
[scalacfork]       private[this] val IMPL_CLASS_SUFFIX: java.lang.String = "$$class";
[scalacfork]       <stable> <accessor> def IMPL_CLASS_SUFFIX(): java.lang.String = PackageCompletion.this.IMPL_CLASS_SUFFIX;
[scalacfork]       def ignoreClassName(x: java.lang.String): Boolean = x.contains(PackageCompletion.this.EXPAND_SEPARATOR_STRING()).||(x.contains(PackageCompletion.this.ANON_CLASS_NAME())).||(x.contains(PackageCompletion.this.TRAIT_SETTER_SEPARATOR_STRING())).||(x.endsWith(PackageCompletion.this.IMPL_CLASS_SUFFIX())).||(x.matches(".*\$$\d+$$"));
[scalacfork]       def enumToList(e: java.util.Enumeration): List = PackageCompletion.this.enumToListInternal(e, immutable.this.Nil);
[scalacfork]       private def enumToListInternal(e: java.util.Enumeration, xs: List): List = {
[scalacfork]         <synthetic> val _$$this: object scala.tools.nsc.interpreter.PackageCompletion = PackageCompletion.this;
[scalacfork]         _enumToListInternal(_$$this,e,xs){
[scalacfork]           if (e.==(null).||(e.hasMoreElements().unary_!()))
[scalacfork]             xs
[scalacfork]           else
[scalacfork]             _enumToListInternal(PackageCompletion.this, e, {
[scalacfork]               <synthetic> val x$$7: java.lang.Object = e.nextElement();
[scalacfork]               xs.::(x$$7)
[scalacfork]             })
[scalacfork]         }
[scalacfork]       };
[scalacfork]       final def scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$isClass(s: java.lang.String): Boolean = s.endsWith(".class");
[scalacfork]       private def processNames(xs: List): List = xs.map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$8: java.lang.String): java.lang.String = scala.this.Predef.augmentString(x$$8).dropRight(6);
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       }, immutable.this.List.canBuildFrom()).filterNot({
[scalacfork]         {
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x: java.lang.String): Boolean = PackageCompletion.this.ignoreClassName(x);
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }
[scalacfork]       }).distinct();
[scalacfork]       def getDirClassFiles(dir: scala.tools.nsc.io.Directory): List = PackageCompletion.this.processNames(dir.deepList(dir.deepList$$default$$1()).map({
[scalacfork]         final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]           def this(): anonymous class $$anonfun = {
[scalacfork]             $$anonfun.super.this();
[scalacfork]             ()
[scalacfork]           };
[scalacfork]           final def apply(x$$9: scala.tools.nsc.io.Path): java.lang.String = dir.relativize(x$$9).path();
[scalacfork]           final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]         };
[scalacfork]         (new anonymous class $$anonfun(): Function1)
[scalacfork]       }).filter({
[scalacfork]         {
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(s: java.lang.String): Boolean = PackageCompletion.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$isClass(s);
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }
[scalacfork]       }).toList());
[scalacfork]       def getJarClassFiles(jar: scala.tools.nsc.io.File): List = if (jar.exists().unary_!())
[scalacfork]         immutable.this.Nil
[scalacfork]       else
[scalacfork]         PackageCompletion.this.processNames(PackageCompletion.this.enumToList(new scalahack.io.JarFile(new scalahack.io.File(jar.path())).entries()).map({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x$$10: java.util.jar.JarEntry): java.lang.String = x$$10.getName();
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }, immutable.this.List.canBuildFrom()).filter({
[scalacfork]           {
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this(): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(s: java.lang.String): Boolean = PackageCompletion.this.scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$isClass(s);
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(): Function1)
[scalacfork]           }
[scalacfork]         }));
[scalacfork]       final class CompletionInfo extends java.lang.Object with ScalaObject {
[scalacfork]         def this(): object scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = {
[scalacfork]           CompletionInfo.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         def unapply(that: java.lang.Object): Option = {
[scalacfork]           var temp13: java.lang.Object = that;
[scalacfork]           if (temp13.isInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]())
[scalacfork]             {
[scalacfork]               var temp14: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = temp13.asInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]();
[scalacfork]               val x: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = temp14;
[scalacfork]               new Some(new Tuple2(x.visibleName(), x.className()))
[scalacfork]             }
[scalacfork]           else
[scalacfork]             {
[scalacfork]               scala.None
[scalacfork]             }
[scalacfork]         }
[scalacfork]       };
[scalacfork]       abstract class CompletionInfo extends java.lang.Object with ScalaObject {
[scalacfork]         def this(): scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = {
[scalacfork]           CompletionInfo.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         def visibleName(): java.lang.String;
[scalacfork]         def className(): java.lang.String;
[scalacfork]         def getBytes(): Array[Byte];
[scalacfork]         override def hashCode(): Int = CompletionInfo.this.visibleName().hashCode();
[scalacfork]         override def equals(other: java.lang.Object): Boolean = {
[scalacfork]           var temp15: java.lang.Object = other;
[scalacfork]           if (temp15.isInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]())
[scalacfork]             {
[scalacfork]               CompletionInfo.this.visibleName().==(temp15.asInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]().visibleName())
[scalacfork]             }
[scalacfork]           else
[scalacfork]             {
[scalacfork]               false
[scalacfork]             }
[scalacfork]         }
[scalacfork]       };
[scalacfork]       @serializable case class DirCompletionInfo extends scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo with ScalaObject with Product {
[scalacfork]         <synthetic> def copy$$default$$3(): scala.tools.nsc.io.Directory = DirCompletionInfo.this.dir();
[scalacfork]         <synthetic> def copy$$default$$2(): java.lang.String = DirCompletionInfo.this.className();
[scalacfork]         <synthetic> def copy$$default$$1(): java.lang.String = DirCompletionInfo.this.visibleName();
[scalacfork]         <caseaccessor> <paramaccessor> private[this] val visibleName: java.lang.String = _;
[scalacfork]         <stable> <caseaccessor> <accessor> <paramaccessor> def visibleName(): java.lang.String = DirCompletionInfo.this.visibleName;
[scalacfork]         <caseaccessor> <paramaccessor> private[this] val className: java.lang.String = _;
[scalacfork]         <stable> <caseaccessor> <accessor> <paramaccessor> def className(): java.lang.String = DirCompletionInfo.this.className;
[scalacfork]         <caseaccessor> <paramaccessor> private[this] val dir: scala.tools.nsc.io.Directory = _;
[scalacfork]         <stable> <caseaccessor> <accessor> <paramaccessor> def dir(): scala.tools.nsc.io.Directory = DirCompletionInfo.this.dir;
[scalacfork]         def this(visibleName: java.lang.String, className: java.lang.String, dir: scala.tools.nsc.io.Directory): scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo = {
[scalacfork]           DirCompletionInfo.super.this();
[scalacfork]           DirCompletionInfo.this./*Product$$class*/$$init$$();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         lazy private[this] var file: scala.tools.nsc.io.File = _;
[scalacfork]         <stable> <accessor> lazy def file(): scala.tools.nsc.io.File = {
[scalacfork]           DirCompletionInfo.this.file = DirCompletionInfo.this.dir()./({
[scalacfork]             val x$$17: scala.tools.nsc.io.Path = io.this.Path.string2path(DirCompletionInfo.this.className());
[scalacfork]             val x$$18: scala.io.Codec = io.File.apply$$default$$2(x$$17);
[scalacfork]             io.File.apply(x$$17, x$$18)
[scalacfork]           });
[scalacfork]           DirCompletionInfo.this.file
[scalacfork]         };
[scalacfork]         def getBytes(): Array[Byte] = try {
[scalacfork]           DirCompletionInfo.this.file().toByteArray()
[scalacfork]         } catch {
[scalacfork]           case (_: java.lang.Exception) => scala.Array.apply(scala.this.Predef.wrapByteArray(Array[Byte]{}.$$asInstanceOf[Array[Byte]]()), reflect.this.Manifest.Byte())
[scalacfork]         };
[scalacfork]         <synthetic> def copy(visibleName: java.lang.String = visibleName, className: java.lang.String = className, dir: scala.tools.nsc.io.Directory = dir): scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo = new scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo(visibleName, className, dir);
[scalacfork]         override def toString(): java.lang.String = ScalaRunTime.this._toString(DirCompletionInfo.this);
[scalacfork]         override def productPrefix(): java.lang.String = "DirCompletionInfo";
[scalacfork]         override def productArity(): Int = 3;
[scalacfork]         override def productElement(x$$1: Int): java.lang.Object = {
[scalacfork]           val temp17: Int = x$$1;
[scalacfork]           (temp17: Int) match {
[scalacfork]             case 0 => {
[scalacfork]               visibleName()
[scalacfork]             }
[scalacfork]             case 1 => {
[scalacfork]               className()
[scalacfork]             }
[scalacfork]             case 2 => {
[scalacfork]               dir()
[scalacfork]             }
[scalacfork]             case _ => {
[scalacfork]               throw new java.lang.IndexOutOfBoundsException(x$$1.toString())
[scalacfork]             }
[scalacfork]           }
[scalacfork]         };
[scalacfork]         override def canEqual(x$$1: java.lang.Object): Boolean = x$$1.$$isInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo]()
[scalacfork]       };
[scalacfork]       @serializable case class JarCompletionInfo extends scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo with ScalaObject with Product {
[scalacfork]         <synthetic> def copy$$default$$3(): scala.tools.nsc.io.File = JarCompletionInfo.this.jar();
[scalacfork]         <synthetic> def copy$$default$$2(): java.lang.String = JarCompletionInfo.this.className();
[scalacfork]         <synthetic> def copy$$default$$1(): java.lang.String = JarCompletionInfo.this.visibleName();
[scalacfork]         <caseaccessor> <paramaccessor> private[this] val visibleName: java.lang.String = _;
[scalacfork]         <stable> <caseaccessor> <accessor> <paramaccessor> def visibleName(): java.lang.String = JarCompletionInfo.this.visibleName;
[scalacfork]         <caseaccessor> <paramaccessor> private[this] val className: java.lang.String = _;
[scalacfork]         <stable> <caseaccessor> <accessor> <paramaccessor> def className(): java.lang.String = JarCompletionInfo.this.className;
[scalacfork]         <caseaccessor> <paramaccessor> private[this] val jar: scala.tools.nsc.io.File = _;
[scalacfork]         <stable> <caseaccessor> <accessor> <paramaccessor> def jar(): scala.tools.nsc.io.File = JarCompletionInfo.this.jar;
[scalacfork]         def this(visibleName: java.lang.String, className: java.lang.String, jar: scala.tools.nsc.io.File): scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = {
[scalacfork]           JarCompletionInfo.super.this();
[scalacfork]           JarCompletionInfo.this./*Product$$class*/$$init$$();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         lazy private[this] var jarfile: scalahack.io.JarFile = _;
[scalacfork]         <stable> <accessor> lazy def jarfile(): scalahack.io.JarFile = {
[scalacfork]           JarCompletionInfo.this.jarfile = new scalahack.io.JarFile(new scalahack.io.File(JarCompletionInfo.this.jar().path()));
[scalacfork]           JarCompletionInfo.this.jarfile
[scalacfork]         };
[scalacfork]         lazy private[this] var entry: java.util.zip.ZipEntry = _;
[scalacfork]         <stable> <accessor> lazy def entry(): java.util.zip.ZipEntry = {
[scalacfork]           JarCompletionInfo.this.entry = JarCompletionInfo.this.jarfile().getEntry(JarCompletionInfo.this.className());
[scalacfork]           JarCompletionInfo.this.entry
[scalacfork]         };
[scalacfork]         def getBytes(): Array[Byte] = if (JarCompletionInfo.this.entry().==(null))
[scalacfork]           scala.Array.apply(scala.this.Predef.wrapByteArray(Array[Byte]{}.$$asInstanceOf[Array[Byte]]()), reflect.this.Manifest.Byte())
[scalacfork]         else
[scalacfork]           {
[scalacfork]             val x: scala.tools.nsc.io.Streamable#Bytes = {
[scalacfork]               final class $$anon extends java.lang.Object with scala.tools.nsc.io.Streamable#Bytes {
[scalacfork]                 def this($$outer: scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo): anonymous class $$anon = {
[scalacfork]                   $$anon.super.this();
[scalacfork]                   $$anon.this./*Bytes$$class*/$$init$$();
[scalacfork]                   ()
[scalacfork]                 };
[scalacfork]                 def inputStream(): java.io.InputStream = $$anon.this.$$outer.jarfile().getInputStream($$anon.this.$$outer.entry());
[scalacfork]                 <synthetic> <paramaccessor> private[this] val $$outer: scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = _;
[scalacfork]                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$JarCompletionInfo$$$$anon$$$$$$outer(): scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = $$anon.this.$$outer
[scalacfork]               };
[scalacfork]               new anonymous class $$anon(JarCompletionInfo.this)
[scalacfork]             };
[scalacfork]             x.toByteArray()
[scalacfork]           };
[scalacfork]         <synthetic> def copy(visibleName: java.lang.String = visibleName, className: java.lang.String = className, jar: scala.tools.nsc.io.File = jar): scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = new scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo(visibleName, className, jar);
[scalacfork]         override def toString(): java.lang.String = ScalaRunTime.this._toString(JarCompletionInfo.this);
[scalacfork]         override def productPrefix(): java.lang.String = "JarCompletionInfo";
[scalacfork]         override def productArity(): Int = 3;
[scalacfork]         override def productElement(x$$1: Int): java.lang.Object = {
[scalacfork]           val temp18: Int = x$$1;
[scalacfork]           (temp18: Int) match {
[scalacfork]             case 0 => {
[scalacfork]               visibleName()
[scalacfork]             }
[scalacfork]             case 1 => {
[scalacfork]               className()
[scalacfork]             }
[scalacfork]             case 2 => {
[scalacfork]               jar()
[scalacfork]             }
[scalacfork]             case _ => {
[scalacfork]               throw new java.lang.IndexOutOfBoundsException(x$$1.toString())
[scalacfork]             }
[scalacfork]           }
[scalacfork]         };
[scalacfork]         override def canEqual(x$$1: java.lang.Object): Boolean = x$$1.$$isInstanceOf[scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo]()
[scalacfork]       };
[scalacfork]       def getDottedPaths(map: java.util.concurrent.ConcurrentHashMap, classpath: List): Unit = {
[scalacfork]         val cp: List = classpath.distinct().map({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x: java.net.URL): scala.tools.nsc.io.Path = io.Path.apply(x.getPath());
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }, immutable.this.List.canBuildFrom());
[scalacfork]         val jars: List = cp.filter({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x$$11: scala.tools.nsc.io.Path): Boolean = x$$11.hasExtension("jar", scala.this.Predef.wrapRefArray(Array[java.lang.String]{}.$$asInstanceOf[Array[java.lang.String]]()));
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }).map({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x$$12: scala.tools.nsc.io.Path): scala.tools.nsc.io.File = x$$12.toFile();
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         }, immutable.this.List.canBuildFrom());
[scalacfork]         def isUnderScalaHome(d: scala.tools.nsc.io.Directory): Boolean = d.parents().exists({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x$$13: scala.tools.nsc.io.Directory): Boolean = x$$13.==(scala.tools.util.PathResolver.Defaults.scalaHomeDir());
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         });
[scalacfork]         val dirs: List = cp.collect({
[scalacfork]           final <synthetic> class $$anonfun extends java.lang.Object with PartialFunction {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               $$anonfun.this./*Function1$$class*/$$init$$();
[scalacfork]               $$anonfun.this./*PartialFunction$$class*/$$init$$();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(x0$$1: scala.tools.nsc.io.Path): scala.tools.nsc.io.Directory = {
[scalacfork]               var temp19: scala.tools.nsc.io.Path = x0$$1;
[scalacfork]               if (temp19.isInstanceOf[scala.tools.nsc.io.Directory]())
[scalacfork]                 {
[scalacfork]                   temp19.asInstanceOf[scala.tools.nsc.io.Directory]()
[scalacfork]                 }
[scalacfork]               else
[scalacfork]                 throw new MatchError(temp19)
[scalacfork]             };
[scalacfork]             final def isDefinedAt(x$$1: scala.tools.nsc.io.Path): Boolean = {
[scalacfork]               var temp21: scala.tools.nsc.io.Path = x$$1;
[scalacfork]               temp21.isInstanceOf[scala.tools.nsc.io.Directory]()
[scalacfork]             };
[scalacfork]             override <bridge> def andThen(g: Function1): Function1 = $$anonfun.this.andThen(g);
[scalacfork]             final <bridge> def isDefinedAt(x: java.lang.Object): Boolean = $$anonfun.this.isDefinedAt(x);
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): PartialFunction)
[scalacfork]         }, immutable.this.List.canBuildFrom()).filter({
[scalacfork]           {
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this(): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(d: scala.tools.nsc.io.Directory): Boolean = isUnderScalaHome(d);
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(): Function1)
[scalacfork]           }
[scalacfork]         });
[scalacfork]         def subpaths(s: java.lang.String): List = {
[scalacfork]           val segs: Array[java.lang.String] = scala.reflect.NameTransformer.decode(s).split("[/.]");
[scalacfork]           val components: Array[java.lang.String] = scala.this.Predef.refArrayOps(segs).dropRight(1);
[scalacfork]           scala.this.Predef.intWrapper(1).to(components.<arr>length()).toList().flatMap({
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this(): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(i: Int): List = {
[scalacfork]                 val k: java.lang.String = scala.this.Predef.refArrayOps(scala.this.Predef.refArrayOps(components).take(i)).mkString(".");
[scalacfork]                 if (segs.<arr>apply(i).contains("$$"))
[scalacfork]                   {
[scalacfork]                     val dollarsegs: List = scala.this.Predef.refArrayOps(segs.<arr>apply(i).split("$$")).toList();
[scalacfork]                     scala.this.Predef.intWrapper(1).to(dollarsegs.length().-(1)).toList().map({
[scalacfork]                       final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                         def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                           $$anonfun.super.this();
[scalacfork]                           ()
[scalacfork]                         };
[scalacfork]                         final def apply(j: Int): Tuple2 = {
[scalacfork]                           val newk: java.lang.String = k.+(".").+(dollarsegs.take(j).mkString("."));
[scalacfork]                           scala.this.Predef.any2ArrowAssoc(k).->(dollarsegs.apply(j))
[scalacfork]                         };
[scalacfork]                         <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                         <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                         final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]                       };
[scalacfork]                       (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]                     }, immutable.this.List.canBuildFrom())
[scalacfork]                   }
[scalacfork]                 else
[scalacfork]                   immutable.this.List.apply(scala.this.Predef.wrapRefArray(Array[Tuple2]{scala.this.Predef.any2ArrowAssoc(k).->(segs.<arr>apply(i))}.$$asInstanceOf[Array[Tuple2]]()))
[scalacfork]               };
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(): Function1)
[scalacfork]           }, immutable.this.List.canBuildFrom())
[scalacfork]         };
[scalacfork]         def addToMap(key: java.lang.String, info: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo): java.lang.Object = if (map.containsKey(key))
[scalacfork]           {
[scalacfork]             val vs: List = map.get(key);
[scalacfork]             if (vs.contains(info))
[scalacfork]               ()
[scalacfork]             else
[scalacfork]               map.put(key, {
[scalacfork]                 <synthetic> val x$$14: scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo = info;
[scalacfork]                 vs.::(x$$14)
[scalacfork]               })
[scalacfork]           }
[scalacfork]         else
[scalacfork]           map.put(key, immutable.this.List.apply(scala.this.Predef.wrapRefArray(Array[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]{info}.$$asInstanceOf[Array[scala.tools.nsc.interpreter.PackageCompletion#CompletionInfo]]())));
[scalacfork]         def oneDir(dir: scala.tools.nsc.io.Directory): Unit = PackageCompletion.this.getDirClassFiles(dir).foreach({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(cl: java.lang.String): Unit = subpaths(cl).foreach({
[scalacfork]               final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                 def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                   $$anonfun.super.this();
[scalacfork]                   ()
[scalacfork]                 };
[scalacfork]                 final def apply(x$$15: Tuple2): java.lang.Object = {
[scalacfork]                   var temp23: Tuple2 = x$$15;
[scalacfork]                   if (temp23.ne(null))
[scalacfork]                     {
[scalacfork]                       addToMap(temp23._1(), new scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo(temp23._2(), cl, dir))
[scalacfork]                     }
[scalacfork]                   else
[scalacfork]                     throw new MatchError(temp23)
[scalacfork]                 };
[scalacfork]                 <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                 final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]               };
[scalacfork]               (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]             });
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         });
[scalacfork]         def oneJar(jar: scala.tools.nsc.io.File): Unit = PackageCompletion.this.getJarClassFiles(jar).foreach({
[scalacfork]           final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]             def this(): anonymous class $$anonfun = {
[scalacfork]               $$anonfun.super.this();
[scalacfork]               ()
[scalacfork]             };
[scalacfork]             final def apply(cl: java.lang.String): Unit = subpaths(cl).foreach({
[scalacfork]               final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]                 def this($$outer: anonymous class $$anonfun): anonymous class $$anonfun = {
[scalacfork]                   $$anonfun.super.this();
[scalacfork]                   ()
[scalacfork]                 };
[scalacfork]                 final def apply(x$$16: Tuple2): java.lang.Object = {
[scalacfork]                   var temp26: Tuple2 = x$$16;
[scalacfork]                   if (temp26.ne(null))
[scalacfork]                     {
[scalacfork]                       addToMap(temp26._1(), new scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo(temp26._2(), cl, jar))
[scalacfork]                     }
[scalacfork]                   else
[scalacfork]                     throw new MatchError(temp26)
[scalacfork]                 };
[scalacfork]                 <synthetic> <paramaccessor> private[this] val $$outer: anonymous class $$anonfun = _;
[scalacfork]                 <synthetic> <stable> def scala$$tools$$nsc$$interpreter$$PackageCompletion$$$$anonfun$$$$anonfun$$$$$$outer(): anonymous class $$anonfun = $$anonfun.this.$$outer;
[scalacfork]                 final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]               };
[scalacfork]               (new anonymous class $$anonfun($$anonfun.this): Function1)
[scalacfork]             });
[scalacfork]             final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]           };
[scalacfork]           (new anonymous class $$anonfun(): Function1)
[scalacfork]         });
[scalacfork]         jars.foreach({
[scalacfork]           {
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this(): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(jar: scala.tools.nsc.io.File): Unit = oneJar(jar);
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(): Function1)
[scalacfork]           }
[scalacfork]         });
[scalacfork]         dirs.foreach({
[scalacfork]           {
[scalacfork]             final <synthetic> class $$anonfun extends scala.runtime.AbstractFunction1 {
[scalacfork]               def this(): anonymous class $$anonfun = {
[scalacfork]                 $$anonfun.super.this();
[scalacfork]                 ()
[scalacfork]               };
[scalacfork]               final def apply(dir: scala.tools.nsc.io.Directory): Unit = oneDir(dir);
[scalacfork]               final <bridge> def apply(v1: java.lang.Object): java.lang.Object = $$anonfun.this.apply(v1)
[scalacfork]             };
[scalacfork]             (new anonymous class $$anonfun(): Function1)
[scalacfork]           }
[scalacfork]         })
[scalacfork]       };
[scalacfork]       final <synthetic> class JarCompletionInfo extends scala.runtime.AbstractFunction3 with ScalaObject {
[scalacfork]         def this(): object scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = {
[scalacfork]           JarCompletionInfo.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         case <synthetic> def unapply(x$$0: scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo): Option = if (x$$0.==(null))
[scalacfork]           scala.this.None
[scalacfork]         else
[scalacfork]           new Some(new Tuple3(x$$0.visibleName(), x$$0.className(), x$$0.jar()));
[scalacfork]         case <synthetic> def apply(visibleName: java.lang.String, className: java.lang.String, jar: scala.tools.nsc.io.File): scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo = new scala.tools.nsc.interpreter.PackageCompletion#JarCompletionInfo(visibleName, className, jar);
[scalacfork]         case <synthetic> <bridge> def apply(v1: java.lang.Object, v2: java.lang.Object, v3: java.lang.Object): java.lang.Object = JarCompletionInfo.this.apply(v1, v2, v3)
[scalacfork]       };
[scalacfork]       final <synthetic> class DirCompletionInfo extends scala.runtime.AbstractFunction3 with ScalaObject {
[scalacfork]         def this(): object scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo = {
[scalacfork]           DirCompletionInfo.super.this();
[scalacfork]           ()
[scalacfork]         };
[scalacfork]         case <synthetic> def unapply(x$$0: scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo): Option = if (x$$0.==(null))
[scalacfork]           scala.this.None
[scalacfork]         else
[scalacfork]           new Some(new Tuple3(x$$0.visibleName(), x$$0.className(), x$$0.dir()));
[scalacfork]         case <synthetic> def apply(visibleName: java.lang.String, className: java.lang.String, dir: scala.tools.nsc.io.Directory): scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo = new scala.tools.nsc.interpreter.PackageCompletion#DirCompletionInfo(visibleName, className, dir);
[scalacfork]         case <synthetic> <bridge> def apply(v1: java.lang.Object, v2: java.lang.Object, v3: java.lang.Object): java.lang.Object = DirCompletionInfo.this.apply(v1, v2, v3)
[scalacfork]       }
[scalacfork]     }
[scalacfork]   }
[scalacfork] }
[scalacfork] error: class file needed by StaticCompletion is missing.
[scalacfork] reference type _$$1 of (name: String)Option[Class[_]] refers to nonexisting symbol.
[scalacfork] one error found
```
