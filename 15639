{code}
public interface Processor {
  Object process(Object request); 
}
{code}

{code}
class P1 extends Processor{
  //error: overriding method process in trait Processor of type (x$$1: Any)java.lang.Object; method process has incompatible type
  def process(request: Any   ) : Any = error("error")
}

class P2 extends Processor{
  def process(request: Object) : Object = error("ok")
}

class P3 extends Processor{
  def process(request: Any   ) : Object = error("ok")
}

class P4 extends Processor{
  //error: overriding method process in trait Processor of type (x$$1: Any)java.lang.Object; method process has incompatible type
  def process(request: Object) : Any = error("error")
}
{code}

bug location:
{code}
final def matchesType(tp1: Type, tp2: Type, alwaysMatchSimple: Boolean): Boolean =    
  tp1 match {
    case mt1 @ MethodType(params1, res1) =>
      tp2 match {
        case mt2 @ MethodType(params2, res2) =>
          matchingParams(params1, params2, mt1.isJava, mt2.isJava) && 
          matchesType(res1, res2, alwaysMatchSimple) && // BUG: does not consider Any and Object to be equal

private def matchingParams(syms1: List[Symbol], syms2: List[Symbol], syms1isJava: Boolean, syms2isJava: Boolean): Boolean =
// fudge Object == Any into the relation:
   syms1isJava && tp2.typeSymbol == ObjectClass && tp1.typeSymbol == AnyClass ||
   syms2isJava && tp1.typeSymbol == ObjectClass && tp2.typeSymbol == AnyClass
{code}
