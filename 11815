Minimized a bit further:
```scala
class M[_]
trait T {
  def foo(m: M[_ >: String]) = 42
}

// class C extends T {
//   def foo(m: M[_ >: Any]) = 0 // gives "same type after erasure error"
// }

object Test {
  def t: T = new T {
    def foo(m: M[_ >: Any]) = 0
  }
  def main(args: Array[String]): Unit = {
    val m: M[String] = null
    t.foo(m) // VeriyError: Duplicate method name&signature
  }
}
```

This no doubt stems from the acrobatics performed in typechecking when deciding what declarations of anonymous classes ought to be hidden: https://github.com/scala/scala/blob/v2.11.6/src/compiler/scala/tools/nsc/typechecker/Typers.scala#L2327-L2384

Workaround is to use the `override` modifier, match the signatures exactly, or use named classes.
