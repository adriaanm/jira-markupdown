In **some** cases the compiler becomes confused if you are binding a variable whose name is the same as a default argument in the expression being bound, as in (1) below.

// Setup
case class Foo[A,B](f: (A, B) => A)
case class Person(name:String)

// (1) Doesn't compile: 
//     REPL says value 'b' not found. 
//     Scala IDE says "error applying default arguments" 
val name = Foo[Person,String]((a, b) => a.copy(name = b))

// (2) Ok -- val is not called 'name'
val wibble = Foo[Person,String]((a, b) => a.copy(name = b))

// (3) Ok -- type ascription on LHS
val name:Foo[Person,String] = Foo((a, b) => a.copy(name = b))


