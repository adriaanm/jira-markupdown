That would slow down quite a bit contains, which is the primary method. On a public library, were you don't having something to profile against, and particularly when it comes to collections, DRY must take second place to performace, if the two are mutually exclusive. In this case, however, you can have a private method returning `null` for not found, and two public methods returning `Boolean` and `Option[A]`, without sacrificing performance.

Also note that `FlatHashTable` is an implementation. Do not conflate implementation with the API -- `containsEntry`, for instance is not the public API; `contains` is the public API. Likewise, perhaps a different name for `findEntry` would be preferable. I do have my own thoughts on this, but I'd rather this be discussed more broadly. After all, we are talking about expanding the **public** API of `Set`, which is not done lightly.
