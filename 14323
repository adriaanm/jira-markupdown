What happens: a correct (compiles and produces the right results without -optimise) program crashes the compiler with -optimise.  This is for various versions of trunk over the past few days.  IIRC I'd previously built it with -optimise a few weeks ago, so this may be a regression.

Unfortunately I haven't been able to narrow down the cause, so I'm attaching 100 odd lines of code.  Sorry.  I do know (see comment in "by_first") what line of code I can comment out to avoid the compiler crash, but extracting just that function (+ data and types) and the few around it to make a smaller program doesn't give the compiler crash.

Here's the crash:

Exception in thread "main" scala.MatchError: Boxed(LocalVar(variable boxed240))

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim.valueToInstruction(ClosureElimination.scala:190)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim$$$$anonfun$$analyzeMethod$$1$$$$anonfun$$apply$$1.apply(ClosureElimination.scala:164)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim$$$$anonfun$$analyzeMethod$$1$$$$anonfun$$apply$$1.apply(ClosureElimination.scala:107)

	at scala.collection.generic.LinearSequenceTemplate$$class.foreach(LinearSequenceTemplate.scala:81)

	at scala.collection.immutable.List.foreach(List.scala:26)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim$$$$anonfun$$analyzeMethod$$1.apply(ClosureElimination.scala:107)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim$$$$anonfun$$analyzeMethod$$1.apply(ClosureElimination.scala:103)

	at scala.collection.generic.LinearSequenceTemplate$$class.foreach(LinearSequenceTemplate.scala:81)

	at scala.collection.immutable.List.foreach(List.scala:26)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim.analyzeMethod(ClosureElimination.scala:103)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim$$$$anonfun$$analyzeClass$$1.apply(ClosureElimination.scala:87)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim$$$$anonfun$$analyzeClass$$1.apply(ClosureElimination.scala:86)

	at scala.collection.generic.LinearSequenceTemplate$$class.foreach(LinearSequenceTemplate.scala:81)

	at scala.collection.immutable.List.foreach(List.scala:26)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureElim.analyzeClass(ClosureElimination.scala:86)

	at scala.tools.nsc.backend.opt.ClosureElimination$$ClosureEliminationPhase.apply(ClosureElimination.scala:35)

	at scala.tools.nsc.backend.icode.ICodes$$ICodePhase$$$$anonfun$$apply$$1.apply(ICodes.scala:85)

	at scala.tools.nsc.backend.icode.ICodes$$ICodePhase$$$$anonfun$$apply$$1.apply(ICodes.scala:85)

	at scala.collection.mutable.HashSet.foreach(HashSet.scala:46)

	at scala.tools.nsc.backend.icode.ICodes$$ICodePhase.apply(ICodes.scala:85)

	at scala.tools.nsc.Global$$GlobalPhase.applyPhase(Global.scala:326)

	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:304)

	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:304)

	at scala.collection.Iterator$$class.foreach(Iterator.scala:500)

	at scala.collection.mutable.ListBuffer$$$$anon$$1.foreach(ListBuffer.scala:280)

	at scala.tools.nsc.Global$$GlobalPhase.run(Global.scala:304)

	at scala.tools.nsc.Global$$Run.compileSources(Global.scala:798)

	at scala.tools.nsc.Global$$Run.compile(Global.scala:872)

	at scala.tools.nsc.Main$$.process(Main.scala:73)

	at scala.tools.nsc.Main$$.main(Main.scala:87)

	at scala.tools.nsc.Main.main(Main.scala)


