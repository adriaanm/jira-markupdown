
For the snippet in [comment-58618 | https://issues.scala-lang.org/browse/SI-5005?focusedCommentId=58618&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-58618] , the following non-inlined callsite keeps the closure alive (ie instantiated)
```
  5: pred: List(13) succs: List(8, 7) flags: <closed>
    17	LOAD_LOCAL(field p1)
    17	THIS(Object)
    17	CALL_METHOD scala.Function1.apply$mcZL$sp (dynamic)
    17	CZJUMP (BOOL)NE ? 7 : 8
```


using `-Ydebug -Ylog:inliner` to get more detailed log output. 

In turn, the following suggests no ICode is loaded for that closure method (although type-flow gets right the most specific type of the closure, `A$$anonfun$foo$1` , and thus could load bytecode for it)
```
[log inliner] shouldLoadImplFor: anonymous class A$$anonfun$foo$1.method apply$mcZL$sp: false
[log inliner] Treating CALL_METHOD scala.Function1.apply$mcZL$sp (dynamic)
	receiver: anonymous class A$$anonfun$foo$1
	icodes.available: false
	concreteMethod.isEffectivelyFinal: false
```

The condition that fails for loading said ICode is `sym.isEffectivelyFinal` below:
```
    /** Should method 'sym' being called in 'receiver' be loaded from disk? */
    def shouldLoadImplFor(sym: Symbol, receiver: Symbol): Boolean = {
      def alwaysLoad    = (receiver.enclosingPackage == RuntimePackage) || (receiver == PredefModule.moduleClass)
      def loadCondition = sym.isEffectivelyFinal && isMonadicMethod(sym) && isHigherOrderMethod(sym)

      val res = hasInline(sym) || alwaysLoad || loadCondition
      debuglog("shouldLoadImplFor: " + receiver + "." + sym + ": " + res)
      res
    }
```

To recap, for inlining of an specialized apply method to happen, it's a necessary condition that `shouldLoadImplFor` succeeds for that method's symbol, and currently it doesn't because `sym.isEffectivelyFinal` is `false`.

