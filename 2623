A similar problem is with code ( with each class in separate file):
```scala
class G {
	def x: String = "foo"
}
class H extends G
class I {
  def y(a:H):String = a.x
}
```

and the later change in definition of x to say
```scala
def x:Int = 0
```
doesn't cause class I to recompile. This is because, theoretically, compilation of H (forced by compilation of G) doesn't create any new changes.
