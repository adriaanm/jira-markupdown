The following small App causes a VerifyError at runtime. I think the spec (c.f. 5.1.1) should allow this.
```scala
object Test extends App {
  class A(x: Int)
  class B extends A({
    def p(x: Int) = x + 1
    p(1)
  })
  new B 
}
```

The stack trace is
{code}java.lang.VerifyError: (class: Test$B, method: <init> signature: ()V) Expecting to find object/array on stack
	at Test$.<init>(t5812.scala:8)
	at Test$.<clinit>(t5812.scala)
	at Test.main(t5812.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:30)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:138)
{code}
