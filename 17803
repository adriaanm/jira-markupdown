Private constructors and methods are compiled to public visibility when a companion object access them.  This should arguably be the "most private" possible. While the Scala compiler should (and likely does, I didn't test it) enforce the visibility restrictions, when interoperating with Java, it would be preferable to have something other than public visibility here.

Per Simon Ochsenreither, the issue could be solvable by emitting an appropriate static forwarder in the class.

Example with expected results (no companion object):
```scala
class Private private(x: Int) {
  private[this] val y = x
  private def yValue = y
}
```

javap -p output with private constructor and method:
```scala
public class Private implements scala.ScalaObject {
  private final int y;
  private int yValue();
  private Private(int);
}
```

This is expected.

However, adding the companion object as follows results in the private constructor and method being generated as public.
```scala
object Private {
  def main(args: Array[String]) {
    val p = new Private(7)
    p.yValue
  }
}
```

javap -p output with public constructor and method:
```scala
public class Private implements scala.ScalaObject {
  private final int y;
  public static final void main(java.lang.String[]);
  public final int Private$$yValue();
  public Private(int);
}
```
