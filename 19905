A type pattern with erased components triggers an unchecked warning regarding those erased components.

With the addition of `ClassTag` and its use to make type patterns of abstract types actually check something again, these warnings are not emitted.  Which is fine for some types, but not all `ClassTag` s are created equal.
```scala
def itsa[A: reflect.ClassTag](a:Any) = a match {case a: A => a}
def unsafeCoerce[A, B]: A => B = itsa{a:A=>a}
```

This creates a working `unsafeCoerce` with no `unchecked` warning.  The argument to `itsa` passes the pattern because it is a `Function1\[\_,\_]`.

A warning when producing a `ClassTag` for partially-erased types would be spurious for the `Array` creation use case.  But a warning flag for those uninterested in creating `Array`, or requirement of a more specific type of tag (that warns for tag creation on partially-erased types) for type-pattern matching, might be nice.
