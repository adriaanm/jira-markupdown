Stream.take(n) ends up evaluating the n+1'th element of the Stream:
{code}
scala> Stream.from(1).map{i => println("map(" + i + ") called"); i}.take(5).print
map(1) called
1, map(2) called
2, map(3) called
3, map(4) called
4, map(5) called
5, map(6) called
Stream.empty
{code}

The trouble is take ends up doing a 'tail take 0' to end the iteration, and that forces the evaluation of tail.  The following fixes this for me:
{code}
    override def take(n: Int): Stream[A] =
      if (isEmpty || n <= 0) Stream.empty
      else if (n == 1) Stream.cons(head, Stream.empty)
      else Stream.cons(head, tail take (n-1))
    

{code}
