Here's another manifestation:
```scala
package test

import language.implicitConversions

object Test {
  type T = scala.languageFeature.implicitConversions
  implicit def foo(a: Int) = 0 
}
```

Hyperlink through the type `implicitConversions`, then edit this file to trigger a typechecking pass, and the feature warning is emitted.

Using this test:
```scala
import scala.tools.partest._

object Test extends CompilerTest {
  override def code = ""

  def check(source: String, unit: global.CompilationUnit) = ()

  val compiler = newCompiler()
  new compiler.Run()
  import compiler._

  val cm = reflect.runtime.currentMirror
  val instanceMirror = cm.reflect(definitions)
  val members = instanceMirror.symbol.typeSignature.members
  def resultType(tp: cm.universe.Type) = tp match {
    case cm.universe.NullaryMethodType(res) => res
    case t => t
  }

  val symFields = for {
    m <- members.toList
    if m.isMethod
    if m.asTerm.isGetter
    sig = m.typeSignature
    res = resultType(sig)
    base = res.baseType(cm.universe.typeOf[Symbol].typeSymbol)
    if base != cm.universe.NoType
    methMirror = instanceMirror.reflectMethod(m.asMethod)
    definedSym <- scala.util.Try(methMirror().asInstanceOf[Symbol]).toOption.toList
    if (!definedSym.owner.isPackageClass)
  } yield (m.name, definedSym)
  println(symFields.mkString("\n"))

}
```

I see these non-top-level symbols cached in `Definitions`:
```
Testing individual files
testing: [...]/files/run/t7678.scala                                  [FAILED]
(ExistentialsFeature,trait existentials)
(HigherKindsFeature,trait higherKinds)
(ImplicitConversionsFeature,trait implicitConversions)
(ReflectiveCallsFeature,trait reflectiveCalls)
(PostfixOpsFeature,trait postfixOps)
(DynamicsFeature,trait dynamics)
(MacrosFeature,trait macros)
(experimentalModule,object experimental)
(Boxes_isNumber,method isBoxedNumber)
(Boxes_isNumberOrBool,method isBoxedNumberOrBoolean)
(String_$plus,method +)
(Object_synchronized,method synchronized)
(Object_asInstanceOf,method $asInstanceOf)
(Object_isInstanceOf,method $isInstanceOf)
(Object_ne,method ne)
(Object_eq,method eq)
(Object_$bang$eq,method !=)
(Object_$eq$eq,method ==)
(Object_$hash$hash,method ##)
(Any_asInstanceOf,method asInstanceOf)
(Any_isInstanceOf,method isInstanceOf)
(Any_getClass,method getClass)
(Any_$hash$hash,method ##)
(Any_toString,method toString)
(Any_hashCode,method hashCode)
(Any_equals,method equals)
(Any_$bang$eq,method !=)
(Any_$eq$eq,method ==)
(Option_apply,method apply)
(TypeTagModule,object TypeTag)
(TypeTagClass,trait TypeTag)
(WeakTypeTagModule,object WeakTypeTag)
(WeakTypeTagClass,trait WeakTypeTag)
(ExprModule,object Expr)
(ExprClass,trait Expr)
(PartialManifestClass,type ClassManifest)
(Array_clone,method clone)
(Array_length,method length)
(Array_update,method update)
(Array_apply,method apply)
(ArrayModule_overloadedApply,value apply)
(Iterator_apply,method apply)
(List_apply,method apply)
(StringAdd_$plus,method +)
(ArrowAssocClass,class ArrowAssoc)
(Symbol_apply,method apply)
(GroupOfSpecializable,class Group)
(RootClass,package <root>)
(RootPackage,package _root_)
(Boolean_not,method unary_!)
(Boolean_or,method ||)
(Boolean_and,method &&)
(ExistentialsFeature,trait existentials)
(HigherKindsFeature,trait higherKinds)
(ImplicitConversionsFeature,trait implicitConversions)
(ReflectiveCallsFeature,trait reflectiveCalls)
(PostfixOpsFeature,trait postfixOps)
(DynamicsFeature,trait dynamics)
(MacrosFeature,trait macros)
(experimentalModule,object experimental)
(Boxes_isNumber,method isBoxedNumber)
(Boxes_isNumberOrBool,method isBoxedNumberOrBoolean)
(String_$plus,method +)
(Object_synchronized,method synchronized)
(Object_asInstanceOf,method $asInstanceOf)
(Object_isInstanceOf,method $isInstanceOf)
(Object_ne,method ne)
(Object_eq,method eq)
(Object_$bang$eq,method !=)
(Object_$eq$eq,method ==)
(Object_$hash$hash,method ##)
(Any_asInstanceOf,method asInstanceOf)
(Any_isInstanceOf,method isInstanceOf)
(Any_getClass,method getClass)
(Any_$hash$hash,method ##)
(Any_toString,method toString)
(Any_hashCode,method hashCode)
(Any_equals,method equals)
(Any_$bang$eq,method !=)
(Any_$eq$eq,method ==)
(Option_apply,method apply)
(TypeTagModule,object TypeTag)
(TypeTagClass,trait TypeTag)
(WeakTypeTagModule,object WeakTypeTag)
(WeakTypeTagClass,trait WeakTypeTag)
(ExprModule,object Expr)
(ExprClass,trait Expr)
(PartialManifestClass,type ClassManifest)
(Array_clone,method clone)
(Array_length,method length)
(Array_update,method update)
(Array_apply,method apply)
(ArrayModule_overloadedApply,value apply)
(Iterator_apply,method apply)
(List_apply,method apply)
(StringAdd_$plus,method +)
(ArrowAssocClass,class ArrowAssoc)
(Symbol_apply,method apply)
(GroupOfSpecializable,class Group)
(RootClass,package <root>)
(RootPackage,package _root_)
(Boolean_not,method unary_!)
(Boolean_or,method ||)
(Boolean_and,method &&)
```

I wonder whether the fix for this should be in `Definitions` (changing vals to defs), or in `findMirrorSymbol`.
