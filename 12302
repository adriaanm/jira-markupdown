I noted that this bug also affects the documentation of the standard library. The first example I found is the following:

scala.collection.IterableLike uses a macro in the documentation of toIterable:

{code}
/** A template trait for iterable collections of type `Iterable[A]`.
 *   ...
 *  @define coll iterable collection
 */
trait IterableLike[+A, +Repr] extends ... {
  ...
  /** Returns this $coll as an iterable collection.
   *  ...
   */
  override /*TraversableLike*/ def toIterable: Iterable[A] =
    thisCollection
  ...
}
{code}

In MapLike, the macro is redefined:

{code}
/** A template trait for maps, which associate keys with values.
 *  ...
 *  @define coll map
 *  ...
 */
trait MapLike[A, +B, +This <: ...] extends ...
    with IterableLike[(A, B), This] with ... {
  ...
}
{code}

And toIterable is simply inherited from IterableLike (not overriden).

I think the documentation for MapLike.toIterable is supposed to read "Returns this *map* as an iterable collection." Instead, it reads "Returns this *iterable collection* as an iterable collection." (Emphasis mine in both cases).

This happens because ScalaDoc fails to re-substitute the macro $coll when inheriting the documentation for toIterable.

I don't know whether this only affects such stylistic issues or whether some of the more substantial macros in the standard library documentation are also instantiated wrongly.

!MapLike.png|thumbnail!

The screenshot shows how the documentation of different methods uses different language to refer to the "this map":

* toArray and toBuffer use "this map"
* toIndexedSeq uses "this traversable or iterator"
* toIterable and toIterator use "this iterable collection"

I think that "this map" should be uses consistently, and that this bug disables the documentation macro machinery that is supposed to achieve this consistency.
