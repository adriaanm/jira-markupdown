When an actor is terminated automatically through a linked actor, the state returned by `getState` is incorrect if the actor was suspended prior to terminating. Example:

{code}
object Slave extends Actor {
  def act() {
    loop {
      react {
        case 'doWork =>
          println("Done")
          reply('done)
      }
    }
  }
}
object Master extends Actor {
  def act() {
    link(Slave)
    Slave ! 'doWork
    react {
      case 'done =>
        throw new Exception("Master crashed")
    }
  }
}
{code}

Interaction on the interpreter shell shows incorrect behavior:
{code}
Welcome to Scala version 2.8.0.r21113-b20100309111553 (Java HotSpot(TM) Server VM, Java 1.6.0_16).
Type in expressions to have them evaluated.
Type :help for more information.

scala> Slave.start()
res0: scala.actors.Actor = Slave$$@21b97e

scala> Master.start()
res1: scala.actors.Actor = Master$$@1435686

scala> Done


scala> Master.getState
res2: scala.actors.Actor.State.Value = Terminated

scala> Slave.getState 
res3: scala.actors.Actor.State.Value = Suspended
{code}
