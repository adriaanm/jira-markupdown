= problem =
As discussed in scala/bug#4008, the default from `Map.withDefaultValue` does not last through map transforms:
```scala
scala> val map = Map('a' -> 1, 'b' -> 2).withDefaultValue(0)
map: scala.collection.immutable.Map[Char,Int] = Map((a,1), (b,2))

scala> map('c')
res4: Int = 0

scala> val map2 = map.map(e => e)
map2: scala.collection.immutable.Map[Char,Int] = Map((a,1), (b,2))

scala> map2('c')
java.util.NoSuchElementException: key not found: c
	at scala.collection.MapLike$$class.default(MapLike.scala:223)
	...
```

= analysis =

This means that a `Map` created from `withDefaultValue` isn't very useful for providing a default for a map, as the default value may silently disappear if you perform basic operations like using it in a for comprehension.

= enhancement recommendation =

It's not realistic to expect the default to stick around if the type of the collection changes (e.g. from `Map` to `Seq` where it's not even clear what a default would mean), but I think it's possible to have the default stick around when the type of the collection doesn't change, doing something like:
```scala
object WithDefault {
  implicit def canBuildFrom[K, V] =
    new generic.CanBuildFrom[WithDefault[K, V], (K, V), WithDefault[K, V]] {

      // probably need to make "d" (the default value) visible
      def apply(from: WithDefault[K, V]) = new WithDefault[K, V](from.d)

      // it's not possible to build a WithDefault in this way
      def apply() = error("unsupported default apply")
    }
}
```

This is basically the solution given here:

http://stackoverflow.com/questions/4224242/implement-a-scala-collection-so-that-map-filter-etc-produce-the-right-type

The only problem I see is that there's no way to do something sensible for the no argument `apply`. The code above simply throws an exception.
