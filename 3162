No, it isn't fixed.  Using the latest nightly scala-2.9.0.r24273-b20110213020039.

Put the following in example.scala
```scala
object Example extends Application {
  trait Bound { type T }

  trait X {
    type A <: Bound

    val x : A
    var n : x.T
  }

  trait Y extends X {
    trait YA extends Bound { type T >: Int <: Int }
    type A <: YA
    var n : x.T = 3
  }

  trait W extends Y {
    type ZA <: Bound

    type A = YA with ZA
  }

  trait Z extends X {
    trait ZA extends Bound { type T >: String <: String }
    type A <: ZA
    n = "foo"
  }

  new W with Z {
    lazy val x : A = x
  }
}
```

Now run the following
```scala
% ./scalac -version
Scala compiler version 2.9.0.r24273-b20110213020039 -- Copyright 2002-2011, LAMP/EPFL
% ./scalac ./example.scala
% ./scala -version
Scala code runner version 2.9.0.r24273-b20110213020039 -- Copyright 2002-2011, LAMP/EPFL
% ./scala Example
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at scala.runtime.BoxesRunTime.unboxToInt(Unknown Source)
	at Example$$$$anon$$1.n_$$eq(example.scala:29)
	at Example$$Z$$class.$$init$$(example.scala:26)
	at Example$$$$anon$$1.<init>(example.scala:29)
	at Example$$delayedInit$$body.apply(example.scala:29)
	at scala.Function0$$class.apply$$mcV$$sp(Function0.scala:36)
	at scala.runtime.AbstractFunction0.apply$$mcV$$sp(AbstractFunction0.scala:15)
	at scala.Application$$$$anonfun$$main$$1.apply(Application.scala:68)
	at scala.Application$$$$anonfun$$main$$1.apply(Application.scala:68)
	at scala.collection.LinearSeqOptimized$$class.foreach(LinearSeqOptimized.scala:61)
	at scala.collection.immutable.List.foreach(List.scala:45)
	at scala.collection.generic.TraversableForwarder$$class.foreach(TraversableForwarder.scala:41)
	at scala.Application$$class.main(Application.scala:68)
	at Example$$.main(example.scala:1)
	at Example.main(example.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at scala.tools.nsc.util.ScalaClassLoader$$$$anonfun$$run$$1.apply(ScalaClassLoader.scala:81)
	at scala.tools.nsc.util.ScalaClassLoader$$class.asContext(ScalaClassLoader.scala:24)
	at scala.tools.nsc.util.ScalaClassLoader$$URLClassLoader.asContext(ScalaClassLoader.scala:91)
	at scala.tools.nsc.util.ScalaClassLoader$$class.run(ScalaClassLoader.scala:81)
	at scala.tools.nsc.util.ScalaClassLoader$$URLClassLoader.run(ScalaClassLoader.scala:91)
	at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:33)
	at scala.tools.nsc.ObjectRunner$$.runAndCatch(ObjectRunner.scala:40)
	at scala.tools.nsc.MainGenericRunner$$.process(MainGenericRunner.scala:88)
	at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:32)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
```
  
I would be extremely surprised if the problem just happened to be fixed "accidentally".



