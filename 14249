The attached patch increases the amount of information captured in Actor.exitReason when an exception is thrown but unhandled by the actor.  It's based on a suggestion from Josh that came up in a discussion on IRC about DPP's recent remarks.

The patch includes:
 * new class to contain error information
 * modifications to Reaction to capture error information
 * test case to ensure error information is indeed properly captured

There is one part that concerns me.  Reaction is currently catching ALL throwables.
```scala
      case t: Throwable => {
        Debug.info(a+": caught "+t)
        a.terminated()
        // links
        a.synchronized {
          if (!a.links.isEmpty) {
            val sender = try {
              Some(a.sender)
            } catch {
              case e: NoSuchElementException => None
            }
            val message = if (this.msg != null) Some(this.msg) else None
            val reason = UnhandledThrowable(a, t, message, sender)
            a.exitLinked(reason)
          } else
            t.printStackTrace()
        }
      }
```
I didn't change that behavior, but I think it should at least let java.lang.Error and it's subclasses through.   Errors indicate that something is seriously wrong so I don't think it's a good idea to swallow them.  So I'd seriously consider putting a guard on the case as follows:
```scala
      case t: Throwable if !t.isInstanceOf[java.lang.Error] => {
          //....
      }
```
