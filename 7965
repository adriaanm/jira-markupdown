We need to have alpha-renaming in scaladoc to fix this systematically. OR, to fix this particular occurrence, we need to rename the Map type parameters to [K,V] for key and value, making the signature look like:
{code}
def map[B, That](f: ((K, V)) ⇒ B)(implicit bf: CanBuildFrom[Map[K, V], B, That]): That 
{code}
and the usecase:
{code}
def map[B, That](f: ((K, V)) ⇒ B): Map[B] // which is incorrect again, see SI-3448
{code}

What do you think?

*And now the long explanation why this signature gets there:*
Method map in scala.collection.Map comes from TraversableLike (which implements the declarations in FilterMonadic and GenTraversableLike):

{code}
trait TraversableLike[+A, +Repr] {
  ...
  def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {
    val b = bf(repr)
    b.sizeHint(this)
    for (x <- this) b += f(x)
    b.result
  }
  ...
}
{code}

Now, map is inherited into scala.collection.Map by way of: 

{code}
trait Map[A, +B] extends Iterable[(A, B)] with ...
trait Iterable[+A] extends ... with IterableLike[A, Iterable[A]] 
trait IterableLike[+A, +Repr] extends ... with TraversableLike[A, Repr] with ...
{code}

But as you can see, {{Map}} extends {{Iterable[(A, B)]}}, and thus substitutes {{A}} to {{((Map's)A, (Map's)B)}}. And now it's obvious how the signature is generated:

{code}
def map[B, That](f: ((Map's)A, (Map's)B) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = ...
{code}
