The exception is an implementation detail. You shouldn't ever observe it being thrown within normal coding, but it is thrown and caught when you use the return statement inside an anonymous inner function. For example in the following code:
```scala
   def findMeAKitten(kittens : List[Kitten]) = {
     for(kitten <- kittens){ 
       if (iLike(kitten)) return kitten;
     }
     error("No good kittens. :(");
   }
```

The return statement actually happens inside an anonymous function defined locally, so it can't just use the return instruction. What it actually does is throw a NonLocalReturnException containing the found kitten. 

Consequently this means that if you had written this code previously it would have been much slower than a normal return statement. With the modified code for not filling in stack traces it should be comparably fast. 
