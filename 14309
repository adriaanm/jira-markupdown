Consider this code:
```scala
trait T[A[C] <: T[A, B], B] {
  def x : T[A, B] = y
  def y : A[Int]
  def value : B 
}

case class T2[B](value : B) extends T[T2, B] {
  def y = new T2[Int](1)
}
```
The compiler assumes "T2[C] <: T[T2, B]" holds for all C and B, which obviously isn't true. Here's an example how it breaks down:
```scala
scala> val t = T2[Double](10.1)
t: T2[Double] = T2(10.1)

scala> t.x.value
java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Double
        at scala.runtime.BoxesRunTime.unboxToDouble(Unknown Source)
        at .<init>(<console>:9)
        at .<clinit>(<console>)
        at RequestResult$$.<init>(<console>:4)
        at RequestResult$$.<clinit>(<console>)
        at RequestResult$$result(<console>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect...
```
