Somewhat minimized; does seem to require a lot of elements working in concert, but I eliminated case classes, nested classes, and copy methods.  Appears to key on anonymous functions nested in anonymous functions.
{code}
class M(x0: Int = 1)(x1: Int = 1) {
  def g(x2: Int = 1) = ()
}

object Test {
  ((null: Option[M]) getOrElse new M()()).g()
}
{code}
