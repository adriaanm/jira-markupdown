The original example compiles if the apply application is desugared,

{code}
object Main {
  class A()
  case class RichA() {
    def apply(fun: Int => String) {}
  }
  implicit def toRichA(a: A): RichA = null
  val a = new A()
  def a(x: Boolean, y: Boolean) = x ||  y
  a.apply((p: Int) => "")  // Now compiles
  //^^^^^ desugared apply
}
{code}

Here's another simpler example,

{code}
object AmbigImplicits {
  trait Base
  
  trait FooOps extends {
    def foobar(i : Int) = i

    def apply(i : Int) = i
  }
  
  trait BarOps extends {
    def foobar(s : String) = s

    def apply(s : String) = s
  }
  
  implicit def baseFoo(b : Base) = new FooOps {}
  implicit def baseBar(b : Base) = new BarOps {}
  
  val b = new Base {}
  
  val i = b.foobar(23)     // OK
  val s = b.foobar("foo")  // OK

  val i2 = b.apply(23)     // OK
  val s2 = b.apply("foo")  // OK
  
  val i3 = b(23)           // Error ambiguous implicits
  val s3 = b("foo")        // Error ambiguous implicits
}
{code}

Here the error for {{i3}} (similar for {{s3}}) is,

{code}
SI5142.scala:30: error: type mismatch;
 found   : java.lang.Object with bugs.SI5142.AmbigImplicits.Base
 required: ?{val apply: ?}
Note that implicit conversions are not applicable because they are ambiguous:
 both method baseBar in object AmbigImplicits of type (b: bugs.SI5142.AmbigImplicits.Base)java.lang.Object with bugs.SI5142.AmbigImplicits.BarOps
 and method baseFoo in object AmbigImplicits of type (b: bugs.SI5142.AmbigImplicits.Base)java.lang.Object with bugs.SI5142.AmbigImplicits.FooOps
 are possible conversion functions from java.lang.Object with bugs.SI5142.AmbigImplicits.Base to ?{val apply: ?}
    val i3 = b(23)           // Error ambiguous implicits
{code}

This is with Scala 2.10.0.rdev-4227-2012-01-23-g8051740, 2.9.1.final, and 2.8.2.final.
