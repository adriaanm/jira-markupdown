Here's what I ran into, which might make a nicer test case than Hadoop because all the required classes come with the JDK:
```scala
package something.weird

import javax.xml.bind.annotation.adapters.{XmlAdapter,XmlJavaTypeAdapter}
import scala.reflect.BeanInfo

@BeanInfo class Intermediate {
    var foo : String = _
    var bar: String = _
}

@XmlJavaTypeAdapter(classOf[Adapter]) class Original(val foo: String, val bar: String) { 
}

class Adapter extends XmlAdapter[Intermediate, Original] { 
    def marshal(o: Original) : Intermediate = null
    def unmarshal(i: Intermediate) : Original = null
}
```

Compiles in 2.8.1, fails in 2.9.0 with 
```scala
[error] jaxb.scala:11: type mismatch;
[error]  found   : java.lang.Class[something.weird.Adapter](classOf[something.weird.Adapter])
[error]  required: java.lang.Class[_ <: javax.xml.bind.annotation.adapters.XmlAdapter]
[error] @XmlJavaTypeAdapter(classOf[Adapter]) class Original(val foo: String, val bar: String) {
```
