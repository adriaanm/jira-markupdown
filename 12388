Note that there is also some discussion at scala/bug#4042, but that ticket is a mix of issues with NumericRange generally (including Int vs. Long type type stuff) and issues that involve floating point math specifically. (Paul: "These classes are surprisingly subtle", and as an example of what I mean by "more principled", "That said, if I were to do it again I would most likely just wrap an integer basis, so that there is always an underlying range with well defined endpoints and integer step, e.g. 0.0 to 1.0 by 0.01 is represented by MappedRange(0 to 100 by 1, multiplier = 0.01) or whatever")
