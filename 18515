Received an assertion when using tab completion in the Scala REPL.

As the prompt, I typed: Short.MinV<tab> and received the following:

{noformat}
[tw-mbp13-ryano scala-cookbook]$ scala
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=utf8
Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_17).
Type in expressions to have them evaluated.
Type :help for more information.

scala> Short.MinVerror: 
     while compiling: <console>
        during phase: global=erasure, atPhase=patmat
     library version: version 2.10.2
    compiler version: version 2.10.2
  reconstructed args: -nowarn

  last tree to typer: This(object $eval)
              symbol: object $eval in package $line2 (flags: <module>)
   symbol definition: class $eval extends Object
                 tpe: type
       symbol owners: object $eval -> package $line2
      context owners: value $print -> object $eval -> package $line2

== Enclosing template or block ==

Template( // val <local $eval>: <notype> in object $eval, tree.tpe=type
  "java.lang.Object" // parents
  ValDef(
    private
    "_"
    <tpt>
    <empty>
  )
  // 5 statements
  DefDef( // def <init>(): type in object $eval
    <method>
    "<init>"
    []
    List(Nil)
    <tpt> // tree.tpe=type
    Block(
      Apply( // def <init>(): Object in class Object
        $eval.super."<init>" // def <init>(): Object in class Object
        Nil
      )
      ()
    )
  )
  ValDef( // lazy private[this] var $result: scala.tools.nsc.interpreter.IMain in object $eval
    private <mutable> <local> lazy <triedcooking>
    "$result "
    <tpt> // tree.tpe=tools.nsc.interpreter.IMain
    <empty>
  )
  DefDef( // lazy val $result: scala.tools.nsc.interpreter.IMain in object $eval
    <method> <stable> <accessor> lazy
    "$result"
    []
    List(Nil)
    <tpt> // tree.tpe=tools.nsc.interpreter.IMain
    Block(
      Assign(
        $eval.this."$result " // lazy private[this] var $result: scala.tools.nsc.interpreter.IMain in object $eval
        Apply( // val $intp: scala.tools.nsc.interpreter.IMain
          "$line2"."$read"."$iw"."$iw"."$intp" // val $intp(): scala.tools.nsc.interpreter.IMain
          Nil
        )
      )
      $eval.this."$result " // lazy private[this] var $result: scala.tools.nsc.interpreter.IMain in object $eval
    )
  )
  ValDef( // private[this] val $print: String in object $eval
    private <local> <triedcooking>
    "$print "
    <tpt> // tree.tpe=String
    Block( // tree.tpe=String
      "$read"."$iw"."$iw" // object $iw
      Apply( // final def +(x$1: Any): String in class String, tree.tpe=String
        "$intp: scala.tools.nsc.interpreter.IMain = "."$plus" // final def +(x$1: Any): String in class String
        Apply( // def replStringOf(arg: Any,maxElements: Int): String in object ScalaRunTime, tree.tpe=String
          "scala"."runtime"."ScalaRunTime"."replStringOf" // def replStringOf(arg: Any,maxElements: Int): String in object ScalaRunTime, tree.tpe=(arg: Any, maxElements: Int)String
          // 2 arguments
          Apply( // val $intp: scala.tools.nsc.interpreter.IMain, tree.tpe=scala.tools.nsc.interpreter.IMain
            "$line2"."$read"."$iw"."$iw"."$intp" // val $intp: scala.tools.nsc.interpreter.IMain, tree.tpe=()scala.tools.nsc.interpreter.IMain
            Nil
          )
          1000
        )
      )
    )
  )
  DefDef( // val $print(): String in object $eval
    <method> <stable> <accessor>
    "$print"
    []
    List(Nil)
    <tpt> // tree.tpe=String
    $eval.this."$print " // private[this] val $print: String in object $eval, tree.tpe=String
  )
)

== Expanded type of tree ==

ThisType(object $eval)

uncaught exception during compilation: java.lang.AssertionError
       [tw-mbp13-ryano scala-cookbook]$ scala
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=utf8
Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_17).
Type in expressions to have them evaluated.
Type :help for more information.

scala> :q
[tw-mbp13-ryano scala-cookbook]$ scala
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=utf8
Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_17).
Type in expressions to have them evaluated.
Type :help for more information.

scala> Short.MinValue
                              val MinValue: Short(-32768)   

scala> Short.MinValue
                              val MinValue: Short(-32768)   

scala> :q
[tw-mbp13-ryano scala-cookbook]$ scala
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=utf8
Welcome to Scala version 2.10.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_17).
Type in expressions to have them evaluated.
Type :help for more information.

scala> Short.MinVerror: 
     while compiling: <console>
        during phase: erasure
     library version: version 2.10.2
    compiler version: version 2.10.2
  reconstructed args: -nowarn

  last tree to typer: This(object $eval)
              symbol: object $eval in package $line2 (flags: <module>)
   symbol definition: class $eval extends AnyRef
                 tpe: type
       symbol owners: object $eval -> package $line2
      context owners: value $print -> object $eval -> package $line2

== Enclosing template or block ==

Template( // val <local $eval>: <notype> in object $eval, tree.tpe=type
  "java.lang.Object" // parents
  ValDef(
    private
    "_"
    <tpt>
    <empty>
  )
  // 5 statements
  DefDef( // def <init>(): type in object $eval
    <method>
    "<init>"
    []
    List(Nil)
    <tpt> // tree.tpe=type
    Block(
      Apply( // def <init>(): Object in class Object
        $eval.super."<init>" // def <init>(): Object in class Object
        Nil
      )
      ()
    )
  )
  ValDef( // lazy private[this] var $result: scala.tools.nsc.interpreter.IMain in object $eval
    private <mutable> <local> lazy <triedcooking>
    "$result "
    <tpt> // tree.tpe=tools.nsc.interpreter.IMain
    <empty>
  )
  DefDef( // lazy val $result: scala.tools.nsc.interpreter.IMain in object $eval
    <method> <stable> <accessor> lazy
    "$result"
    []
    List(Nil)
    <tpt> // tree.tpe=tools.nsc.interpreter.IMain
    Block(
      Assign(
        $eval.this."$result " // lazy private[this] var $result: scala.tools.nsc.interpreter.IMain in object $eval
        Apply( // val $intp: scala.tools.nsc.interpreter.IMain
          "$line2"."$read"."$iw"."$iw"."$intp" // val $intp: scala.tools.nsc.interpreter.IMain
          Nil
        )
      )
      $eval.this."$result " // lazy private[this] var $result: scala.tools.nsc.interpreter.IMain in object $eval
    )
  )
  ValDef( // private[this] val $print: String in object $eval
    private <local> <triedcooking>
    "$print "
    <tpt> // tree.tpe=String
    Block( // tree.tpe=String
      "$read"."$iw"."$iw" // object $iw
      Apply( // final def +(x$1: Any): String in class String, tree.tpe=String
        "$intp: scala.tools.nsc.interpreter.IMain = "."$plus" // final def +(x$1: Any): String in class String
        Apply( // def replStringOf(arg: Any,maxElements: Int): String in object ScalaRunTime, tree.tpe=String
          "scala"."runtime"."ScalaRunTime"."replStringOf" // def replStringOf(arg: Any,maxElements: Int): String in object ScalaRunTime, tree.tpe=(arg: Any, maxElements: Int)String
          // 2 arguments
          Apply( // val $intp: scala.tools.nsc.interpreter.IMain, tree.tpe=scala.tools.nsc.interpreter.IMain
            "$line2"."$read"."$iw"."$iw"."$intp" // val $intp: scala.tools.nsc.interpreter.IMain, tree.tpe=()scala.tools.nsc.interpreter.IMain
            Nil
          )
          1000
        )
      )
    )
  )
  DefDef( // val $print: String in object $eval
    <method> <stable> <accessor>
    "$print"
    []
    List(Nil)
    <tpt> // tree.tpe=String
    $eval.this."$print " // private[this] val $print: String in object $eval, tree.tpe=String
  )
)

== Expanded type of tree ==

ThisType(object $eval)

uncaught exception during compilation: java.lang.AssertionError
             MinValue

Failed to initialize the REPL due to an unexpected error.
This is a bug, please, report it along with the error diagnostics printed below.
java.lang.AssertionError: assertion failed: TypeHistory(repl:4,Object {
  def <init>(): scala.runtime.ScalaRunTime.type
  def isArray(x: AnyRef): Boolean
  def isArray(x: Any,atLevel: Int): Boolean
  private def isArrayClass(clazz: Class[_],atLevel: Int): Boolean
...
{noformat}
