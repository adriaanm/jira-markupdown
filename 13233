Attached the stack trace and a zip file contains the two projects required to cause the problem.  There are two files in the componentsBase project directory org/scales/components/grid :  

Grid.scala
working of Grid.scalab

The latter is a working version of the code, which which compilations and test cases will run sucessfully.  The first Contains the following type declarations:
{code}
def apply[ RowType]( rows : org.scales.utils.ReadOnlyProperty[Iterable[T forSome {type T <:
RowType}]], rowVariable: scala.util.DynamicVariable[RowType]) 
{code} 
The Iterable[T forSome {type T <: RowType}] seems to cause the stack overflow, using 
{code}
def apply[ RowType, RowIterable <: Iterable[RowType] ]( rows : org.scales.utils.ReadOnlyProperty[RowIterable], rowVariable: scala.util.DynamicVariable[RowType]) 
{code}
instead works fine.  The 2.7.0 final compiler used in the antBuild.xml can compile it without issue, but the 2.7.1 compiler in the eclipse plugin seems to cause the stack overflow.

I have tried numerous combinations of projects to reproduce without having the PDE based projects but cannot reproduce.  I do not understand why simple project linking or class directory linking does not reproduce it.

Having discussed this with Sean it seems likely to be the compiler, but I assume that it requires settings from the project that change with respect to the PDE projects.

Feel free to email me about reproducing.

Just to re-state I can easily work around this using the extra type parameter.
