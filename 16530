Code that should work but doesn't:

{code:test_placeholder.scala}
class Foo[T] {
  val x: T = _
  def foo(x: T = _) {}
}
{code}

Result:
```
test_placeholder.scala:4: error: unbound placeholder parameter
  def foo(x: T = _) {}
                 ^
one error found
```

Default values for params should work exactly like values specified for fields.  As it happens, you can work around this like this:
```
class Foo[T] {
  val x: T = _
  def foo(x: T = null.asInstanceOf[T]) {}
}
```

But this casting of 'null' (which works even if T is primitive) is highly non-obvious and clearly a kludge, probably non-portable as well.
