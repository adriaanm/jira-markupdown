That's not always an option:
{code}
illegal inheritance from final class Optional
[error] trait Optional[+T] extends java.util.Optional[T @uV]
[error]                                      ^
[error] one error found
{code}
Without fixing this there is no way to treat java.util.Optional (for instance - as one example among endless) as the covariant type it should be without adding an uncheckedVariance annotation at every single use site until you die. Of course there's no point in that, you can write _ <: A at every single use site until you die, and that's probably shorter.
{code}
scala> import scala.annotation.unchecked.{ uncheckedVariance => uV }
import scala.annotation.unchecked.{uncheckedVariance=>uV}

scala> type Opt[+A] = java.util.Optional[A @uV]
defined type alias Opt

scala> class A[+T](val x: Opt[T])
<console>:9: error: covariant type T occurs in invariant position in type => Opt[T] of value x
       class A[+T](val x: Opt[T])
                       ^

scala> class A[+T](val x: java.util.Optional[T])
<console>:8: error: covariant type T occurs in invariant position in type => java.util.Optional[T] of value x
       class A[+T](val x: java.util.Optional[T])
                       ^

scala> class A[+T](val x: Option[T])
defined class A

scala> class A[+T](val x: java.util.Optional[_ <: T])
defined class A

scala> class A[+T](val x: Opt[T @uV])
defined class A
{code}
