```scala
class Foo[@specialized("Int") T](_x: T) {
  val x = _x
  println(x)
}

object Test {
  def main(args: Array[String]) {
    (new Foo(new Object))
    (new Foo(42))
  }
}
```

This prints '0' in the second case. The original constructor should not be executed in the superclass when the instance is a specialized subclass. Instead it should be copied to the subclass `Foo$$mcI` and executed after the call to super.
