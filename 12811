I found the problem that was led to the broken MSIL build last week. It seems like NSC is not always pickling refinement types, which breaks separate compilation on certain parts of the compiler. Basically, the way NSC is checked in now, SymbolLoaders cannot be compiled without compiling Global also. Transcript:

{code}
sean-mcdirmid:~/workspace/scala/src/compiler mcdirmid$$ ../../build/quick/bin/scalac -d ../../build/quick/lib/compiler/ scala/tools/nsc/symtab/SymbolLoaders.scala 
scala/tools/nsc/symtab/SymbolLoaders.scala:263: error: type mismatch;
 found   : SymbolLoaders.this.global.Symbol
 required: MSILTypeLoader.this.typeParser.global.loaders.clrTypes.global.Symbol
      typeParser.parse(typ, root)
                            ^
one error found
sean-mcdirmid:~/workspace/scala/src/compiler mcdirmid$$ ../../build/quick/bin/scalac -d ../../build/quick/lib/compiler/ scala/tools/nsc/symtab/SymbolLoaders.scala scala/tools/nsc/Global.scala 
sean-mcdirmid:~/workspace/scala/src/compiler mcdirmid$$ 
{code}

I think this is because NSC isn't pickling the Global.loaders refinement, as I've been noticing in the IDE when source info replaces class file info the type of loaders changes to include the refinement. This is just a hunch and could be from an unrelated problem, but I'm confident I'm killing to bugs with one stone here.

I've narrowed it down to a small example containing 4 small files (Global, SymbolLoaders, CLRTypes, TypeParser) and have attached it to the bug report. To replicate the bug, all files must be built (into test15/bin) first so classes are loaded instead of sources. If sources are loaded, the bug won't occur (I think because refinements aren't being pickled).





