I don't see the problem here.

Replying to [ticket:3958 bethard]:
> The !TraversableOnce documentation says:
> {code}
> This trait is composed of those methods which can be implemented solely in terms of foreach
> }}

> However, you have to implement many more methods than just `foreach` to get a !TraversableOnce:

Ok. The question, therefore, is: can these many more methods be implemented in terms of foreach? If they can, the documentation is correct.

The documentation DOES NOT SAY you just have to implement foreach. It says only that there isn't any methods that cannot be implemented in terms of foreach. Let's consider, for example, "exists", which is abstract. Here's an implementation:
```scala
def exists(p: (A) â‡’ Boolean) : Boolean = {
  class ResultFound extends Exception
  var result = false
  try {
    foreach { el =>
      result &&= p(el)
      if (result)
        throw new ResultFound
    }
  } catch (ex) {
    case _: ResultFound =>
  }
  result
}
```

There, implemented in terms of foreach, as required. Alas, that sentence does not end there, and the text that follows it makes it more clear:

> and which do not need access to a Builder

Methods which need access to a Builder are those methods that return a collection of best fitting type. So there is no map method there, for example.

    
