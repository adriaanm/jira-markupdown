It seems there is a serious regression of lub between 2.9 and 2.10, which leads to illogical types.
Here is one scenario which works:
```repl
scala> trait S { type T }
defined trait S

scala> trait A extends S { type T <: A }
defined trait A

scala> trait B extends S { type T <: B }
defined trait B

scala> val a = new A{}
a: Object with A = $anon$1@edfd5b8

scala> val b = new B{}
b: Object with B = $anon$1@68d88d5

scala> val x = if (true) a else b
x: S{type T <: S} = $anon$1@edfd5b8
```
This one looks good. Now, add a field x to types S, A, B:
```repl
scala> trait S { type T; val x: AnyRef }
defined trait S

scala> trait A extends S { type T <: A; val x: A = null }
defined trait A

scala> trait B extends S { type T <: B; val x: B = null }
defined trait B

scala> val a = new A{}
a: Object with A = $anon$1@370410a7

scala> val b = new B{}
b: Object with B = $anon$1@2a3fa87a

scala> val x = if (true) a else b
x: ScalaObject with S = $anon$1@370410a7
```
I would have expected to see `S { type T <: S; val x: S ` as the type but instead I get `ScalaObject with S`. 
Note this is a regression from 2.9.1, where I get ` ScalaObject with S{val x: ScalaObject with S; type T <: ScalaObject with S} `.

Since this affects fundamental type operations I classify a solution as critical for 2.10.

