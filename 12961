Consider the following:
```scala
object Test {
  def test(x: => Unit)(y: Unit): String = "done"

  def main(args: Array[String]) {
    val t = test(println("never seen"))_
    println(t())
  }
}
```
This produces:
```scala
never seen
done
```
It should produce just:
```scala
done
```

scalac -Xprint:typer shows that the definition of t is compiled as:
```scala
val t: (Unit) => String = {
  <synthetic> val eta$$0$$1: Unit = scala.this.Predef.println("never seen");
  ((eta$$1$$1: Unit) => Test.this.test(eta$$0$$1)(eta$$1$$1))
};
```
This eta-expansion incorrectly ignores that the first parameter of test is call-by-name.

