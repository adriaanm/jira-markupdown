You're mistaken. The exception is thrown from within the body of the loop and caught outside the loop, the thread then terminates ... there's no possibility of the loop being restarted within the same thread.

Compare with the following simplified but structurally similar example,

{code}
try {
  while(true) {
    throw new RuntimeException
  }
} catch {
  case ex : RuntimeException =>
}

println("Done")
{code}

The loop cannot and will not be reentered following the catch of the thrown exception. "Done" will always be printed.

It's possible that within your debug session you're seeing a subsequent incarnation of the runner thread, but that would be via a completely different mechanism.
