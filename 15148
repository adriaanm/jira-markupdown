There seems to be an error with partially applied functions and implicit type conversion. Here's a simple example:
```scala
import java.util.{List => JList}
import scala.collection.mutable.ArrayBuffer
import scala.collection.JavaConversions._

object PartialTest {

def fromJava[T](li: JList[T]): List[T] = asList(li).toList

//implicit conversion - ok
def test1(jList:JList[_]) = jList.filter(_.isInstanceOf[java.lang.Object])

//explicit conversion - ok
def test2(jList:JList[_]) {
val f = fromJava(jList).filter _
f(_.isInstanceOf[java.lang.Object])
}

//implicit conversion - error
def test3(jList:JList[_]) {
val f = jList.filter _
f(_.isInstanceOf[java.lang.Object])
}

}
```

The first 2 methods works fine (test1 + test2), but the last one (test3) gives an error which looks a little bit funny:
```scala
error: missing arguments for method filter in trait TraversableLike;
follow this method with `_' if you want to treat it as a partially applied function
       val f = jList.filter _
                     ^
```

That's what I've alreasy done ;) So for me it looks like an error with implicit conversions in combination with a partially applied function.

Scala 2.8.0-20100318.025813-346
