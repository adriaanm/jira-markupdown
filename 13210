Consider the following code snippet:
```scala
scala> class Foo { override def equals(that : Any) = { println ("Foo.equals called"); super.equals(that); }}
defined class Foo

scala> new Foo == new Foo
Foo.equals called
res0: Boolean = false

scala> case class Bar(x : Foo);
defined class Bar

scala> new Bar(new Foo)
res1: Bar = Bar(Foo@6f9f88)

scala> res1 == res1
Foo.equals called
res2: Boolean = true
```

Even though res1 eq res1 (obviously), the equality test invokes equality on the contained Foo. This is sad, and means that when you e.g. have recursive case class types you're going to often do a lot of unneccessary comparisons.
