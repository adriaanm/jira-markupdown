This report applies to 2.7.1-final and r15556 on Mac OS X 10.5.4. The stack trace below is from r15556.

The following program compiles fine but produces a Java VerifyError at run-time about overriding a strangely-named final method.  The problem goes away if 'override val foo = false' is added to the Exp class definition.

{code}
object Main extends Application {

    trait Valued {
        val foo : Boolean = false
    }

    abstract class Exp extends Valued
    case class Num (i : Int) extends Exp {
        override val foo = true
    }

    val e = Num (42)
    println (e.foo)
    
}
{code}

Stack trace:

{code}
Exception in thread "main" java.lang.VerifyError: class Main$$Num overrides final method .;f?-hï¿½-
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:675)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$$100(URLClassLoader.java:56)
	at java.net.URLClassLoader$$1.run(URLClassLoader.java:195)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:316)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:374)
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2395)
	at java.lang.Class.getMethod0(Class.java:2642)
	at java.lang.Class.getMethod(Class.java:1579)
	at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:70)
	at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:164)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
{code}

