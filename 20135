{code}
package p

object O {
  protected[p] def f(x: Int = 1) = x
  private[p] def g(x: Int = 1) = x
}

object Test {
  O.f()
  O.f$default$1 // fails, the default getter is protected (not protected[p])

  O.g()
  O.g$default$1 // passes, the default getter is public
}
{code}

The default getter {{f$default$1}} is {{protected}}, instead of {{protected[p]}}. For some reason, then invocation of {{O.f()}}, which expands to {{O.f(O.f$default$1)}} type checks. Accessing the default getter explicitly fails.

Also note that the default getter of the {{private[p]}} method {{O.g}} is public.

{noformat}
$ scalac Test.scala -Xprint:typer
Test.scala:10: error: method f$default$1 in object O cannot be accessed in object p.O
 Access to protected method f$default$1 not permitted because
 enclosing object Test in package p is not a subclass of
 object O in package p where target is defined
  O.f$default$1 // fails
    ^
[[syntax trees at end of                     typer]] // Test.scala
package p {
  object O extends scala.AnyRef {
    def <init>(): p.O.type = {
      O.super.<init>();
      ()
    };
    protected[p] def f(x: Int = 1): Int = x;
    <synthetic> protected def f$default$1: Int = 1;
    private[p] def g(x: Int = 1): Int = x;
    <synthetic> def g$default$1: Int = 1
  };
  object Test extends scala.AnyRef {
    def <init>(): p.Test.type = {
      Test.super.<init>();
      ()
    };
    O.f(O.f$default$1);
    O.<f$default$1: error>;
    O.g(O.g$default$1);
    O.g$default$1
  }
}

one error found
{noformat}
