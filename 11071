This is fixed in the [Ammonite REPL|http://lihaoyi.github.io/Ammonite/#Ammonite-REPL]

{code:scala}
@  Set(1, "1.2")
res8: scala.collection.immutable.Set[Any] = Set(1, 1.2)
@ Set(1, "1.2 ")
res9: scala.collection.immutable.Set[Any] = Set(1, 1.2 )
@ Set(1, "1.2, 55")
res10: scala.collection.immutable.Set[Any] = Set(1, 1.2, 55)
@ Set("1", "1.2")
res11: scala.collection.immutable.Set[java.lang.String] = Set("1", "1.2")
@ Set("1", "1.2 ")
res13: scala.collection.immutable.Set[java.lang.String] = Set("1", "1.2 ")
@ Set(1, 1.2)
res12: scala.collection.immutable.Set[Double] = Set(1.0, 1.2)
{code}

As you can see, Set[Any] behavior still isn't great, but most people don't deal with `Any`s much anyway. Set[T] for any strongly-typed T is pretty-printed properly in the same way a literal would be written
