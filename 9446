And constructors as well. However, in this case, there doesn't seem to be a workaround (at least that I've found so far):
```scala

import scala.reflect.runtime.universe._

case class Foo(n: Int) extends AnyVal
case class Bar(foo: Foo)

object Test { 
  def main(args: Array[String]) {
    val mirror = runtimeMirror(getClass.getClassLoader)
    val cm = mirror.reflectClass(typeOf[Bar].typeSymbol.asClass)
    val ctor = typeOf[Bar].declaration(nme.CONSTRUCTOR).asMethod
    val ctorm = cm.reflectConstructor(ctor)
    ctorm(Foo(3)) // java.lang.NoClassDefFoundError: no Java class corresponding to ErasedValueType(Foo) found
    ctorm(3)      // java.lang.NoClassDefFoundError: no Java class corresponding to ErasedValueType(Foo) found
  }
}
```
