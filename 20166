I have the following layout of code which does not compile but according to the spec for protected should:
```scala
trait A {
  protected def callMe(): Unit
}

trait B extends A {
  protected def a: A
  final override protected def callMe(): Unit = a.callMe()
}
```
The compiler gives me an error
```scala
 error: method callMe in trait A cannot be accessed in A
 Access to protected method callMe not permitted because
 prefix type A does not conform to
 trait B where the access take place
         final override protected def callMe(): Unit = a.callMe()
                                                         ^
```

According to the spec:
The protected modifier applies to class member definitions. Protected members
of a class can be accessed from within
– the template of the defining class,
– all templates that have the defining class as a base class,
– the companion module of any of those classes.

Especially the second point should apply here but the compiler seems to treat `callMe` as `protected\[this\]`
