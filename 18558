Pattern matching against the {{TypeTree}} of an {{Apply}} node is a bit clumsy at the moment, since the extractor class for {{TypeTree}} s doesn't allow the programmer to match against the wrapped up tree.

Instead the programmer has to invoke the {{TypeTree.original}} method and match against the tree returned, i.e.

{code}
case Apply(typeTree @ TypeTree(), args) => typeTree.original match {
    case pattern => ...
}
{code}

Changing the {{unapply}} method of the {{TypeTreeExtractor}} class to

{code}
abstract class TypeTreeExtractor {
    def apply(): TypeTree
    def unapply(typeTree: TypeTree): Option[Tree]
}
{code}

would allow a more compact notion when reflecting {{TypeTree}} s:

{code}
case Apply(TypeTree(pattern), args) => ...
{code}
