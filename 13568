given the following Java interface in file MyInterface.java:
{code}
interface MyInterface { void foo() ; }
{code}
and the following Scala code in file MyImplementation.scala:
{code}
class MyImplementation extends MyInterface {
  def foo() { }
}
{code}
in 2.7.1 this works fine if I compile the interface with javac, then the class with scalac.  but with
the currently build (15478), if I pass both files to scalac:
{code}
~/scala/dists/latest/bin/scalac MyInterface.java MyImplementation.scala
{code}

I get:
{code}
MyImplementation.scala:2: error: error overriding method foo in trait MyInterface of type ()Unit;
 method foo needs `override' modifier
  def foo() { }
      ^
one error found
{code}

this seems like a regression to me. methods in Java interface are like abstract members of Scala traits,
and according to the SLS (section 5.1.4) "override" isn't required if the member being overridden is abstract.
