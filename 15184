With the following two Java source files compiled and on the classpath in binary form,

{code}
// JInterface.java
public interface JInterface {
  public Object foo(Class clazz);
}

// JClass.java
public class JClass implements JInterface {
  public Object foo(Class clazz) { return null; }
}
{code}

the following two Scala sources fail to compile,

{code}
// SClass.scala
class SClass(sc2 : SClass2) extends JClass {
  override def foo(clazz : Class[_]) : AnyRef = { sc2.foo(clazz) }
}

// SClass2.scala
class SClass2 extends JClass
{code}

with the following error,

{code}
src/SClass.scala:2: error: type mismatch;
 found   : Class[_$$1] where type _$$1
 required: java.lang.Class
  override def foo(clazz : Class[_]) : AnyRef = { sc2.foo(clazz) }
                                                          ^
one error found
{code}

If JClass.java is amended as follows,

{code}
public class JClass {
  public Object foo(Class clazz) { return null; }
}
{code}

(ie. removing "implements JInterface") the two Scala source files compile successfully.

I would expect that either both cases should succeed or both should fail.

Alternatively, leaving "implements JInterface" in place, but adding a type annotation in SClass.scala as so,

{code}
class SClass(sc2 : SClass2) extends JClass {
  override def foo(clazz : Class[_]) : AnyRef = { (sc2 : JInterface).foo(clazz) }
}
{code}

also allows the Scala sources to compile.

As an added twist, the refined build manager exhibits the following behaviour with the original Java and Scala (ie. the versions with "implements JInterface" and without the type annotation),

{code}
~/projects/eclipse/trunk-3.5/workspace/scala/dists/latest/bin/scalac -classpath ../bug-private-0009a/bin -Ybuilder-debug:refined

nsc> src/SClass.scala src/SClass2.scala
src/SClass.scala:2: error: type mismatch;
 found   : Class[_$$1] where type _$$1
 required: java.lang.Class
  override def foo(clazz : Class[_]) : AnyRef = { sc2.foo(clazz) }
                                                          ^

nsc> src/SClass.scala src/SClass2.scala

nsc> 
{code}

ie. first time around it fails in the same way as vanilla scalac, but the second time around it succeeds (in this case class files are generated).

As additional datapoints, this example was extracted from a larger instance in the Scala IDE, and in that case the Ant build (ie. vanilla scalac) succeeds, the presentation compiler always reports an error, and the build manager reports an error when building from clean, but then builds successfully on subsequent incremental builds.

Tested with r21371
