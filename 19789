```scala
object O {
  val o = new {
    trait A
    object CA extends Seq[A]
  }
  import o._

  val a: Seq[A] = CA
}
```

Inferred type:
```scala
// note the missing supertype for CA
private[this] val o: AnyRef{type A <: AnyRef; object CA} = {
```

work arounds: 
```scala
object O {
  val o = new Nested
  class Nested {
    trait A
    object CA extends Seq[A]
  }
  import o._

  val a: Seq[A] = CA
}
```
object O {
  object o {
    trait A
    object CA extends Seq[A]
  }
...
```scala

```
object O {
  val o = new {
    trait A
    lazy val CA = new Seq[A] {}
  }
...
{code}
