{code}
sealed trait Base
abstract class A extends Base with Product with Serializable
abstract class B extends Base with Product with Serializable
abstract class Test {
  def a: A
  def b: B
  def test = {
    if ("".isEmpty) a else None.getOrElse(b)
  }
}
{code}

When compiled under `-optimize`, the backend inlines `getOrElse`, but  leaves in the redundant cast:

{noformat}
      33: aload_0
      34: invokevirtual #39                 // Method b:()LB;
      37: checkcast     #41                 // class scala/Product
      40: areturn
{noformat}
