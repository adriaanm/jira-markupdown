In your usage example, the members of the `CaseEnum` are objects. If I change them to be case classes, I have to create instances of them first, before they are visible as members of the `CaseEnum`:
{code}
  val Colors = new CaseEnum {
    sealed abstract class Color extends Case
    case class Red extends Color
    case class Blue extends Color
    Red()
    Blue()
  }

  Colors.foreach {c=> println("Value "+c+" is mapped to "+Colors.cases(c))}
{code}
With objects this is not necessary, since you are referencing them using reflection in your for-comprehension.

Otherwise, I'll bring your `CaseEnum` up for discussion in the next Scala meeting.
