The logic for contains assumes step > 0.  The following version of contains seems to fix it.

Also, from code reading, the new Range.Inclusive uses Range contains so it doesn't think end is contained.
```scala
class Range2(i:int,j:int,step:int) extends Range(i,j,step) {
  override def contains(x: Int): Boolean = {
    if (step > 0) 
      x >= start && x < end && (((x - start) % step) == 0)
    else 
      x <= start && x > end && (((x - end) % step) == 0)
  }
}

object ContTest {
  def main(args: Array[String]) {
    val r = new Range(4,0,-1)
    var r2 = new Range2(4,0,-1)
    var r2f = new Range2(1,5,1)
    println((0 to 5).map(i => (i,r contains i)))
    println((0 to 5).map(i => (i,r2 contains i)))
    println((0 to 5).map(i => (i,r2f contains i)))
  }
}
```
