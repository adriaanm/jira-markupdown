All four cases look correct to me (even though the multitude of operators can be confusing).

Append an empty list as a new element to the end of b:

{code:scala}
b :+ List()   // List[List[Int]] = List(List(1), List(), List())
{code}

Prepend b as a new element to the front of List(1):

{code:scala}
b :: List(1)  //List(List(List(1), List()), 1)
{code}

Prepend b as a new element to an empty list, which is the same as wrapping it in a List() constructor:

{code:scala}
b :: List()  // List[List[List[Int]]] = List(List(List(1), List()))
{code}

The same using the generic collection operator instead of the  List-specific one:

{code:scala}
b +: List() // List[List[List[Int]]] = List(List(List(1), List()))
{code}
