```scala
class C {
  private val a = 0
  def getA = a
}

class D(c: C) {
  def a = c.getA
}

implicit def c2d(c: C): D = new D(c)

val c = new C
(c: D).a // works
c.a // error
```

leads to 
```scala
error: value a cannot be accessed in C
c.a
```

This is against encapsulation. Adding a private val to a class should not affect clients. The compiler should trigger the implicit instead of throwing an error.
