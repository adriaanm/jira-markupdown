HI All, The following code - 

{code}
#!scala
class A( var x : Int) {
  println( "x = " + x)
  x = 99
  println("x is now " + x)
}
{code}

produces the following output....

{code}
x=10 
x is now equal to 10 
{code}

I believe correct behaviour should be that the second println would read '99'.

A decompilation of the code produced shows this...

{code}
#!java
public class A
    implements ScalaObject
{
 
    public A(int x)
    {
        this.x = x;
        super();
        Predef$$.MODULE$$.println((new StringBuilder()).append("In A, x=").append(BoxesRunTime.boxToInteger(x)).toString());
        Predef$$.MODULE$$.println("Setting x to 99");
        x_$$eq(99);
        Predef$$.MODULE$$.println((new StringBuilder()).append("X is now ").append(BoxesRunTime.boxToInteger(x)).toString());
    }
 
    public void x_$$eq(int i)
    {
        x = i;
    }
 
    public int x()
    {
        return x;
    }
 
    private int x;
}
{code}

It looks like x is being shadowed by the constructor argument. Looks like x -> x() would have fixed the problem.

Am running JVM 1.6.0_13 against the Beta1 prerelease of 2.8, although in discussion it has been confirmed the same behaviour is in Beta2 and the 2.7



