I find myself doing something like this very frequently:

{code}
    m = m.update(k,f(m.getOrElse(k,d)))
{code}

where m is a Map, k is a key that may or may not be present in m, f is an update function to apply to the value for k (if present), and d is a default value for k (if not present).

On the assumption that I'm not the only one who does this, I'd like to suggest these additions to scala.collection.immutable.Map:

{code}
    def update[B1 >: B] (key: A) (f: (B) => B1): Map[A,B1] =
        update(key,f(apply(key)))

    def update[B1 >: B,B2 >: B1] (
            key: A, defaultVal: B1) (f: (B1) => B2): Map[A,B2] =
        update(key,f(getOrElse(key,defaultVal)))
{code}

which would allow me to replace the original expression with the more readable:

{code}
    m = m.update(k,d)(f _)
{code}

Analogous methods in scala.collection.mutable.Map would be helpful, too.
