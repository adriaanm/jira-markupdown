I think that you're correct about the motivation, but I think that there's plenty going on with the collections that will developers to change code.  I think asking them to make all of the changes now (when they know they're going to have to take a look at their collections usage) is better than essentially **suggesting** a change now (by deprecating the method but keeping the behavior) and then requiring a change later, because with the latter approach, developers who write new code to the 2.8 API now will **also** have to make a change later (when presumably "valuesIterable" will be deprecated and they'll be asked to use "values").
