Hi [~retronym], [~asloane]. The failing file is {{library/src/org/kiama/example/lambda2/LambdaTests.scala}}. As a reduced version, replace the content of the file by the follwing, it triggers the same error.

{code}
package org.kiama
package example.lambda2

import org.kiama.util.RegexParserTests
import scala.language.experimental.macros

class LambdaTests {
    import org.kiama.rewriting.Strategy
    def rule[T] (f : PartialFunction[T, T]) : Strategy = ???
    case class Var(x: Int)
    def canon = {
        def canons: Strategy = rule[Var] { case Var (n) => Var (n) } + canons
    }
}
{code}

The fishy thing is that {{Strategy.+}} is a macro, and I could not reproduce the failure without the macro call. So it's possible that the assertion doesn't fail on compiler-generated code.

However, the implementation of {{isDelambdafyFunction}} (as well as {{isAnonymousFunction}}) is not robust at all against false positives:
{code}
    final def isAnonymousFunction = isSynthetic && (name containsName tpnme.ANON_FUN_NAME)
    final def isDelambdafyFunction = isSynthetic && (name containsName tpnme.DELAMBDAFY_LAMBDA_CLASS_NAME)
{code}

So an {{assert(!sym.isDelambdafyFunction)}} is unsafe. I think for now we should just remove the assertion, longer term there should be a better implementation of the above.
