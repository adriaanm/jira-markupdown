> > From a user's point of view, I would say plain enumeration of ranges would be fine as a start ...
> 
> You can get an `iterator` for the `SerotedSet`, on which you can apply `dropWhile` and `takeWhile`, which would result in the same effect. For instance:
> 
> {code}
> import scala.collection.immutable.SortedSet
> 
> def SortedSetRangeIterator[A](set: SortedSet[A], from: A, until: A)(implicit ord: Ordering[A]) = {
>   import ord._
>   set.iterator.dropWhile(_ < from).takeWhile(_ < until)
> }
> }}
> 

Err, I wanted to exploit the tree structure, navigating quickly to the starting point and then continuing from there in a linear fashion.  The `dropWhile` above incurs a linear penalty in the start, right?
