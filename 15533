hi,

i tried to extract an intricate error with collections in scala 2.8.0 final. i stripped the prerequisites down to:
```scala
import collection.immutable.{IndexedSeq=>IIdxSeq}
trait GE { def outputs: IIdxSeq[ UGenIn ]}
trait UGenIn extends GE { final def outputs = Vector( this )}
case class UGenInSeq( outputs: IIdxSeq[ UGenIn ]) extends GE
implicit def seqOfGEToGE( x: Seq[ GE ]) = new UGenInSeq( x.flatMap( _.outputs )( collection.breakOut ))

case object Test extends UGenIn
case class UGenOutProxy( rate: Int, idx: Int ) extends UGenIn

abstract class MultiOutUGen( rates: IIdxSeq[ Int ], val inputs: Seq[ UGenIn ]) extends GE {
    def this( rate: Int, numOutputs: Int, inputs: Seq[ UGenIn ]) = this( Vector.fill( numOutputs )( rate ), inputs )
    def outputs: IIdxSeq[ UGenIn ] = rates.zipWithIndex.map( tup =>
        UGenOutProxy( tup._1, tup._2 )
    )
}

case class GVerb( egal: UGenIn ) extends MultiOutUGen( 0, 2, List( egal ))

def mix( flt: GE) {}
def graph( in: GE ) {
    val ins = in.outputs
    val numChannels = ins.size
    val verbs: GE = (ins :+ ins.last).grouped(2).toSeq.flatMap( pair =>
        GVerb( pair.first ).outputs
    )
    val flt = verbs.outputs.take( numChannels )
    mix( flt )
}
```

now if you run this line:
```scala
graph( GVerb( Test ))
```

you get a runtime ClassCastException :
```scala
java.lang.ClassCastException: scala.collection.immutable.Stream$$Cons cannot be cast to scala.collection.immutable.IndexedSeq
	at .seqOfGEToGE(<console>:32)
	at .graph(<console>:53)
	at .<init>(<console>:43)
	at .<clinit>(<console>)
	at RequestResult$$.<init>(<console>:9)
	at RequestResult$$.<clinit>(<console>)
	at RequestResult$$scala_repl_result(<console>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at scala.tools.nsc.Interpreter$$Request$$$$anonfun$$loadAndRun$$1$$$$anonfun$$apply$$18.apply(Interpreter.scala:981)
	at scala.tools.nsc.Interpreter$$Request$$$$a...
```
