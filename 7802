A variation on the theme:

{code}

class testS {
  null match {
    case _ => ""
  }

  try {
    ""
  } finally {
    val x = null match {
      case _ => ""
    }
    ()
  }
}

        class testS extends Object {
          def <init>(): testS = {
            testS.super.<init>();
            {
              case <synthetic> val x1: Null = null;
              case3(){
                matchEnd2("")
              };
              matchEnd2(x: String){
                x
              }
            };
            try {
              ""
            } finally {
              val x: String = {
                case <synthetic> val x1: Null = null;
                case3(){
                  matchEnd2("")
                };
                matchEnd2(x: String){
                  x
                }
              };
              ()
            };
            ()
          }
        };


  Code:
   Stack=2, Locals=7, Args_size=1
   0:	aload_0
   1:	invokespecial	#10; //Method java/lang/Object."<init>":()V
   4:	aconst_null
   5:	astore_1
   6:	ldc	#12; //String 
   8:	astore_2
   9:	aload_2
   10:	pop
   11:	ldc	#12; //String 
   13:	aconst_null
   14:	astore	6
   16:	ldc	#12; //String 
   18:	astore_3
   19:	goto	30
   22:	astore	4
   24:	aconst_null
   25:	astore	6
   27:	ldc	#12; //String 
   29:	astore_3
   30:	aload_3
   31:	astore	5
   33:	aload	4
   35:	athrow
  Exception table:
   from   to  target type
    11    13    22   any


{code}


{noformat}
java.lang.VerifyError: (class: testS, method: <init> signature: ()V) Inconsistent stack height 0 != 1
	at .<init>(<console>:9)
java.lang.VerifyError: (class: testS, method: <init> signature: ()V) Inconsistent stack height 0 != 1
{noformat}
