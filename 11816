Here's a pared down version of your test case that exhibits the `IllegalAccessError` rather than a `VerifyError`.
```scala
import java.util.PrimitiveIterator
import java.util.function.Consumer

class Bar {
  def pi: PrimitiveIterator.OfLong = new PrimitiveIterator.OfLong {
    // Adding override modifier offers: "method forEachRemaining overrides nothing"
    // The compiler should disallow this under the "double definition after erasure" rule.
    def forEachRemaining(c: Consumer[_ >: scala.Long]) { ??? }

    def hasNext: Boolean = false
    def nextLong: Long = ???
  }
}

object Test {
  def main(args: Array[String]): Unit = {
    val consumer: Consumer[java.lang.Long] = null
    new Bar().pi.forEachRemaining(consumer) // IllegalAccessError: Bar$$anon$1.forEachRemaining(Ljava/util/function/Consumer;)V
  }
}
```
