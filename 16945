```java
Welcome to Scala version 2.10.0-20120425-011349-e3634d0ae0 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_04).
Type in expressions to have them evaluated.
Type :help for more information.

scala> trait X
defined trait X

scala> type myx = Int with X
defined type alias myx

scala> val one = 1.asInstanceOf[myx]
one: myx = 1

scala> one match { case `one` => println("hurray") }
<console>:12: error: ambiguous reference to overloaded definition,
both method == in class Object of type (x$1: AnyRef)Boolean
and  method == in class Int of type (x: Double)Boolean
match argument types (myx) and expected result type Boolean
              b match { case `one` => println("hurray") }
                             ^
error: type mismatch;
 found   : Double
 required: AnyRef
Note: an implicit exists from scala.Double => java.lang.Double, but
methods inherited from Object are rendered ambiguous.  This is to avoid
a blanket implicit which would convert any scala.Double to any AnyRef.
You may wish to use a type ascription: `x: java.lang.Double`.
```
