See attached file.

1. With lines 19 and 27 commented out, the file compiles just fine.

2. When method foo(String)(String) is overridden in class FooImpl (uncommenting line 15), I get the compiler error:
```
PossibleBugTest.scala:22: error: ambiguous reference to overloaded definition,
both method foo in class FooImpl of type (s: String)(bar: String)String
and  method foo in class FooImpl of type (s: String)String
match argument types (String)
    assertThat(fooImpl.foo("foo"), is("foo"))
```

3. When line 23 is uncommented (line 15 commented out again), I get the really strange compiler error:
```
PossibleBugTest.scala:23: error: type mismatch;
 found   : String("bar")
 required: Int
    assertThat(fooImpl.foo("foo")("bar"), is("foobar"))
                                  ^
```

4. With lines 15 and 23 uncommented but line 22 commented out, I also get the "ambiguous reference" error.

5. Adding an override modifier in line 14 also issues a compiler error (clearly, foo(String)String does not override foo(String)(String)String)

I would expect the "ambiguous reference" error from (2) also in case (1) since FooImpl clearly inherits method foo(String(String)String from Foo.
In case (4), on the other hand, the error comes unexpected since I supply both arguments, which should rule out foo(String)String).
The error in case (3) is really strange, why does the compiler come up with an Int here?

Note that even with the overriding problem left out, I did not find a way (even with extensive type hinting) to make foo(String)(String)String work as long as there is an overloaded foo(String)String present. Shouldn't this kind of overloading of curried methods be forbidden in the first place?

I am using Scala 2.11 via the Maven compiler plugin with scala-library 2.11.1. I have not verified this behavior with other versions of scala.
