I'm having a look, but in the meantime -- work around, don't make the compiler invent an existential for the `Foo` created by `Foo.foo("foo")`:
```scala
trait Foo {
 val name : String
 trait Bar {
   def doSomething : String
   override def toString = "Foo(" + name + ").Bar -> " + doSomething
 }
 object Bar {
   implicit def fromFunction(func : Function0[String]) = new Bar {
     def doSomething = func()
   }
 }
 def andThen(b : Bar) = b
}

object Foo {
  def foo(n : String) = new Foo {
    override val name = n
  }
}

object Test {
   val f = Foo.foo("foo") 
   f andThen (() => "Bar")
}
```
