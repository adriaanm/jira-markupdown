In scala.util.parsing.combinator.RegexParsers when a failure is produced by a literal parser, a message is produced of the form:

{code}
`foo' expected but `c' found
{code}

where c is the character given by in.first, i.e., the character at the position at which the parser started parsing. 

In most cases for whitepsace-handling parsers the message you get is

{code}
`foo' expected but ` ' found
{code}

or 

{code}
`foo' expected but `
' found
{code}

because the first thing the literal parser usually does is skip whitespace.

To improve the utility of these messages, I suggest changing the character that is printed from in.first to source.charAt(start).  I.e., print the first non-whitespace character that was encountered. The reasoning is that although printing a whitespace character is more accurate, it tells you nothing about what actually caused the parse to fail. Given that the parser is skipping whitespace, there should be little surprise when the error messages act as if the whitespace was not there, particularly since the `foo' part of the message makes no mention of the allowable whitespace.

In the case where the parser is not skipping whitespace, then in.first and source.charAt(start) will be the same, so if whitespace is significant it will be reported in the messages.

The same situation exists in the regex method and the proposed solution should work there too.

I've attached a small program that illustrates the effect of the change.
