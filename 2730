I wouldn't mind a crack at implementing this. Something like:

{code}
trait Complex[S] extends Numeric[Complex[S]] {
  def toPolar: PolarComplex[S]
  def toCartesian: Cartesian[S]
}

trait CartesianComplex[S] extends Complex[S] {
  val r: S
  val i: S
}

trait PolarComplex[S] extends Complex[S] {
  val r: S
  val theta: S
}

object Complex {
  def polar[S](r: S, theta: S) = ...
  def cartesian(r: S, i: S) = ...
}
{code}

Is this the sort of API you where thinking of?
