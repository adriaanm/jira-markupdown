I'm not sure yet why Redblack$$Empty is the only class I've seen this with (it's not the only case object nested in an abstract class by any means) but no inner class entry is generated for it, with the following among the consequences:
```scala
scala> classOf[scala.collection.immutable.RedBlack[_]].getMethod("Empty").getGenericReturnType
java.lang.TypeNotPresentException: Type scala.collection.immutable.RedBlack$$Empty not present
	at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:98)
	at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:129)
	at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:31)
	at sun.reflect.generics.repository.MethodRepository.getReturnType(MethodRepository.java:50)
```
Here are the inner classes:
```scala
public abstract SI-113= SI-91 of SI-11; //Tree=class scala/collection/immutable/RedBlack$$Tree of class scala/collection/immutable/RedBlack
public SI-27= SI-59 of SI-11; //RedTree=class scala/collection/immutable/RedBlack$$RedTree of class scala/collection/immutable/RedBlack
public abstract SI-116= SI-115 of SI-11; //NonEmpty=class scala/collection/immutable/RedBlack$$NonEmpty of class scala/collection/immutable/RedBlack
public SI-36= SI-54 of SI-11; //BlackTree=class scala/collection/immutable/RedBlack$$BlackTree of class scala/collection/immutable/RedBlack
```
