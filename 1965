This is not a duplicate of 2050:

- 2050 is for an incorrect error message when constructor parameters are omitted.

- This bug is that default parameters are not allowed for anonymous subclasses (though named parameters are despite what the error message says)

Why is this important:

A really useful way of specializing a class in scala is anonymous subclasses:  For example you might have a Button class, and at instantiation time you might specialize it by overriding various methods/properties etc.

But for many simple use cases this can feel a bit heavyweight.  Named parameters work really nicely for these cases - for example the label and onclick handler for a button might work nicely as named parameters, while more sophisticated customization would be done by adding a class body (or a with clause etc) (ie. an anonymous subclass).

Some examples that all work well:

new Button (name="Click Me")

new Button (name="Click Me") with RoundedCorners

new Button (name="Click Me") { override val style = Alarming }

However, if the name constructor parameter is a optional (default) parameter), the first case will continue to work and the final two will give the error.

This is not only useful - I believe it is the correct way the language should work:

- It is true that an anon subclass is generated in these cases, but in almost all respects anon subclasses are defined by scala to work identically to a normal instantiation - this case is pretty much the only exception.

Futhermore, one of the things that makes me giggle most often (with delight) as a scala user is that you can just combine the language features in interesting ways (that should work according the the language spec).  With experience from lots of other languages I always expect to be told "NO" as soon as I leave the beaten path, but scala has consistently surprised me by getting these cases right.

(Not that it matters, but the particular use case I am working on in a embedded DSL, which is one of those cases that can make you extra fussy ...)

- Thanks

David Ziegler


   

