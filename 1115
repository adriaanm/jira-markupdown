I tried to create a script with the following:
```scala
def timeit(f : () => Unit) {
    val t1 = System.currentTimeMillis()
    f()
    val t2 = System.currentTimeMillis()

    println(t2-t1)
}    

def repeat(n : Int, f : Int => Unit) : Unit = {
    var i = 0
    while (i<n) {
        f(i)
        i += 1
    }
}

def test0() {
    var i = 0
    var sum = 0
    while (i < 1000000000) {
        sum += i
        i += 1
    }
    println(sum)
}

def test1() {
    var sum = 0
    repeat(1000000000, i => {
        sum += i
    })
    println(sum)
}

def test2() {
    var sum = 0
    for(i <- 0 until 1000000000) {
        sum += i
    }
    println(sum)
}

timeit(test0)
timeit(test1)
timeit(test2)
```

Result is:
```scala
-1243309312
467
-1243309312
504
-1243309312
11899
```

May be this 'repeat' is a workaround? Warning: works only with 'scala -optimise'. This is not very stable, sometimes some seemingly minor modifications, i.e. moving the code outside of the function, break it and I get 12000 for 'repeat'.
