If an exception propagates through a call to a method on an object with a
structural declaration, then a `java.lang.reflect.InvocationTargetException` is
thrown. Or, in other words:

 1. receive an object as a parameter with a structural declaration
 2. call method on that object
 3. that method throws an exception
 4. `java.lang.reflect.InvocationTargetException` is then thrown (which should not have happened)

example code (a complete program):

{code}
object Problem1
{
   // class to be used through structural declaration type
   class Class1( a:Boolean )
   {
      // method that might throw some exception
      def method1 = if( !a ) "ok" else "div by zero exception: " + (1/0)   // 7
   }

   // use of class through structural declaration
   def method2( sdo:{def method1:String} ) =
   {
      // fails if exception thrown (throws
      // java.lang.reflect.InvocationTargetException)
      sdo.method1                                                          // 15

      // (works)
      //sdo.asInstanceOf[Class1].method1
   }

   // with no commandline args: should produce "ok"
   // with >0 commandline args: should produce ArithmeticException
   def main( args:Array[String] )
   {
      val c1o = new Class1( !args.isEmpty )

      println( method2(c1o) )                                              // 27
   }
}
{code}

stack trace:

{code}
java.lang.reflect.InvocationTargetException
   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
   at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
   at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
   at java.lang.reflect.Method.invoke(Unknown Source)
   at Problem1$$.method2(Problem1.scala:15)
   at Problem1$$.main(Problem1.scala:27)
   at Problem1.main(Problem1.scala)
   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
   at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
   at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
   at java.lang.reflect.Method.invoke(Unknown Source)
   at scala.tools.nsc.ObjectRunner$$$$anonfun$$run$$1.apply(ObjectRunner.scala:75)
   at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
   at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
   at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:161)
   at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.ArithmeticException: / by zero
   at Problem1$$Class1.method1(Problem1.scala:7)
   ... 16 more
{code}

(using Scala 2.6.1-final with Java SE 1.5.0_11 on Windows2000)
