Specialized methods called with an explicit (specialized) type argument invokes a generic erased variant instead of the specialized one when the method is overloaded

{code:scala}    
	class Spec[@specialized(Int) A](as :Seq[A]) {
		def head :A = as.head
	}




	object Specialized {
		def apply[@specialized(Int) A](as :A*) :Spec[A] = new Spec(as)

		//second apply method (unused in this example)
		def apply[@specialized(Int) A](spec :Spec[A]) :A = spec.head

		def wrap[@specialized(Int) A](as :Seq[A]) :Spec[A] = new Spec(as)

		//second wrap method (unused in this example)
		def wrap[@specialized(Int) A](spec :Spec[A]) :A = spec.head
	}


	val notSpecialized = Specialized[Int]()
	val specialized = Specialized(Seq[Int]():_*) //works
	val specializedToo :Spec[Int] = Specialized() //works

	val notSpecializedEither = Specialized.wrap[Int](Seq())
	val okSpecialized = Specialized.wrap(Seq[Int]())

	def show(a :AnyRef) = println(a.getClass.getName) 

	Seq(notSpecialized, specialized, specializedToo, notSpecializedEither, okSpecialized).foreach(show)
{code}

{{notSpecialized}} and {{notSpecializedEither}} return generic erased versions of {{Spec}} instead of the {{Int}} specialization.
