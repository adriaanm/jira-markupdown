Good catch.

Seems like every call to `Symbol#isPrivate` represents a potential bug:

{code}
scala> object O { trait T { private[O] def foo = 0 } }
defined module O

scala> val foo = typeOf[O.T].member(newTermName("foo"))
foo: $r.intp.global.Symbol = method foo

scala> foo.isPrivate
res0: Boolean = false

scala> foo.privateWithin
res1: $r.intp.global.Symbol = object O
{code}

{code}
// RefChecks
if (member.isPrivate) // (1.1)
            overrideError("has weaker access privileges; it should not be private")
          member.privateWithin
{code}
