It is coming from `GenTraversableLike`.
```scala
*  @usecase def ++[B](that: GenTraversableOnce[B]): $Coll[B]
   *    @inheritdoc
   *
   *    Example:
   *    {{{
   *      scala> val a = List(1)
   *      a: List[Int] = List(1)
   *
   *      scala> val b = List(2)
   *      b: List[Int] = List(2)
   *
   *      scala> val c = a ++ b
   *      c: List[Int] = List(1, 2)
   *
   *      scala> val d = List('a')
   *      d: List[Char] = List(a)
   *
   *      scala> val e = c ++ d
   *      e: List[AnyVal] = List(1, 2, a)
   *    }}}
   *
   *    @return       a new $coll which contains all elements of this $coll
   *                  followed by all elements of `that`.
   */
  def ++[B >: A, That](that: GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That
```

and there a a lot more `subclasses` for this class
```scala
Known Subclasses
::, AbstractBuffer, AbstractIterable, AbstractIterable, AbstractMap, AbstractMap, AbstractMap, AbstractSeq, AbstractSeq, AbstractSet, AbstractSet, AbstractTraversable, AnyRefMap, Appended, Appended, Appended, Appended, ArrayBuffer, ArrayLike, ArrayOps, ArraySeq, ArrayStack, BitSet, BitSet, BitSet, BitSet1, BitSet2, BitSetLike, BitSetN, Buffer, BufferLike, BufferProxy, Cons, DefaultKeySet, DefaultKeySet, DefaultKeySet, DefaultKeySortedSet, DefaultKeySortedSet, DefaultMap, DefaultMap, DefaultMapModel, DefaultValuesIterable, DefaultValuesIterable, DoubleLinkedList, DoubleLinkedListLike, DroppedWhile, DroppedWhile, DroppedWhile, DroppedWhile, DroppedWhile, Empty, EmptyView, EmptyView, EmptyView, EmptyView, Exclusive, Filtered, Filtered, Filtered, Filtered, Filtered, FilteredKeys, FilteredKeys, FlatMapped, FlatMapped, FlatMapped, FlatMapped, Forced, Forced, Forced, Forced, GenIterable, GenIterableLike, GenMap, GenMapLike, GenSeq, GenSeqLike, GenSet, GenSetLike, GenTraversable, HashMap, HashMap, HashMap1, HashSet, HashSet, HashTrieMap, HashTrieSet, History, ImmutableDefaultKeySet, ImmutableMapAdaptor, ImmutableSetAdaptor, Impl, Inclusive, Inclusive, IndexedSeq, IndexedSeq, IndexedSeq, IndexedSeqLike, IndexedSeqLike, IndexedSeqOptimized, IndexedSeqOptimized, IndexedSeqView, IntMap, Iterable, Iterable, Iterable, IterableForwarder, IterableLike, IterableProxy, IterableProxyLike, IterableView, IterableViewLike, LinearSeq, LinearSeq, LinearSeq, LinearSeqLike, LinearSeqOptimized, LinkedHashMap, LinkedHashSet, LinkedList, LinkedListLike, List, ListBuffer, ListMap, ListMap, ListSet, LongMap, LongMap, Map, Map, Map, Map, Map1, Map2, Map3, Map4, MapLike, MapLike, MapLike, MapProxy, MapProxy, MapProxy, MapProxyLike, Mapped, Mapped, Mapped, Mapped, MappedValues, MappedValues, MultiMap, MutableList, Nil, Node, Node, NumericRange, ObservableBuffer, ObservableMap, ObservableSet, OpenHashMap, PagedSeq, ParArray, ParHashMap, ParHashMap, ParHashSet, ParHashSet, ParIterable, ParIterable, ParIterable, ParIterableLike, ParMap, ParMap, ParMap, ParMapLike, ParMapLike, ParRange, ParSeq, ParSeq, ParSeq, ParSeqLike, ParSet, ParSet, ParSet, ParSetLike, ParSetLike, ParTrieMap, ParVector, Patched, Patched, Prepended, Prepended, PriorityQueue, PriorityQueueProxy, Queue, Queue, QueueProxy, Range, ResizableArray, Reversed, Reversed, Reversed, RevertibleHistory, Script, Seq, Seq, Seq, SeqForwarder, SeqLike, SeqLike, SeqProxy, SeqProxyLike, SeqView, SeqViewLike, Set, Set, Set, Set1, Set2, Set3, Set4, SetLike, SetLike, SetProxy, SetProxy, SetProxy, SetProxyLike, Sliced, Sliced, Sliced, Sliced, Sliced, SortedMap, SortedMap, SortedMapLike, SortedSet, SortedSet, SortedSet, SortedSetLike, Stack, Stack, StackProxy, Stream, StreamView, StreamViewLike, StringBuilder, StringLike, StringOps, SynchronizedBuffer, SynchronizedMap, SynchronizedPriorityQueue, SynchronizedQueue, SynchronizedSet, SynchronizedStack, SystemProperties, TakenWhile, TakenWhile, TakenWhile, TakenWhile, TakenWhile, Transformed, Transformed, Transformed, Transformed, Transformed, Traversable, Traversable, Traversable, TraversableForwarder, TraversableLike, TraversableProxy, TraversableProxyLike, TraversableView, TraversableViewLike, TreeMap, TreeSet, TreeSet, TrieMap, UnrolledBuffer, ValueSet, Vector, WithDefault, WithDefault, WithDefault, WithDefault, WithDefault, WithDefault, WrappedArray, WrappedString, Zipped, Zipped, Zipped, ZippedAll, ZippedAll, ZippedAll, ofBoolean, ofBoolean, ofByte, ofByte, ofChar, ofChar, ofDouble, ofDouble, ofFloat, ofFloat, ofInt, ofInt, ofLong, ofLong, ofRef, ofRef, ofShort, ofShort, ofUnit, ofUnit
```

Would we have to fix all of them? or do we need to stop `@inheritdoc` the use-case (which may not be very useful)

Ideas?
