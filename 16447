With the recent addition of easy fsc support to intellij I tried to switch over and ran into a blocking issue. I am using the org.scala-lang:scala-compiler-bundle:2.9.0-1 compiler bundle for both regular compilation and fsc. The project compiles correctly in regular IDEA and under maven.  I'm posting here as a first step, if this has been fixed already in 2.9.1 or its an intellij problem I apologize but I couldn't find a similar ticket. What is the technical name for "type aliasing" that wasn't immediately obvious. 

When switching to fsc I get compilation errors telling me I have non-matching types when I have used "type aliases" in function signatures. It appears that the fsc compiler is not doing the appropriate type lookup to tell what the actual type referenced by the "type alias" is and doing a direct comparison check. This appears to happen within a single module or across modules. 


Example (not-compiled):

object MeasSink{
  type Meas = org.totalgrid.reef.proto.Measurements.Measurement
}
import MeasSink._

trait MeasSink {
  def set(meas : Seq[Meas]): Unit
}

object Elsewhere{
  def test(measSink : MeasSink){
    val list = List.empty[org.totalgrid.reef.proto.Measurements.Measurement]
    measSink.set(list)
  }
}

Leads to this error:

error: type mismatch;
found   : List[org.totalgrid.reef.proto.Measurements.Measurement]
required: Seq[org.totalgrid.reef.measurementstore.MeasSink.Meas]
measSink.set(list)

