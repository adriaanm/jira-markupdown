Create the following files:

{code:title=p/A.java}
package p;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME)
public @interface A {
    Class<?> subInterface();
}
{code}

{code:title=p/T.scala}
package p

@A(subInterface = classOf[T.S])
trait T {
}

object T {
  private[p] trait S extends T { }
}
{code}

{code:title=p/Foo.scala}
package p

object Foo {
  def bar(t: T) { }
}
{code}

Now compile them, in order, one at a time.

{noformat}
javac p/A.java
scalac p/T.scala
scalac p/Foo.scala
{noformat}

The last command should give you an internal error.

{noformat}
error: error while loading T, illegal class file dependency between 'object T' and 'class T'
warning: Caught: java.lang.AssertionError: assertion failed:
     while compiling: p\Foo.scala
        during phase: global=typer, atPhase=namer
     library version: version 2.10.1
    compiler version: version 2.10.1
  reconstructed args:

  last tree to typer: Ident(T)
              symbol: <none> (flags: )
   symbol definition: <none>
       symbol owners:
      context owners: value t -> method bar -> object Foo -> package p

== Enclosing template or block ==

DefDef( // def bar: <?> in object Foo
  <method> <locked>
  "bar"
  []
  // 1 parameter list
  ValDef( // t: <?>
    <param> <locked>
    "t"
    "T"
    <empty>
  )
  "scala"."Unit" // final abstract class Unit extends AnyVal in package scala, tree.tpe=Unit
  ()
)

(p.T$S,p.T,S,class T in package p) /  while parsing (.\p\T.class,Some(class T))class T.S linkedModule: object TScope{

} while parsing annotations in .\p\T.class
one warning found
one error found
{noformat}
