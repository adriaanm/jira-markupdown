The following demonstrates expected and allowable behavior of the Scala compiler:

{code}
import java.io._

class MyClass(privateField: String) {
  lazy val lazyField = privateField
}

object MyClass {
  def main(args: Array[String]) {
    val instance = new MyClass("test")
    val privateField = classOf[MyClass].getDeclaredField("privateField")
    privateField.setAccessible(true)

    println("Path string: " + privateField.get(instance))
    // Prints "test"

    instance.lazyField

    println("Path string: " + privateField.get(instance))
    // Prints null
  }
}
{code}

The Scala compiler explicitly generates bytecode which sets privateField to null after initializing the lazy val because it knows that no one has access to privateField after this point. This is unintuitive, but doesn't actually violate correctness.

The problem comes in when the lazy val is marked @transient, because then the lazy val may be recomputed later and require the field value to exist. Intuitively, the following should work:

{code}
class MyClass(pathString: String) extends Serialized {
  @transient lazy val path: Path = new Path(pathString)
}
{code}

However, if we have the following access pattern:

{code}
val instance0 = new MyClass("/hello")
println("instance0 path = " + instance0.path)
val instance1 = serializeAndDeserialize(instance0)
println("instance1 path = " + instance1.path) // NullPointerException thrown
{code}

This is because pathString was set to null after the first lazy val access, and thus was serialized as null. When the val was recomputed after deserialization, it naturally failed.

This issue has the simple workaround of labeling the parameter "private val", but the behavior does not seem correct.
