object Int's unbox(Object) is used by Erasure:

  https://github.com/scala/scala/blob/master/src/reflect/scala/reflect/internal/Definitions.scala#L101

  https://github.com/scala/scala/blob/master/src/compiler/scala/tools/nsc/transform/Erasure.scala#L657

and it's also used in other places via `definitions.isUnbox`

One of those usages reads:

{noformat}
          /** Can't always remove a Box(Unbox(x)) combination because the process of boxing x
           *  may lead to throwing an exception.
           *
           *  This is important for specialization: calls to the super constructor should not box/unbox specialized
           *  fields (see TupleX). (ID)
           */
          case Apply(boxFun, List(arg)) if isUnbox(tree.symbol) && safeToRemoveUnbox(arg.tpe.typeSymbol) =>
{noformat}


Therefore, changing object Int's unbox(Object) is "non trivial".

