Consider this example:
```scala
class MyContext
class MyContainer[T]
class MyBase[T](self: T)(implicit ctx: MyContext)
implicit class MyConversion[T](self: MyContainer[T])(implicit ctx: MyContext)
  extends MyBase(1)
```

It fails:
```
error: illegal cyclic reference involving class MyConversion
       implicit class MyConversion[T](self: MyContainer[T])(implicit ctx: MyContext)
                      ^
```

I don't think there is anything cyclic or illegal here.

`MyContainer` is not necessary to trigger the problem, it's just to make the example more realistic. The same happens with `implicit class MyConversion[T](self: T)`. The type parameters ({{T}}) and the implicit parameter ({{ctx}}) seem necessary to trigger the problem. Removing them causes the code to compile without errors.

I found two workarounds, both seem entirely arbitrary to me. One solution is to change `extends MyBase(1)` to `extends MyBase[Int](1)`. The other is to change it to `extends MyBase(1)(ctx)`.

scala/bug#1127 describes a similar issue which was fixed in 2011.
