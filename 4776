In case anyone can tell me what I'm doing wrong or whether this indicates that the suggested approach does not work, here is what I added to collection.MapLike without seeing any change in the generated documentation.
{code}
  
  /** Builds a new collection by applying a function to all elements of this $$coll.
   *
   *  @param f      the function to apply to each element.
   *  @tparam C     the element type of the returned collection.
   *  @tparam That  $$thatinfo
   *  @param bf     $$bfinfo
   *  @return       a new collection of type `That` resulting from applying the given function
   *                `f` to each element of this $$coll and collecting the results.
   *
   *  @usecase  def map[C, That](f: ((A, B)) => C): That
   *  
   *  @return       a new $$coll resulting from applying the given function
   *                `f` to each element of this $$coll and collecting the results.
   */
  def map[C, That](f: ((A, B)) => C)(implicit bf: CanBuildFrom[This, C, That]): That
{code}
