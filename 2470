https://groups.google.com/d/topic/scala-internals/D6LoxxxRbAA/discussion

{code}
scala> object O
defined module O

scala> def impl[T: c.WeakTypeTag](c: Context): c.Expr[Class[_]] = {import c.universe._; c.Expr[Class[_]](Literal(Constant(weakTypeOf[T])))}
impl: [T](c: scala.reflect.macros.Context)(implicit evidence$1: c.WeakTypeTag[T])c.Expr[Class[_]]

scala> def moduleClassOf[T <: Singleton]: Class[_] = macro impl[T]
moduleClassOf: [T <: Singleton]=> Class[_]

scala> moduleClassOf[O.type]
res5: Class[O.type] = class O$
{code}
