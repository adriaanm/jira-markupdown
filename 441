The problem is not the singleton type, the problem seems to be more the anonymous class. From the stacktrace (-Ydebug)

{code}
....
transforming patmat with tidmark tidmark1 ncases = 2
****
**** initalize, selector = other selector.tpe = scala.this.Any
****    doCheckExhaustive == true
Ident(_)|EmptyTree
finished: result List(Row(List((that @ (_: template $$anon))),.,<empty>,0))
Ident(_)|EmptyTree
finished: result List(Row(List(_),.,<empty>,1))
finished: result List(Row(List(),.,<empty>,0))
finished: result List(Row(List(),.,<empty>,1))

---
mixture rule is = class scala.tools.nsc.matching.ParallelMatching$$MixTypes
finished: result List(Row(List(),Binding(value that,variable temp2,.),<empty>,0))
finished: result List(Row(List(),.,<empty>,1))
Ident(_)|EmptyTree
finished: result List(Row(List(_),.,<empty>,1))
java.lang.Error: no-symbol does not have owner
        at scala.tools.nsc.symtab.Symbols$$NoSymbol$$.owner(Symbols.scala:1565)
...
exception when transforming override <method> def equals(other: scala.this.Any): scala.this.Boolean = other match {
  case (that @ (_: template $$anon)) => true
  case _ => false
}
{code}

What sense can I make out of this AST, if its type is "template anon", I am not going to be able to create an instanceof check out of it.

I think the semantics of self.type for an anonymous class are not covered by the spec (when it was written, such modern stuff didn't yet exist in any case :-).

It raises interesting possibilities of anonymous-class-self-type-tests to be used for dynamic structural subtype-checking, but the margin of this bug report comment is too small to fit in the proof that it all works out.
