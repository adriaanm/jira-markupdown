{noformat}
scala> gen.mkAttributedRef(predef.owner.thisType,predef)
res4: $r.intp.global.gen.global.RefTree = scala.this.Predef
{noformat}

One glaring example of this odd choice is in root imports, rather than `import scala.Predef._`, we actually have `import scala.this.Predef._`. This leaks into the trees based on this import:

{noformat}
%  scalac -Xprint:typer sandbox/foo.scala
[[syntax trees at end of                     typer]] // foo.scala
package <empty> {
  class C extends scala.AnyRef {
    def <init>(): C = {
      C.super.<init>();
      ()
    };
    def x: Int = 0;
    def test: Int = scala.this.Predef.identity[Int](1)
  }
}
{noformat}

With this patch:

{noformat}
~/code/scala on topic/completely-2.11*
âš¡ git diff head
diff --git a/src/reflect/scala/reflect/internal/TreeGen.scala b/src/reflect/scala/reflect/internal/TreeGen.scala
index 201b727..9bb4fc0 100644
--- a/src/reflect/scala/reflect/internal/TreeGen.scala
+++ b/src/reflect/scala/reflect/internal/TreeGen.scala
@@ -129,7 +129,8 @@ abstract class TreeGen {

   /** Builds a reference to given symbol. */
   def mkAttributedRef(sym: Symbol): RefTree =
-    if (sym.owner.isClass) mkAttributedRef(sym.owner.thisType, sym)
+    if (sym.owner.hasPackageFlag) mkAttributedRef(sym.owner.typeOfThis, sym)
+    else if (sym.owner.isClass) mkAttributedRef(sym.owner.thisType, sym)
     else mkAttributedIdent(sym)

   def mkUnattributedRef(sym: Symbol): RefTree = mkUnattributedRef(sym.fullNameAsName('.'))
{noformat}

We get:

{noformat}
% qscalac -Xprint:typer sandbox/foo.scala
[[syntax trees at end of                     typer]] // foo.scala
package <empty> {
  class C extends scala.AnyRef {
    def <init>(): C = {
      C.super.<init>();
      ()
    };
    def x: Int = 0;
    def test: Int = scala.Predef.identity[Int](1)
  }
}
{noformat}
