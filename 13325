I noticed when benchmarking some of my alternative collections stuff that Array.filter was about 30% slower than my implementation for a filter which removes about half the array. 

Looking at the code (the following is from BoxedIntArray, but they all seem similar):
```scala
 	  final override def filter(p: Any => Boolean): BoxedArray = {
 	    val include = new Array[Boolean](value.length)
 	    var len = 0
 	    var i = 0
 	    while (i < value.length) {
 	      if (p(value(i))) { include(i) = true; len += 1 }
 	      i += 1
 	    }
 	    val result = new Array[Int](len)
 	    len = 0
 	    i = 0
 	    while (len < result.length) {
 	      if (include(i)) { result(len) = value(i); len += 1 }
 	      i += 1
 	    }
 	    new BoxedIntArray(result)
 	  }
```

This seems to do an unneccessary amount of work. Something like the following might prove to be better (I haven't tested this, but it's fairly close to what my code is doing. It needs further investigation)
```scala
 	  final override def filter(p: Any => Boolean): BoxedArray = {
 	    val temp = new Array[Int](value.length)          
 	    var currentWrite = 0
            var currentRead = 0;

 	    while (currentRead < value.length) {
 	      if (p(value(i))) { 
                temp(current) = true; 
                currentWrite += 1 
              }
 	      currentRead += 1
 	    }
            temp.slice(0, currentWrite).force
 	  }
```
