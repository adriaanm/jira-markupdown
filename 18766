Look at the following example:
{code}
scala> 5
res0: Int = 5

scala> .*2
<console>:1: error: ';' expected but integer literal found.
       res0.*2
             ^

scala> 5
res7: Int = 5

scala> .*(2)
res8: Int = 10

{code}
The problem is that the argument in the first case is not surrounded with parentheses.

A nice improvement would be that the REPL looks if the inserted expression is in operator notation (as it is the case for {{.*2}}, it contains only one argument). If this is the case, the REPL could replace the {{.}} with the previous result to get the real operator notation {{res0*2}} instead of concatenating it, which results in the wrong {{res0.*2}}.

If it turns out that this rule is ambigous in a more complex expression, another option would be to introduce another character for this case, for example a {{,}}.
