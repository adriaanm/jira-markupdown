Accessing a transient lazy val from a trait after an object was de-serialized causes a `NullPointerException` *if* the lazy val was accessed *before* the object was serialized.

One can reproduce this problem with the following classes:
```
class NotSerializable {
  def foo = "bar"
}

trait Base extends Serializable {
  @transient
  protected lazy val notSerializable = new NotSerializable
}

class BaseImpl extends Base {
  def check: Boolean = Try(notSerializable.foo).isSuccess
}
```

If you create an instance of `BaseImpl`, serialize and de-serialize this instance calling `check` works without problems.
If you create an instance, call `check`, serialize and de-serialize this instance calling check causes a `NullPointerException`.
