The difference between `f0` and `f1` boils down to the `checkPackedConforms` check in `SuperAccessors`, dating all the way back to the introduction of existentials.

  https://github.com/scala/scala/commit/8414eba#L10R56

There doesn't appear to be any material difference in `Typers` itself; both variations lead to an existential skolem `?0 <: A` in the type of `.getClass`.
```
101,103c113,115
<                 typed A.this.f0: [T](x: T)T
<                 adapted A.this.f0: [T](x: T)T to ?, undetparams=type T
<                 typing this.getClass: pt = ?: undetparams=, implicitsEnabled=true, enrichmentEnabled=true, mode=EXPRmode BYVALmode POLYmode, silent=false, context.owner=value <local A>
---
>                 typed A.this.f0: [T](x: => T)T
>                 adapted A.this.f0: [T](x: => T)T to ?, undetparams=type T
>                 typing this.getClass: pt = ?: undetparams=, implicitsEnabled=true, enrichmentEnabled=true, mode=EXPRmode POLYmode, silent=false, context.owner=value <local A>
113c125
< [infer method] solving for T in (x: T)T based on (Class[?0])T (solved: T=Class[?0])
---
> [infer method] solving for T in (x: => T)T based on (Class[?0])T (solved: T=Class[?0])
122c134
```
