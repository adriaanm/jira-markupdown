introduced in r17182, but it seems they were never finished

here's an example (inspired by scala-debate: http://permalink.gmane.org/gmane.comp.lang.scala.debate/4896)
{code}
abstract class Peano2 extends {type MyType} with Object { self: MyType =>
 type MyType <: Peano2{type MyType = self.MyType}

 def succ: MyType
 def count(n: Int): MyType = {
   if (n<1) this         // self type annotation
   else if (n==1) succ
   else count(n-1).succ  // f-bounded MyType
 }
}
{code}

or could we squeeze it all in the same line?
{code}
abstract class Peano2 extends {x => type MyType <: Peano2{type MyType = x.MyType}} with Object { self: MyType =>
{code}

using type parameters (this works now)
{code}
abstract class Peano2[MyType <: Peano2[MyType]] { self: MyType =>
{code}
