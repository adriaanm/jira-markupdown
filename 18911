In the following code, {{ImplicitOps2}} compiles and runs but {{ImplicitOps3}} fails compilation with

{code}
type mismatch;
 found   : Int(3)
 required: ImplicitOps3.Multiplier
  println(s"multiply(2)(3)=${multiply(2)(3)}")
                                         ^
{code}

The code:

{code}
case class Multiplier(value: Int)

case class Divider(value: Int)

object ImplicitOps2 extends App {
  implicit val defaultMultiplier = Multiplier(2)

  implicit val defaultDivider = Divider(3)

  def multiply(value: Int)(implicit multiplier: Multiplier): Int = value * multiplier.value

  def divide(value: Int)(implicit divider: Divider): Int = value / divider.value

  implicit def intToMultiplier(int: Int): Multiplier = Multiplier(int)

  implicit def intToDivider(int: Int): Divider = Divider(int)

  println(s"multiply(2)(3)=${multiply(2)(3)}")
  println(s"multiply(5)=${multiply(5)}")
  println(s"divide(12)(4)=${divide(12)(4)}")
  println(s"divide(9)=${divide(9)}")
}

object ImplicitOps3 extends App {
  implicit val defaultMultiplier = Multiplier(2)

  implicit val defaultDivider = Divider(3)

  def multiply(value: Int)(implicit multiplier: Multiplier): Int = value * multiplier.value

  def divide(value: Int)(implicit divider: Divider): Int = value / divider.value

  implicit class IntToMultiplier(val int: Int) {
    def intToMultiplier: Multiplier = Multiplier(int)
  }

  implicit class IntToDivider(val int: Int) {
    def intToDivider: Divider = Divider(int)
  }

  println(s"multiply(2)(3)=${multiply(2)(3)}")
  println(s"multiply(5)=${multiply(5)}")
  println(s"divide(12)(4)=${divide(12)(4)}")
  println(s"divide(9)=${divide(9)}")
}
{code}

I tried reordering {{ImplicitOps3}} but that made no difference.
