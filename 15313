Now groupBy is implemented as following:
```scala
332	  def groupBy[K](f: A => K): Map[K, Repr] = {
333	    var m = Map[K, Builder[A, Repr]]()
334	    for (elem <- this) {
335	      val key = f(elem)
336	      val bldr = m get key match {
337	        case None => val b = newBuilder; m = m updated (key, b); b
338	        case Some(b) => b
339	      }
340	      bldr += elem
341	    }
342	    m mapValues (_.result)
343	  }
```

Note line 342, which returns a map view. It means that builder.result would be invoked everytime when we get the value of the map. That leads to two problems:

1. By the docs of Builder#result:
"Produces a collection from the added elements . The builder's contents are undefined after this operation."

2.  
```scala
scala> val arr = Array.range(0,10)
arr: Array[Int] = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

scala> val map = arr groupBy (_%2)
map: scala.collection.Map[Int,Array[Int]] = Map((0,[I@54cbb9), (1,[I@10ae3fb))

scala> val v1 = map(0)
v1: Array[Int] = Array(0, 2, 4, 6, 8)

scala> val v2 = map(0)
v2: Array[Int] = Array(0, 2, 4, 6, 8)

scala> v1 eq v2
res5: Boolean = false

scala>
```
As we can see, we get a new Array each time calling map.apply, which may cause performance problem.

So line 342 may change to 
```scala
342	    m map { case(k,b) => (k,b.result) }
```
