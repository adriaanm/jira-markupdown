Another variation of regression.
{code}
scala> def f(x: (List[Int], List[Int])) = x match { case (x :: Nil, y :: Nil) => 1 ; case (Nil, Nil) => 2 }
f: (x: (List[Int], List[Int]))Int
// but in 2.8
scala> def f(x: (List[Int], List[Int])) = x match { case (x :: Nil, y :: Nil) => 1 ; case (Nil, Nil) => 2 }
<console>:5: warning: match is not exhaustive!
missing combination   $colon$colon           Nil
missing combination            Nil  $colon$colon

       def f(x: (List[Int], List[Int])) = x match { case (x :: Nil, y :: Nil) => 1 ; case (Nil, Nil) => 2 }
           ^
f: (x: (List[Int], List[Int]))Int
{code}
