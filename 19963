*PR:* https://github.com/scala/scala/pull/4936

There are situations on which it would be useful that immutable collections _flatMap_ methods could accept `f: (A, Option[Int]) ⇒ GenTraversableOnce[B]` or `f: (A, Int) ⇒ GenTraversableOnce[B]` instead of just `f: (A) ⇒ GenTraversableOnce[B]`. Where the second `f` parameter were the accumulated result size so far. 

That is useful, for example, when you are writing a recursive function on which, at each iteration,  _flatMap_ applies the function itself to a collection of elements being the condition to stop the total number of elements in the result. 

In general, it would boost the performance of a complete family of algorithms which have in common that they need to know how big the aggregated result is at each flatMap iteration.
This can be formally solved using _fold_ instead of _flatMap_ (with and empty target collection as zero element). That enables the explicit accumulation in a know collection:

{code}
(1 to 1000000).toSeq.fold(Seq.empty[Int]) {
 case (acc: Seq[Int], current: Int) if(acc.size < 10) => acc ++ f(current, acc.size)
 case (acc, _) => acc
}
{code}

But that is terrible in terms of performance because of the repeated concatenations. Even if the concatenation order placed `acc` as `that`, the concatenation time complexity would still be O(N) where N would be the size of the `Seq` returned by `f`.

The code above would translate (lets assume the proposed _flatMap_ get called _sizeAwareFlatMap_):

{code}
(1 to 1000000).toSeq.sizeAwareFlatMap {
    case (current: Int, Some(sizeSoFar)) if(sizeSoFar >= 10) => Seq()
    case (current, sizeSoFar) => f(current, sizeSoFar.getOrElse(-1))
}
{code}

Given the use of a `Builder` in the second case, the performance  boost can be huge.

In fact, I've developed an ad-hoc `Seq` wrapper which provided this operation and, in my tests, I get differences as huge as 44s vs 310ms when testing with 10^6 elements.

You can find and example of that ad-hoc wrapper [https://github.com/Stratio/Crossdata/pull/356/files]. Definition from line 34 to 60 and use from lines 225 to 237. (Note the at the linked code, the new _flatMap_ method is called `withTrackerFlatMap`

I am preparing a PR but I'd like to discuss the topic here.

P.S. The reason for the size parameter to be `Option` is to enable the new method compatibility with collections whose builders could lack the method `length`.
