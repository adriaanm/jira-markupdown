Let's have a look at the code:

{code}
package test

abstract class GenericAbstractClass[T] {
 def doSomething(sth: T)
}

//----------------------------------
package test

import java.lang.reflect.{Type, ParameterizedType}

object Main2 {
 def main(args : Array[String]) : Unit = {
     println(recoverInfo2(new GenericAbstractClass[Int] {
     def doSomething(sth: Int) = sth.toString
   }))
     println(recoverInfo((x: Int) => x.toString))
   }

 def recoverInfo[A,B](f: (A => B)): java.lang.Class[_] = {
   //this will return Function1
   val t: Type = f.getClass.getGenericInterfaces.first
   t match {
     case t: ParameterizedType => t.getActualTypeArguments.toList match {
       case first :: Nil => first.asInstanceOf[Class[_]]
       case _ => throw new IllegalArgumentException("Wrong number of type arguments")
     }
     case _ => throw new IllegalArgumentException("It's not a ParameterizedType")
   }
 }

 def recoverInfo2[A,B](gac: GenericAbstractClass[_]): java.lang.Class[_] = {
   val t: Type = gac.getClass.getGenericSuperclass
   t match {
     case t: ParameterizedType => t.getActualTypeArguments.toList match {
       case first :: Nil => first.asInstanceOf[Class[_]]
       case _ => throw new IllegalArgumentException("Wrong number of type arguments")
     }
     case _ => throw new IllegalArgumentException("It's not a ParameterizedType")
   }
 }

}
{code}

The output of this program is:
{code}
class java.lang.Integer
Exception in thread "main" java.lang.IllegalArgumentException: It's not a ParameterizedType
   at test.Main2$$.recoverInfo(Main2.scala:24)
   at test.Main2$$.main(Main2.scala:12)
   at test.Main2.main(Main2.scala)
{code}

Which means that it works for recovering information about type parameter in anonymous class but it doesn't for anonymous function. The reason for that is Function1 not being ParameterizedType. 

The question is why?

Someone suggested to me to create a new ticket:
http://article.gmane.org/gmane.comp.lang.scala/16918
