It is trying to disambiguate one U from the other U, not noticing that it cannot do so without citing the method signature.
{code}
class A {
  def f[U <: Int](x: U): String = "1"
  def f[U <: Int](x: U)(implicit x1: String): String = "2"

  def g = f("a")
}
// a.scala:5: error: overloaded method value f with alternatives:
//   [U(in method f)(in method f)(in method f)(in method f)(in method f)(in method f)(in method f)(in method f) <: Int](x: U(in method f)(in method f)(in method f)(in method f)(in method f)(in method f)(in method f)(in method f))(implicit x1: String)String <and>
//   [U(in method f)(in method f)(in method f)(in method f)(in method f)(in method f)(in method f)(in method f) <: Int](x: U(in method f)(in method f)(in method f)(in method f)(in method f)(in method f)(in method f)(in method f))String
//  cannot be applied to (String)
//   def g = f("a")
//           ^
// one error found
{code}
