A similar problem occurs with a nested universal trait:

{code:lang=java}
object C {
  def main(args: Array[String]) {
    val x = X(XX(3))
    println(x.q.x.x + 9)
  }
}
trait Q extends Any {
   def x: Int
   def inc: XX
}
case class X(val x: Q) extends AnyVal {
   def q = X(x.inc)
}
case class XX(val x: Int) extends AnyVal with Q {
   def inc = XX(x + 1)
}
```scala

```
java.lang.ClassCastException: XX cannot be cast to java.lang.Integer
	at scala.runtime.BoxesRunTime.unboxToInt(Unknown Source)
	at XX.inc(XX.scala:15)
	at X$.extension$q(XX.scala:13)
	at C$.main(XX.scala:4)
	at C.main(XX.scala)
{code}
