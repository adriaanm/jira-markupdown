In the reported case, we could potentially avoid creating the field. In
addition there is the "final val vs. val" issue covered in the following
email excerpt from rex kerr.
```
Scala knows that it is not a mutable int because it's marked "val". And
furthermore it knows that it won't be overridden because it's in an
object or final class.

The JVM as far as I know doesn't have the level of effect tracking
needed to optimize things _annotated_ as final; there is not any
restriction on bytecode that actually prevents code from writing
multiple times to a "final" field (as far as I can tell from the spec).
In fact, Scala uses this ability when overriding vals--it doesn't
override the method, it instead overwrites the java-private-final value
of the field in the constructor.

So the Scala compiler is the only place where the knowledge exists that
this is a safe optimization.

You don't even have to give up the I-really-am-a-constant vs.
I-am-a-method-masquerading-as-a-constant thing since the JVM is
perfectly well able to elide methods that return a constant. The problem
is that Scala actually stores the value in a field, not that it uses a
method. So if you compare

  object Rng3 {
    val IA = 3877
    val IC = 29573
    var last = 42
    def next = { last = (last*IA + IC); last }
  }

  object Rng4 {
    final val IA = 3877
    final val IC = 29573
    var last = 42
    def next = { last = (last*IA + IC); last }
  }
  object Rng8 {
    def IA = 3877
    def IC = 29573
    var last = 42
    def next = { last = (last*IA + IC); last }
  }

you find that the performance is identical for 4 and 8. In the Rng4 case
the constants are pushed into the next method, but in Rng8 the code for
next is bytecode-identical to that for Rng3. The difference is

// Rng3 -- val
public int IA();
  Code:
   0:    aload_0
   1:    getfield    #20; //Field IA:I
   4:    ireturn

// Rng8 -- def
public int IA();
  Code:
   0:    sipush    3877
   3:    ireturn

and in the former case, the JVM is, as far as I know, powerless to elide
the field access.
```
