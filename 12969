Scala code:
```scala
class DynamicVariable {
  def withValue: Int = {
    try { 10 } finally {}
  }
}
```

Generated MSIL:
```scala
        .method public virtual hidebysig instance int32 'withValue'() cil managed
        {
            .maxstack   2
            .locals init (
                class [mscorlib]'System.Exception' 'exc1')
            .try {
                .line       5
                IL_0000:    ldc.i4.s    10
                IL_0002:    leave       IL_000f
            }
            catch [mscorlib]'System.Exception' {
                IL_0007:    stloc.0
                IL_0008:    ldloc.0
                IL_0009:    throw
                IL_000a:    leave       IL_000f
            }
            IL_000f:    ret
        }
```

Output from PEVerify:
```scala
Microsoft (R) .NET Framework PE Verifier.  Version  2.0.50727.42
Copyright (c) Microsoft Corporation.  All rights reserved.

[IL]: Error: [D:\projects\SketcherEngine\SketcherEngine\test.dll : test.DynamicVariable::withValue][offset 0x0000000F] Return value missing on the stack.
1 Error Verifying test.dll
```

From the spec CLR architecture spec says in section 9.5, bullet point (4.b):

leave from the body of a try or catch (in this case the destination of the leave must have an empty evaluation stack and the leave instruction has the side-effect of emptying the evaluation stack).

To fix this, we must save the result from the stack in a local variable, then reload when the ret is made:



Correct MSIL:
```scala
        .method public virtual hidebysig instance int32 'withValue'() cil managed
        {
            .maxstack   2
            .locals init (
                class [mscorlib]'System.Exception' 'exc1', int32 x)
            .try {
                .line       5
                IL_0000:    ldc.i4.s    10
                stloc.1
                IL_0002:    leave       IL_000f
            }
            catch [mscorlib]'System.Exception' {
                IL_0007:    stloc.0
                IL_0008:    ldloc.0
                IL_0009:    throw
                IL_000a:    leave       IL_000f
            }
            IL_000f:    
               ldloc.1
               ret
        }
```

I guess this means we have to get icode to stop leaving things on the stack....
