Okay, I hadn't thought of that case, though that case seems more consistent than the case in question as it is perfectly understandable that `T` may be `Unit` and that a constructor without a parameter is going to be an implicit declaration of a `Unit`.  It is a way of saying that this class should be allowed to take any type of parameter or none.

However, wherever a type is defined which is not Unit, e.g.:
{code}
scala> class C(value: String)       
defined class C
{code}
it is not possible to instantiate an instance without passing a parameter:
{code}
scala> new C
<console>:7: error: not enough arguments for constructor C: (value: String)C.
Unspecified value parameter value.
       new C
       ^
{code}

Technically I accept that this case is not about substituting a `Unit` but intuitively this is highly confusing. Why, in a language which is providing such value in type safety are we silently inserting default values for those edge cases where a potentially valid parameter is one of 'value' `Unit`, yet in all other cases we enforce that parameters should be provided unless a default is explicitly defined in the class or function definition?

I believe that this ambiguity would go without breaking any existing code if a warning was issued in the absence of an explicit declaration of a default:
{code}
scala> class C[T](value: T = Unit)
defined class C

scala> new C
res0: C[Unit] = C@7b7a7861

// Imagining the new behaviour...
scala> class C[T](value: T)
defined class C

scala> new C
<console>:7: warning: no argument provided for constructor C: (value: T)C.
Provide a default value of Unit to remove this warning.
       new C
           ^
defined class C
{code}

and

{code}

scala> class C(value: => Unit = Unit)
defined class C

scala> new C
res40: C = C@4de77a3e

// Imagining the new behaviour...
scala> class C(value: => Unit)
defined class C

scala> new C

<console>:7: warning: no argument provided for constructor C: (value: => Unit)C.
Provide a default value of Unit to remove this warning.
       new C
           ^
defined class C
{code}
