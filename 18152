{code}
$ cat spec-test.scala 
class Test[T](array: Array[T]) {
 
  def spec_mapper[@specialized(Int) U](array: Array[U]) {
    for(i <- 0 to 10) {
      array(i) = array(array.length - i - 1)
    }
  }
}

$ ../build/quick/bin/scalac -Xprint:specialize spec-test.scala
[[syntax trees at end of                specialize]] // spec-test.scala
package <empty> {
  class Test[T >: Nothing <: Any] extends Object {
    ...

    // generic spec_mapper:
    def spec_mapper[@specialized(scala.Int) U >: Nothing <: Any](array: Array[U]): Unit = scala.this.Predef.intWrapper(0).to(10).foreach$mVc$sp({
      // parent rewired correctly to AbstractFunction1$mcVI$sp
      @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1$mcVI$sp with Serializable {
        ...
      };
      (new anonymous class $anonfun(): Int => Unit)
    });

    // specialized spec_mapper for Int:
    <specialized> def spec_mapper$mIc$sp(array: Array[Int]): Unit = scala.this.Predef.intWrapper(0).to(10).foreach$mVc$sp({
      // parent not rewired: AbstractFunction1[Int, Unit] => Int boxed!
      final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Unit] with Serializable {
        ...
      };
      (new anonymous class $anonfun(): Int => Unit)
    })
  }
}
{code}

This bit us while working on https://github.com/nicolasstucki/specialized/
