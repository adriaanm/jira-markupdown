Sorry for the somewhat vague and puzzling summary, but hopefully the sample code will clear things up:
```scala
trait Base {
 lazy val l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14 = ""
 def content: String
 private val content2 = content
}

class Child1 extends Base {
 lazy val l15 = ""
 lazy val content = { l15; "hello" }
}

class Child2 extends Child1 {
 lazy val kaboom = ""
 println(kaboom.length)
}

val o = new Child2 { override lazy val kaboom = "" }
```

This code throws a NullPointerException that boils down to the "kaboom" lazy val override.
One interesting point is that if I remove or add a lazy val in "Base", no exception occurs. Which makes me think that it might be related to the internal implementaiton of lazy vals, which if I'm not mistaken uses bit fields to record which lazy vals have already been evaluated or not. There might be some kind of overflow somewhere.

This was tested against version 2.7.4 final, using the scala interpreter, giving the following stack trace:
```scala
java.lang.NullPointerException
        at Child2.<init>(<console>:8)
        at $$anon$$1.<init>(<console>:7)
        at .<init>(<console>:7)
        at .<clinit>(<console>)
        at RequestResult$$.<init>(<console>:3)
        at RequestResult$$.<clinit>(<console>)
        at RequestResult$$result(<console>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAcces...
```
