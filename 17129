Not-linked types:

These happen in many places, and usually with very important types. For example, scala.reflect.runtime.currentMirror's type "Mirror" isn't linked. To find out what it refers to, we have to go to REPL, and then look it up on Scaladoc through browsing (see next issue).

Type members are neither browsable nor searchable:

Type members -- traits, classes and types defined inside traits, classes or objects -- can only be found by going to the trait/class/object that define them, and then search and click on the type member there.

An old example of this problem is Regex/RegexMatch, but reflection exacerbates this problem because pretty much every important type falls in this category, because of the ecosystem/cake pattern, and the previous problem prevents us from just clicking on the type at the method definition.
