When resolving implicits the compiler seems to include the implcit values defined in package objects for the parent packages of the implicit's type, which does not seem correct to me.

By example I have the following code:

{code:title=MyTest.scala}
package com.acme.test

object MyTest {
  implicitly[com.acme.foo.bar.Bar]
  implicitly[com.acme.foo2.baz.Baz]
}
```scala

And:

{code:title=package.scala}
package com.acme

import com.acme.foo.bar.Bar

package object foo {
  implicit val barImpl: Bar = null
}
```

The line {code}implicitly[com.acme.foo.bar.Bar]{code} compiles fine, proving that the compiler found my implicit value barImpl even though I did not import foo._ and MyTest is not in a sub-package of foo. Worse still, if another project links against this code, the compiler complains with errors along the line "bad symbolic reference ...". The root of the problem though is why the implicit value was found in the first place (and if I explcitly import pacakge foo, it still compiles fine and the latter error disappears too).

Note that the on the other hand the compiler does not find the implcit Baz value. The difference being that the only such implicit value I have defined is in a regular object instead of in a package object.

You will find attached a complete sbt project reproducing the error. Just run "sbt clean compile" at the root. 
To exclude the possibility that the error is due to sbt itself, I also compiled it manually (with the same results) using "scalac @scalac-options.txt"
