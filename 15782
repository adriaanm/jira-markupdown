{code}
object X extends Application {
	(new ISeq) map println
}

class ISeq extends SeqLike[Int, Seq[Int]] {
	val items = 1 to 20

	def iterator = items.iterator

	def length = items.length

	def apply( idx: Int ) = items( idx )

	def newBuilder = Seq.newBuilder
}
{code}


{code}
Exception in thread "main" java.lang.ExceptionInInitializerError
	at X.main(X.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:115)
Caused by: java.lang.ClassCastException: ISeq cannot be cast to scala.collection.Traversable
	at scala.collection.generic.TraversableFactory$$GenericCanBuildFrom.apply(TraversableFactory.scala:44)
	at scala.collection.TraversableLike$$class.map(TraversableLike.scala:204)
	at ISeq.map(X.scala:25)
	at X$$.<init>(X.scala:22)
	at X$$.<clinit>(X.scala)
	... 6 more
{code}
