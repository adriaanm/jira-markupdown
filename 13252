The code below currently gives a compilation error. The specialised return type is being ignored.
```scala
trait I {
    // changing to have no implementation avoids the error
    def f: I = error("some unwanted implementation")
}

abstract class J extends I {
    
    // changing to have an implementation avoids the error
    override def f: J
}

abstract class K(t: J) extends J {
    // error: type mismatch; found: I; required: J
    override def f: J = t.f
    //                    ^
}
```

A use case:
I is Iterable, J is Stream, K is Cons, f is map.
Stream might specialise map to return a Stream, but leave the implementation to Cons
