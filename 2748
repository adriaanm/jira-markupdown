Replying to [comment:7 moors]:
> no, the result type is not the same if you partially apply the methods

But if I don't partially apply, they are.

>  `bar(5): Unit` vs `bar(5):  Float => Unit`

Both fail. Please try before closing again.

These are the two errors I get:
```scala
  bar(5): Unit // ambiguous reference to overloaded definition, both method bar in object Foo of type (i: Int)(f: Float)Unit and  method bar in object Foo of type (i: Int)Unit match argument types (Int)
  bar(5): Float => Unit // not a legal formal parameter
  bar(5): (Float => Unit) // ambiguous reference to overloaded definition, both method bar in object Foo of type (i: Int)(f: Float)Unit and  method bar in object Foo of type (i: Int)Unit match argument types (Int)
```
