{code}
import scala.reflect.makro.{Context => Ctx}

object Macros {
  def foo[T](s: T) = macro Impls.foo[List[T]]

  object Impls {
    def foo[T: c.TypeTag](c: Ctx)(s: c.Expr[T]) = c.reify {
      List(s.eval)
    }
  }
}
{code}

{code}
object Test extends App {
  val list: List[List[String]] = Macros.foo(List("hello world"))
  println(list)
}
{code}

{code}
reifying =
immutable.this.List.apply[T](s.eval)
Apply(TypeApply(Select(Select(This(newTypeName("immutable")), newTermName("List")), newTermName("apply")), List(TypeTree().setType(T))), List(Select(Ident(newTermName("s")), newTermName("eval"))))
reifee is located at: source-D:\Dropbox\Scratchpad\Scala\Macros_1.scala,line-8,offset=195
prefix = c.mirror
[calculate phase]
[reshape phase]
discarding TypeApply: immutable.this.List.apply[T]
[metalevels phase]
entering splice: s
[interlude]
symbol table = <empty>
reifee =
immutable.this.List.apply(s.eval)
Apply(Select(Select(This(newTypeName("immutable")), newTermName("List")), newTermName("apply")), List(Select(Ident(newTermName("s")), newTermName("eval"))))
[reify phase]
This for package immutable, reified as This
splicing eval s.eval
splicing has succeeded
splicing T
launching implicit search for c.mirror.TypeTag[T]
implicit search has produced a result: evidence$1
reified = {
  val $mr: c.mirror.type = c.mirror;
  $mr.Expr[List[T]]($mr.Apply($mr.Select($mr.Select($mr.This($mr.staticModule("scala.collection.immutable").moduleClass), $mr.newTermName("List")), $mr.newTermName("apply")), scala.collection.immutable.List.apply(s.tree)))($mr.ConcreteTy
peTag[List[T]]($mr.TypeRef($mr.thisModuleType("scala.collection.immutable"), $mr.staticClass("scala.collection.immutable.List"), scala.collection.immutable.List.apply(evidence$1.tpe)), Predef.this.classOf[List[Any]]))
}
Macros_1.scala:4: error: macro implementation has wrong shape:
 required: (c: scala.reflect.makro.Context)(s: c.Expr[T]): c.Expr[List[List]]
 found   : (c: scala.reflect.makro.Context)(s: c.Expr[T]): c.Expr[List[T]]
type mismatch for return type: c.Expr[List[?T]] does not conform to c.Expr[List[List]]
  def foo[T](s: T) = macro Impls.foo[List[T]]
                                    ^
one error found
{code}
