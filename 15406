I guess the contest for "most egregious abstraction failure" is never over when it comes to the corner cases inflicted upon every application programmer who wants to do some nutty esoteric thing like negate an Int.  It's only common sense that making x into -x will be identity on zero, and also -2147483648.  Actually it's zero I always forget.
```scala
scala> Int.MinValue == -Int.MinValue
res0: Boolean = true
```
OK, so that's the cause of who knows how many bugs in Range and NumericRange and I'm sure other things.  But that's not what this ticket is about, it's about this:
```scala
object Test {
  def posEqualsNeg[T: Numeric](x: T) = {
    val num = implicitly[Numeric[T]]
    import num._
    
    x == -x
  }
  
  def main(args: Array[String]): Unit = {
    println(posEqualsNeg(Byte.MinValue))
    println(posEqualsNeg(Short.MinValue))
    println(posEqualsNeg(Int.MinValue))
    println(posEqualsNeg(Long.MinValue))
    
    println(Byte.MinValue == (-(Byte.MinValue)))
    println(Short.MinValue == (-(Short.MinValue)))
    println(Int.MinValue == (-(Int.MinValue)))
    println(Long.MinValue == (-(Long.MinValue)))
  }
}
```
This prints:
```scala
true
true
true
true
false
false
true
true
```
Why is that, you ask.  Well, Numeric's "thing" is to operate within the domain it's parameterized upon.  So Byte.MinValue negated is turned back into a byte, and it equals Byte.MinValue.

Whereas in "real life" Byte.MinValue.toByte returns the same bit sequence, but is promoted to an Int, and -128 is compared to the Int 127 and they're unequal.

Is this the wrong thing? If it's the right thing, do we need warning labels? If so, where? Need opinions.
