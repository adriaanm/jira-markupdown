Very strange things happen when I define a method: ==(...).  Example definition:

{code}
class Test {
  def ==(other: Test) = 123    // not Boolean
}
{code}

The trick seems to be when defining == not to return of type Boolean.  I'm afraid I don't have a minimal test case, but the end result is errors at seemingly-arbitrary (but consistent) points in the code.  These points in code are *never* anywhere near a use of the == method or even any instance of the class which defines it.  It seems that what happens is the parser makes certain assumptions about the == method and possibly inlines a few expressions or definitions.  This is eventually passed on to the type checker, which recognizes that == does not return Boolean for that type.  I'm assuming that odd error locations are due to whatever the parser is doing.

Sample error:

{code}
C:\Users\Daniel Spiewak\Development\workspace\scala_ql\src\main\scala\edu\uwm\cs\sql\tree\nodes.scala:24: error: type mismatch;
 found   : edu.uwm.cs.sql.tree.And
 required: Boolean
case class LessThanNum(left: NumericExpression, right: NumericExpression) extends BooleanExpression with BinaryTemplateResolution {
           ^
{code}

The == method is defined in a superclass of {Numeric, Binary}Expression and is defined to return a value of type BooleanExpression.
