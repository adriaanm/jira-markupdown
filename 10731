Here's a cut down case mostly disentangled from the standard library.
```scala
trait Combinable[A] {
  def combined = 9
}

trait Trav0[+A]
trait Set0[A] extends T[A @annotation.unchecked.uncheckedVariance]

trait CB[-Elem, +To]

trait List[+A]
 
object O  {
  implicit def listCB[A]: CB[A, List[A]] = ???
  implicit def CovariantMCombinable[G, M[+e]] (xs: M[Option[G]]): Combinable[G] = ???
  implicit def Set0Combinable[G] (xs: Set0[_ <: Option[G]])(implicit cbf: CB[G, List[Any]]): Combinable[G] = ???
}

class T1 {
  import O.listCB
  import O.CovariantMCombinable
  import O.Set0Combinable
  val s: Set0[Option[Nothing]] = ???
  s.combined // okay
}

class T2 {
  import O.listCB
  import O.Set0Combinable
  import O.CovariantMCombinable
  val s: Set0[Option[Nothing]] = ???
  s.combined // fails
}
```
