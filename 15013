I discovered a strange behavior in which the Scala Interpreter cannot find a class in the classpath.

Here's my Scala code that starts the interpreter:
{code}
// MiniDebugger.scala

package bugs

import tools.nsc.Interpreter

object MiniDebugger {
        def main (args: Array[String]) {
                Interpreter.breakIf(true, "that" -> this)
        }
}
{code}

I can compile the file
{code}
scalac MiniDebugger.scala
{code}
and start it via
{code}
scala bugs.MiniDebugger
{code}
And it works without any problems.

But when I try to start it from the parent directory:
{code}
cd ..
scala -cp x bugs.MiniDebugger
{code}
I get the following exception:
{code}
<script>:3: error: not found: value bugs
   var value: bugs.MiniDebugger$$ = _
              ^
<script>:4: error: not found: value bugs
   def set(x: Any) = value = x.asInstanceOf[bugs.MiniDebugger$$]
                                            ^
java.util.NoSuchElementException: None.get
        at scala.None$$.get(Option.scala:186)
        at scala.None$$.get(Option.scala:184)
        at scala.tools.nsc.Interpreter.scala$$tools$$nsc$$Interpreter$$$$loadByName(Interpreter.scala:207)
        at scala.tools.nsc.Interpreter.bind(Interpreter.scala:625)
        at scala.tools.nsc.Interpreter$$$$anonfun$$break$$2$$$$anonfun$$apply$$22.apply(Interpreter.scala:1236)
        at scala.tools.nsc.Interpreter$$$$anonfun$$break$$2$$$$anonfun$$apply$$22.apply(Interpreter.scala:1235)
        at scala.collection.LinearSeqLike$$class.foreach(LinearSeqLike.scala:97)
        at scala.collection.immutable.List.foreach(List.scala:46)
        at scala.tools.nsc.Interpreter$$$$anonfun$$break$$2.apply(Interpreter.scala:1235)
        at scala.tools.nsc.Interpreter$$$$anonfun$$break$$2.apply(Interpreter.scala:1233)
        at scala.tools.nsc.Interpreter$$$$anonfun$$beQuietDuring$$2.apply(Interpreter.scala:130)
        at scala.util.control.Exception$$Catch.apply(Exception.scala:79)
        at scala.tools.nsc.Interpreter.beQuietDuring(Interpreter.scala:128)
        at scala.tools.nsc.Interpreter$$.break(Interpreter.scala:1233)
        at scala.tools.nsc.Interpreter$$.breakIf(Interpreter.scala:1223)
        at bugs.MiniDebugger$$.main(MiniDebugger.scala:7)
        at bugs.MiniDebugger.main(MiniDebugger.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at scala.tools.nsc.util.ScalaClassLoader$$$$anonfun$$run$$1.apply(ScalaClassLoader.scala:55)
        at scala.tools.nsc.util.ScalaClassLoader$$class.asContext(ScalaClassLoader.scala:22)
        at scala.tools.nsc.util.ScalaClassLoader$$URLClassLoader.asContext(ScalaClassLoader.scala:61)
        at scala.tools.nsc.util.ScalaClassLoader$$class.run(ScalaClassLoader.scala:55)
        at scala.tools.nsc.util.ScalaClassLoader$$URLClassLoader.run(ScalaClassLoader.scala:61)
        at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:33)
        at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:129)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
{code}

I tested it even with the most recent release:

Scala code runner version 2.8.0.r20862-b20100211133049 -- Copyright 2002-2010, LAMP/EPFL

java version "1.6.0_17"
Java(TM) SE Runtime Environment (build 1.6.0_17-b04)
Java HotSpot(TM) 64-Bit Server VM (build 14.3-b01, mixed mode)
