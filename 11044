Not sure it works for me:

{code}
package foo

final class Optional[A >: Null](val value: A) extends AnyVal {
  def get: A = value
  def isEmpty = value == null
  @inline final def getOrElse[B >: A](alt: => B): B = if (isEmpty) alt else value
}
{code}

{code}
package foo

class C

object Test {
  def foo: Unit = {
    val x = new Optional(null)
    println(x.getOrElse(new C))
  }
}
{code}

{code}
18:03 ~/Projects/211x/sandbox (2.11.x)$ scalac Macros.scala && scalac Test.scala && javap -v foo.Test$
...
  public void foo();
    flags: ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=1
         0: aconst_null
         1: astore_1
         2: getstatic     #18                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
         5: getstatic     #23                 // Field foo/Optional$.MODULE$:Lfoo/Optional$;
         8: aload_1
         9: pop
        10: aconst_null
        11: new           #25                 // class foo/Test$$anonfun$foo$1
        14: dup
        15: invokespecial #26                 // Method foo/Test$$anonfun$foo$1."<init>":()V
        18: invokevirtual #30                 // Method foo/Optional$.getOrElse$extension:(Ljava/lang/Object;Lscala/Function0;)Ljava/lang/Object;
        21: invokevirtual #34                 // Method scala/Predef$.println:(Ljava/lang/Object;)V
        24: return
...
{code}
