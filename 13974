A while back, I started an email on list about the hidden gotcha of overloading multi parameter list. For example:
```scala
$$ scala
Welcome to Scala version 2.7.3.final (Java HotSpot(TM) Client VM, Java 1.5.0_16).
Type in expressions to have them evaluated.
Type :help for more information.

scala> class A { 
     |  def handle(s: String)(f: => Unit) = f 
     |  def handle(s: String)(f: String=>Unit) = f(s) 
     | } 
defined class A

scala> new A().handle("/test"){ println("test no param") }
<console>:6: error: ambiguous reference to overloaded definition,
both method handle in class A of type (String)((String) => Unit)Unit
and  method handle in class A of type (String)(=> Unit)Unit
match argument types (java.lang.String)
       new A().handle("/test"){ println("test no param") }
               ^
```

Noticed that it compiled no problem, but only to failed at runtime. The mailing list thread is here:
http://www.nabble.com/how-to-get-overloaded-multiparameter-list-working--td18396779.html

There is a proposed work around by Miles Sabin like this:
```scala
scala> class A { 
       | def handle(s: String) = new { 
       | def apply(f: => Unit) = f 
       | def apply(f: String=>Unit) = f(s) 
       | }} 
  defined class A 

  scala> val a = new A 
  a: A = A@751d58 

  scala> a.handle("/test"){ println("test no param") } 
  test no param 

  scala> a.handle("/test2"){ s=>println("test 1 param " +s) } 
  test 1 param /test2 
```

I really like Scala to support the overloading of multi params list without as default rather than a work around. If not to the feature, then at least error out during compile rather than runtime will seem more correct.
