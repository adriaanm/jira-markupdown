I offer my layman notes and a slightly smaller reproduction:
```scala
class Foo(x: Int) {
  def this() = {
    this(1)
    new { x }
  }
}
```

The problem seems to have something to do with the outer class of the anonymous class being resolved to `package <empty>` instead of `class Foo`, which it correctly does if the anonymous class construction is moved out of the secondary constructor.

This particular error goes away by changing [ownerClass](https://github.com/scala/scala/blob/2.12.x/src/reflect/scala/reflect/internal/Symbols.scala#L2098) to:
```scala
    final def outerClass: Symbol =
      if (this == NoSymbol) {
        // ideally we shouldn't get here, but it's better to harden against this than suffer the infinite loop in SI-9133
        devWarningDumpStack("NoSymbol.outerClass", 15)
        NoSymbol
      } else if (owner.isClass) owner
      else if (owner.isAuxiliaryConstructor) owner.enclClass // <------
      else if (isClassLocalToConstructor) owner.enclClass.outerClass
      else owner.outerClass
```

But unfortunately that breaks t4842, t6666, t1909 and ‘origins’. I haven't been able to figure out how to avoid that :)
