On second thought, apply() returning null wasn't such a bright
idea - sorry. So, I propose this instead:

{code}

class NoResponse(msg: String) extends RuntimeException(msg)

object Responder {
  ...
  def run[A](r: Responder[A]): Option[A] = {
    try { Some(r()) }
    catch { case e: NoResponse => None }
  }
  ...
}

abstract class Responder[+A] {
  ...
  def apply(): A = {
    var result: Option[A] = None
    foreach { x => result = Some(x) }
    result getOrElse { throw new NoResponse("NoResponse") }
  }
  ...
}
{code}
