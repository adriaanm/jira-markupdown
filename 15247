```scala
import scala.collection.mutable.Builder
class Converter[T]
object SimpleIntConverter extends Converter[Int]

class TraversableConverter[T, Coll[X] <: Traversable[X]](converter: Converter[T], builder: Builder[T, Coll[T]]) extends Converter[Coll[T]] 

val tc: Converter[List[Int]] = new TraversableConverter(SimpleIntConverter, new ListBuffer[Int])
```
```scala
error: kinds of the type arguments (Int,List[X]) do not conform to the expected kinds of the type parameters (type T,type Coll) in class TraversableConverter.
List[X]'s type parameters do not match type Coll's expected parameters: class List has one type parameter, but type Coll has one
```

repeat 100x:
I must not infer ill-kinded types
I must not break reflexivity of numeric equality...
