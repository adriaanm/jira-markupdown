Pretty version:

{code}
package crash

object FunctionUtils {
  case class RichFunction2[T1, T2, RT](fn : (T1, T2) => RT) extends Function1[(T1, T2), RT] {
    //def apply(a1 : T1, a2 : T2) = fn(a1, a2)
    def apply(a1 : T1) = (a2 : T2) => fn(a1, a2)
    //def apply(t : (T1, T2)) = fn(t._1, t._2)
  }

  implicit def toRichFunction[T1, T2, RT](fn : (T1, T2) => RT) = RichFunction2(fn)
}

object Main {
  def main(args : Array[String]) {
    import FunctionUtils._
    val fn = (a : Int, str : String) => "a: " + a + ", str: " + str
    //println(fn(1))
  }
}
{code}
