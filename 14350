Using a recent revision of trunk (18333), the pattern matcher fails to compile patterns containing function types:
```scala
object Test extends Application {
  scala.actors.Actor.react {
    case f: (Int => Int) => f(41)
  }
}
```
Stack trace:
```scala
Exception in thread "main" scala.tools.nsc.symtab.Types$$TypeError: type mismatch;
 found   : () => (Int) => Int
 required: (Int) => Int
	at scala.tools.nsc.typechecker.Contexts$$Context.error(Contexts.scala:313)
	at scala.tools.nsc.typechecker.Infer$$Inferencer.error(Infer.scala:269)
	at scala.tools.nsc.typechecker.Infer$$Inferencer.typeError(Infer.scala:279)
	at scala.tools.nsc.typechecker.Infer$$Inferencer.typeErrorTree(Infer.scala:288)
	at scala.tools.nsc.typechecker.Typers$$Typer.adapt(Typers.scala:964)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3765)
	at scala.tools.nsc.typechecker.Typers$$Typer.typedBlock(Typers.scala:1596)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed1(Typers.scala:3512)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3760)
	at scala.tools.nsc.typechecker.Typers$$Typer.adapt(Typers.scala:804)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3765)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3813)
	at scala.tools.nsc.matching.TransMatcher$$MatchMatrixContext.typedValDef(TransMatcher.scala:82)
	at scala.tools.nsc.matching.ParallelMatching$$MatchMatrix$$MixTypes.castedScrut$$1(ParallelMatching.scala:991)
	at scala.tools.nsc.matching.ParallelMatching$$MatchMatrix$$MixTypes.needCast$$1(ParallelMatching.scala:992)
	at scala.tools.nsc.matching.ParallelMatching$$MatchMatrix$$MixTypes.tree(ParallelMatching.scala:994)
	at scala.tools.nsc.matching.ParallelMatching$$MatchMatrix$$Rep.toTree(ParallelMatching.scala:1081)
	at scala.tools.nsc.matching.TransMatcher$$class.handlePattern(TransMatcher.scala:201)
	at scala.tools.nsc.transform.ExplicitOuter.handlePattern(ExplicitOuter.scala:19)
	at scala.tools.nsc.transform.ExplicitOuter$$ExplicitOuterTransformer.matchTranslation(ExplicitOuter.scala:391)
	at scala.tools.nsc.transform.ExplicitOuter$$ExplicitOuterTransformer.transform(ExplicitOuter.scala:480)
	at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transform$$5.apply(Trees.scala:1418)
	at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transform$$5.apply(Trees.scala:1416)
	at scala.tools.nsc.ast.Trees$$Transformer.atOwner(Trees.scala:1536)
	at scala.tools.nsc.transform.TypingTransformers$$TypingTransformer.atOwner(TypingTransformers.scala:36)
	at scala.tools.nsc.transform.TypingTransformers$$TypingTransformer.atOwner(TypingTransformers.scala:29)
	at scala.tools.nsc.ast.Trees$$Transformer.transform(Trees.scala:1415)
	at scala.tools.nsc.transform.TypingTransformers$$TypingTransformer.transform(TypingTransformers.scala:51)
	at scala.tools.nsc.transform.ExplicitOuter$$OuterPathTransformer.transform(ExplicitOuter.scala:231)
	at scala.tools.nsc.transform.ExplicitOuter$$ExplicitOuterTransformer.transform(ExplicitOuter.scala:449)
	at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transformStats$$1.apply(Trees.scala:1528)
	at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transformStats$$1.apply(Trees.scala:1526)
...
```
Note that the following code successfully compiles:
```scala
object Test extends Application {
  val fun = (x: Int) => x + 1
  fun match {
    case f: (Int => Int) => f(41)
  }
}
```
