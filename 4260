As a point of interest, one has to wonder how much CPU we burn off calculating this sort of thing:
{code}

scala.collection.immutable.Map[
  Int,scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]{
    def reverse: scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]{
      def reverse: scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]{
        def reverse: scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
        def dropRight(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
        def takeRight(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
        def drop(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
        def take(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]};
        def dropRight(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]{
          def reverse: scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
          def dropRight(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
          def takeRight(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
          def drop(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
          def take(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]};
          def takeRight(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]{
            def reverse: scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
            def dropRight(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
            def takeRight(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
            def drop(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];
            def take(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]};
            def drop(n: Int): scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int]{
              def reverse: scala.collection.immutable.Seq[Int] with scala.collection.AbstractSeq[Int];

{code}
(And on and on, that's just the beginning.)
