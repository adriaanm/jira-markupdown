Let Outer.java define a parametrized class Outer with a non-static inner class Inner as well as a static method f returning an object of type Outer<Integer>.Inner.

{code}
class Outer<T> {
  class Inner {
  }
  static Outer<Integer>.Inner f() {
    return null;
  }
}
{code}

Furthermore, let Foo.scala define a class calling Outer.f().

{code}
class Foo {
  val foo = Outer.f()
}
{code}

The Scala compiler fails to parse Outer.java.

{code}
$$ scalac *.java *.scala
Outer.java:4: error: stable identifier required, but Outer[java.lang.Integer] found.
  static Outer<Integer>.Inner f() {
         ^
one error found
{code}

However, Outer.java is legal Java code.

{code}
$$ javac *.java
$$ echo $$?
0
{code}

I am using the latest release of the Scala compiler.

{code}
$$ scala -version
Scala code runner version 2.8.0.RC5 -- Copyright 2002-2010, LAMP/EPFL
{code}
