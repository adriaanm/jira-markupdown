Sorry, didn't mean to imply you didn't know how to use {{Option}}. I misinterpreted the reason why you thought I was suggesting wrapping every {{SomeCannotPossiblyBeNullType}} instead of just the ones at system boundaries that might be null.

It sounds like we're mostly on the same page though, with just a few different default assumptions separating our different approaches.

My answer to your "what if" is that it depends on the API and what a failure might cause. If the failures would be critical and damaging, such as aborting in the middle of a vital transaction, I would null-check at boundaries. Otherwise, I would classify that as a failure of the API user, and not bother checking. (In my case, that user will probably be "future me" most of the time. I accept that.)

That's just my approach, it's worked for me so far.
The only reason I said anything at all is that I also detest null, and having both {{NotNull}} and {{Option}} feels inconsistent to me.

Then again, if I got my way I'd also disallow usage of {{null}} at the compiler-level unless enabled by a flag (since Java interop needs it). I'm secretly hoping that since Java 8 now has its own {{Option}}, maybe they'll remove null completely in a future version. One can wish.
