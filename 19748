First of all, this code compiles fine:

{code:scala}
import scala.annotation.tailrec

object TestCase {

  sealed trait Result[A]

  type Operation[A] = Int => Result[A]

  case class Terminate[A](state: Int, value: A) extends Result[A]
  case class Continue[A](state: Int, cont: Operation[A]) extends Result[A]

  @tailrec
  def runConversion[A](state: Int, op: Operation[A]): (Int, A) = {
    op(state) match {
      case Continue(s, c) =>
        runConversion(s, c)
      case Terminate(s, v) =>
        (s, v)
    }
  }
}
{code}

However, if I change the definition of Result:

{code:scala}sealed trait Result[+A]{code}

I get this failure:

{code:scala}
.\wks.sc:14: error: could not optimize @tailrec annotated method runConversion: it contains a recursive call not in tail
 position
    op(state) match {
      ^
{code}

Looking at the result of {{-Xprint:tailcalls}} (the last pass that succeeds), most of the generated code is the same between the two versions. However, runConversion differs between them. Here's the code for the working one:

{code:scala}
    @scala.annotation.tailrec def runConversion[A](state: Int, op: Int => TestCase.Result[A]): (Int, A) = {
      <synthetic> val _$this: TestCase.type = TestCase.this;
      _runConversion(_$this: TestCase.type, state: Int, op: Int => TestCase.Result[A]){
        {
  case <synthetic> val x1: TestCase.Result[A] = op.apply(state);
  case6(){
    if (x1.isInstanceOf[TestCase.Continue[A]]())
      {
        <synthetic> val x2: TestCase.Continue[A] = (x1.asInstanceOf[TestCase.Continue[A]](): TestCase.Continue[A]);
        {
          val s: Int = x2.state();
          val c: Int => TestCase.Result[A] = x2.cont();
          matchEnd5(_runConversion(TestCase.this, s.asInstanceOf[Int](), c.asInstanceOf[Int => TestCase.Result[A]]()))
        }
      }
    else
      case7()
  };
  case7(){
    if (x1.isInstanceOf[TestCase.Terminate[A]]())
      {
        <synthetic> val x3: TestCase.Terminate[A] = (x1.asInstanceOf[TestCase.Terminate[A]](): TestCase.Terminate[A]);
        {
          val s: Int = x3.state();
          val v: A = x3.value();
          matchEnd5(new (Int, A)(s, v))
        }
      }
    else
      case8()
  };
  case8(){
    matchEnd5(throw new MatchError(x1))
  };
  matchEnd5(x: (Int, A)){
    x
  }
}.asInstanceOf[(Int, A)]()
      }
    }{code}

And for the failing one:

{code:scala}    @scala.annotation.tailrec def runConversion[A](state: Int, op: Int => TestCase.Result[A]): (Int, A) = {
      case <synthetic> val x1: TestCase.Result[A] = op.apply(state);
      case6(){
        if (x1.isInstanceOf[TestCase.Continue[?A1]]())
          {
            <synthetic> val x2: TestCase.Continue[?A1] = (x1.asInstanceOf[TestCase.Continue[?A1]](): TestCase.Continue[?A1]);
            {
              val s: Int = x2.state();
              val c: Int => TestCase.Result[?A1] = x2.cont();
              matchEnd5(TestCase.this.runConversion[?A1](s, c))
            }
          }
        else
          case7()
      };
      case7(){
        if (x1.isInstanceOf[TestCase.Terminate[?A2]]())
          {
            <synthetic> val x3: TestCase.Terminate[?A2] = (x1.asInstanceOf[TestCase.Terminate[?A2]](): TestCase.Terminate[?A2]);
            {
              val s: Int = x3.state();
              val v: A = x3.value();
              matchEnd5(new (Int, A)(s, v))
            }
          }
        else
          case8()
      };
      case8(){
        matchEnd5(throw new MatchError(x1))
      };
      matchEnd5(x: (Int, A)){
        x
      }
    }
{code}

I'm not sure what to make of this. It looks like the second one could be tail call, if it didn't need to call into {{matchEnd5}}. And the first one appears to have synthesized a separate {{_runConversion}}. Does that make this code not actually TC? Is that correct?
