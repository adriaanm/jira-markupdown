It works in the REPL now:

{code}
scala> B.main(null)
Try 1: (6 classes)
class $line1.$read$$iw$$iw$B$B1
class $line1.$read$$iw$$iw$B$B2
class $line1.$read$$iw$$iw$B$B3$
class $line1.$read$$iw$$iw$B$B4$
class $line1.$read$$iw$$iw$B$B5$
class $line1.$read$$iw$$iw$B$B6$
Try 2: (6 classes)
class $line1.$read$$iw$$iw$B$B1
class $line1.$read$$iw$$iw$B$B2
class $line1.$read$$iw$$iw$B$B3$
class $line1.$read$$iw$$iw$B$B4$
class $line1.$read$$iw$$iw$B$B5$
class $line1.$read$$iw$$iw$B$B6$
Try 3: (6 classes)
class $line1.$read$$iw$$iw$B$B1
class $line1.$read$$iw$$iw$B$B2
class $line1.$read$$iw$$iw$B$B3$
class $line1.$read$$iw$$iw$B$B4$
class $line1.$read$$iw$$iw$B$B5$
class $line1.$read$$iw$$iw$B$B6$
{code}

but compiling it with scalac and executing it still returns:

{code}
% scala B
Try 1: (0 classes)
Try 2: (0 classes)
Try 3: (0 classes)
{code}

I belive this has something to do with the additional nesting the REPL does, because if I modify the code, so that the object are in another nested object, it starts working too:

{code}
object B {
  object C {
    class B1
    private class B2
    object B3
    private object B4
    object B5 extends B1
    private object B6 extends B2 
 
    val valuesTry1 = this.getClass.getDeclaredClasses
    val valuesTry2 = C.getClass.getDeclaredClasses
    val valuesTry3 = getClass.getDeclaredClasses
  }
        
  def main(args: Array[String]) {
    println("Try 1: (" + C.valuesTry1.length + " classes)")
    C.valuesTry1.foreach(println)
    println("Try 2: (" + C.valuesTry2.length + " classes)")
    C.valuesTry2.foreach(println)
    println("Try 3: (" + C.valuesTry3.length + " classes)")
    C.valuesTry3.foreach(println)
  }
}
{code}


{code}
% scala B
Try 1: (6 classes)
class B$C$B1
class B$C$B2
class B$C$B3$
class B$C$B4$
class B$C$B5$
class B$C$B6$
Try 2: (6 classes)
class B$C$B1
class B$C$B2
class B$C$B3$
class B$C$B4$
class B$C$B5$
class B$C$B6$
Try 3: (6 classes)
class B$C$B1
class B$C$B2
class B$C$B3$
class B$C$B4$
class B$C$B5$
class B$C$B6$
{code}

It feels like we are really close to a solution to this ...
