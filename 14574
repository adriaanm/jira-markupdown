The following code crashes the compiler (I've tested it against 2.7.7-r18779 and 2.8.0-r18925).

{code}
object Test {

  trait Foo

  class Bar { 
    object baz extends Foo
  }

  def frob[P1, P2<:Foo](f:P1 => P2) = () 

  def main(args:Array[String]) : Unit = {
  	frob((p:Bar) => p.baz) 
  }

}
{code}

Yields: 
{code}
Exception in thread "main" scala.tools.nsc.symtab.Types$$TypeError: type mismatch;
 found   : p.baz.type (with underlying type object p.baz)
 required: Test.Bar#baz.type
	at scala.tools.nsc.typechecker.Contexts$$Context.error(Contexts.scala:314)
	at scala.tools.nsc.typechecker.Infer$$Inferencer.error(Infer.scala:269)
	at scala.tools.nsc.typechecker.Infer$$Inferencer.typeError(Infer.scala:279)
	at scala.tools.nsc.typechecker.Infer$$Inferencer.typeErrorTree(Infer.scala:288)
	at scala.tools.nsc.typechecker.Typers$$Typer.adapt(Typers.scala:982)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3784)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3837)
	at scala.tools.nsc.typechecker.Typers$$Typer.transformedOrTyped(Typers.scala:3910)
...
{code}

My intuition is that this should typecheck, but even if it shouldn't, it shouldn't be crashing the compiler.

If I change the argument of frob to be something other than a function type, the problem seems to go away.  
