I don't mean to defend any of the present code, it's just that either one accepts the native equals and hashcode methods of BigInt and BigDecimal -- and one should probably consider doing exactly this, and using extension methods for any other functionality -- or one messes with them, and all kinds of consequences arise.

To be clear, and despite the fact that (see below) the goal is not achieved, the hashcodes for these classes are not modified from the native ones for anything to do with efficiency.  There is only one reason: "equal objects must have equal hashcodes." So collision rates are beside the point.

I checked, and we're not even doing the thing I talked about, so the thing I thought was a bad idea is already the way that it is, by which I mean:
{code}
scala> BigDecimal(Long.MaxValue) == BigInt(Long.MaxValue)
res9: Boolean = true

scala> (BigDecimal(Long.MaxValue) pow 2) == (BigInt(Long.MaxValue) pow 2)
res10: Boolean = false
{code}
So it's not like there's any wonderful behavior to preserve here.  I'm not going to touch any of this, I'm only trying to illuminate it a little for whoever may attempt something.
