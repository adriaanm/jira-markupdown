There are some highly annoying limitations on where you can put {{_}} to create an expanded function. They don't seem to follow any obvious logic, which makes me think the cases that do work have been special-case hacked so that they work properly, rather than fixing more generally: Take a look:

{code}
scala> val x = Seq(4,5,6)
x: Seq[Int] = List(4, 5, 6)

scala> x.map { math.log(_) }
res0: Seq[Double] = List(1.3862943611198906, 1.6094379124341003, 1.791759469228055)

scala> x.map { math.log(_ * 2) }
<console>:10: error: missing parameter type for expanded function ((x$1) => x$1.$times(2))
              x.map { math.log(_ * 2) }
                               ^
{code}

The potential ambiguity here is whether to expand {{_ * 2}} into a function  {{x => x * 2}} (wrong) or to expand {{math.log(_ * 2)}}. into a function {{x => math.log(x * 2)}} (right). Once you make the right expansion, type inference works fine. Evidently it decides to make the nearest-enclosing expansion, probably in all circumstances except in cases like {{_}} directly as a function argument, which is special-cased to not be expandable to a function by itself.

In this case, the {{math.log()}} function cannot possibly accept a function of any sort as its one argument, so correctly resolving the ambiguity should be trivial. But in fact this doesn't happen. I imagine the response might be something like "because of Scala implementation choices, the type info isn't available at the time we need to expand functions", but IMO this is rather non-optimal, as it justifies a language issue on an implementation issue -- and one that almost certainly is fixable in this case.

Plans to fix this? This bites me constantly and would be a major win. Fixes would be awesome.
