[~cvogt] Adding the apparently unrelated val has the effect of changing the order in which the two implicit searches are executed.

More directly, this takes 23 seconds to typecheck:
```scala
import scala.reflect.ClassTag
import scala.slick.ast.{TypedType}
import scala.slick.lifted.FlatShapeLevel
import scala.slick.lifted.Shape
import scala.slick.collection.heterogenous._
trait Tables {
  implicit def stringColumnType: TypedType[String] = ???
  type BranchRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HNil.type]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

  implicitly[Shape[_ <: FlatShapeLevel, HCons[String,HNil.type], _, _]]
  implicitly[Shape[_ <: FlatShapeLevel, BranchRow, BranchRow, _]]
}
```

As opposed to 3 seconds with:
```scala
  implicitly[Shape[_ <: FlatShapeLevel, BranchRow, BranchRow, _]]
  implicitly[Shape[_ <: FlatShapeLevel, HCons[String,HNil.type], _, _]]
```

If, using the patch below, we remove the "use count" based pre-sorting of implicits (which implments the strategy to try popular implicits before less popular ones of the same specificity), we return to deterministic speed. This happens to be fast, but I suspect that this is by chance, and depends on the declaration order of some implicits.
```scala
git diff -U1
diff --git a/src/compiler/scala/tools/nsc/typechecker/Implicits.scala b/src/compiler/scala/tools/nsc/typechecker/Implicits.scala
index d87090f..fcc7d75 100644
--- a/src/compiler/scala/tools/nsc/typechecker/Implicits.scala
+++ b/src/compiler/scala/tools/nsc/typechecker/Implicits.scala
@@ -881,4 +881,3 @@ trait Implicits {

-        // most frequent one first
-        matches sortBy (x => if (isView) -x.useCountView else -x.useCountArg)
+        matches
       }
```
