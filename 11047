I think I  may be hitting this but it is hard to know.  The error I see has no file/line numbers or function names to give a hint at where the failure might be located (see below).  Further, I have determined by very careful steps that under certain circumstances, inlining can fail when a full compile is performed but succeed when a large block of code is added to a function and compile then just touches that compilation unit.

This non-stationary behavior makes bisecting infeasible and I burned a *lot* of time until I realized that the compiler wasn't invariant.  Coupled with the inability to point to a file/line number, it is impractical to isolate a bit of code to demonstrate the problem.  I notice the OP's error message likewise has no file/line info but the names are suggestive.  Can we improve the error message at least?

Suggestions?

From sbt:
{code}
> clean
[success] Total time: 0 s, completed Nov 25, 2014 5:41:56 AM
> compile
[info] Updating {file:/Users/jim/dev/tesla/}hawking...
[info] Updating {file:/Users/jim/dev/tesla/}rosen...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
[info] Updating {file:/Users/jim/dev/tesla/}main...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
[warn] At the end of the day, could not inline @inline-marked method ->$extension
[warn] one warning found
[success] Total time: 19 s, completed Nov 25, 2014 5:42:19 AM
> 
> sbtVersion
[info] rosen/*:sbtVersion
[info]  0.13.1
[info] hawking/*:sbtVersion
[info]  0.13.1
[info] main/*:sbtVersion
[info]  0.13.1
> scalaVersion
[info] rosen/*:scalaVersion
[info]  2.10.4
[info] hawking/*:scalaVersion
[info]  2.10.4
[info] main/*:scalaVersion
[info]  2.10.4
> 
{code}
