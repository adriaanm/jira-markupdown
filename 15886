A function  (Double) => Double works also on Int-parameters.
This is not true if you try to compose this function with 
an Int-function. Example
```scala
val d2 = (x:Int) => x+x  // (Int) => Int
val si = math.sin _      // (Double) => Double

val sid2 = (x:Int) => si(d2(x)) // ok, si operates on Int-Parameter

// should be equivalent
val sidx = (x:Int) => (si compose d2) (x)

error: type mismatch;
 found   : (Int) => Int
 required: (?) => Double
       val sidx = (x:Int) => (si compose d2) (x)
                                         ^
```



=== What is the expected behavior? ===
```scala
// it could go this way 
val int2Double = implicitly[Int<%<Double]

val sidy = si compose int2Double compose d2
```


=== What versions of the following are you using? ===
  - Scala: 2.8.1 final
  - Java:1.6.0_21
  - Operating system: OpenSuse 10.2

Frank
