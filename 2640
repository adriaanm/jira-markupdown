This seems fine to me. Could you quote the exact passage in the reference that says this should not be allowed?

You're allowed to widen access in subclasses, just like in Java, so it's okay to do this:
```scala
  package pkg2 {
    class A {
      // Same with protected[pkg2]
      private[pkg2] def f = 0      
    }
  }
  
  class B extends pkg2.A   { // class A is visible here, so we can extend it and override its non-final members
    // f is now public
    override def f = 1
  }
```
