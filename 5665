To avoid recompiling a regex, create it exactly once.

{code}
scala> val r = "(abc)+".r
r: scala.util.matching.Regex = (abc)+

scala> import PartialFunction._
import PartialFunction._

scala> implicit class `regex matches`(val r: util.matching.Regex) {
     | def matches(s: String): Boolean = cond(s) { case r(_*) => true }
     | }
defined class regex$u0020matches

scala> r matches "abcabc"
res0: Boolean = true

scala> r matches "abcabcd"
res1: Boolean = false
{code}

Maybe the verb or predicate should read {{r isMatchedBy "abc"}}.

If the SIP for boolean match goes through, the syntax could become {{"abc" match r(_*)}}.

This comment is to answer another SO question.  It would be nice if SO questions or their ilk could be upgraded to issues without leaving the conversational domain (ML, SO, JIRA).
