I threw in:
{code}
import Predef.{conforms => _, _}
{code}
to prevent the diverging implicit.  The [http://github.com/harrah/scala-starrless/blob/49eefb44f45f3/test/files/pos/casehlist.scala test case] compiles and runs successfully.

That is, once you define Equiv (or some other type class) for HCons and HNil, Equiv comes free for case classes:
{code}
case class A(i: Int)
case class B[S,T](s: S, t: T)

assert( equiv(B(A(3), false), B(A(3), false)) )
assert( !equiv(B(A(3), false), B(A(4), false)) )
{code}

No need for explicit boilerplate like:
{code}
implicit equivA(equivInt: Equiv[Int]): Equiv[A] = ...
...
{code}
