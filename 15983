This worked in 2.7, and crashes the compiler from 2.8.0 through current trunk.
{code}
trait T[A]
class C extends T[String]
object Test {
  def main(args: Array[String]): Unit = {
    classOf[C].getTypeParameters
  }
}
{code}
The following variation does not crash 2.8.0 or 2.8.1, but still crashes current trunk.
{code}
trait T[A]
class C extends T[String]
object Test {
  def main(args: Array[String]): Unit = {
    val x = classOf[C]
    x.getTypeParameters
  }
}
{code}
Finally, this variation doesn't crash anyone.
{code}
trait T[A]
class C extends T[String]
object Test {
  def main(args: Array[String]): Unit = {
    val x: Class[C] = classOf[C]
    x.getTypeParameters
  }
}
{code}
The crash looks like:
{code}
error: java.lang.Error: T in class Class cannot be instantiated from java.lang.Class[C](classOf[C])
	at scala.tools.nsc.symtab.SymbolTable.abort(SymbolTable.scala:35)
	at scala.tools.nsc.symtab.Types$$AsSeenFromMap.throwError$$1(Types.scala:3389)
	at scala.tools.nsc.symtab.Types$$AsSeenFromMap.toInstance$$1(Types.scala:3415)
	at scala.tools.nsc.symtab.Types$$AsSeenFromMap.apply(Types.scala:3419)
	at scala.tools.nsc.symtab.Types$$AsSeenFromMap.apply(Types.scala:3289)
	at scala.tools.nsc.symtab.Types$$TypeMap$$$$anonfun$$mapOverArgs$$1.apply(Types.scala:3114)
{code}
