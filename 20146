{code:scala}
object A {
  implicit class Imp(i: Int) {
    def myPrint() {
      println(i)
    }
  }
}

object B {
  implicit class Imp(i: String) {
    def myPrint() {
      println(i)
    }
  }
}

import A._
import B._

object MyApp extends App {
  3.myPrint()
}
{code}
This fails with

{code}value myPrint is not a member of Int{code}

It is all explained in this SO:
http://stackoverflow.com/questions/22105881/scala-multiple-implicit-conversions-with-same-name
