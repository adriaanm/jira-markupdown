Consider the following code:

{code}
abstract class Abstract {
  type TypeMember
  val member: TypeMember
}

object Abstract {
  class Ops(m: Abstract#TypeMember) {
    def answer = 42
  }

  implicit def member2AbstractOps(m: Abstract#TypeMember) = new Ops(m)
}

object ShouldThisCompile {
  val concrete: Abstract = new Abstract {
    type TypeMember = String
    val member = "hello"
  }

  concrete.member.answer // error: value answer is not a member of ShouldThisCompile.concrete.TypeMember
}
{code}

Lawyering my way through the spec, I believe this ought to work: Section 7.3 states that in a selection e.m with e of type T, if the selector m does not denote a member of T, a view is searched on the implicit scope of T. In this case, the type of e is ShouldThisCompile.concrete.TypeMember, as revealed by the compiler's error message. This expands to ShouldThisCompile.concrete.type#TypeMember, and so breaking this down per the rules in Section 7.2:

* A part of ShouldThisCompile.concrete.type is a part of ShouldThisCompile.concrete.TypeMember
* A part of Abstract, the type of ShouldThisCompile.concrete, is a part of ShouldThisCompile.concrete.type
* Abstract is a part of itself
* Abstract is a base class of Abstract

Therefore, Abstract is associated with ShouldThisCompile.concrete.TypeMember, and the companion object Abstract is in implicit scope, and the view should be applied.
