Cross-compiling on a different JDK than the one used to run scalac is hindered by the fact that -javaextirs is always picking up the jars found in the running JDK.

For example, running Java 7, and compiling using JDK8
{code}
$ scalac -javabootclasspath `/usr/libexec/java_home -v 1.8`/jre/lib/rt.jar  /Users/dragos/sandbox/fx.scala  -Ylog-classpath
...
Calculated: object Calculated {
  scalaHome            = /opt/scala-2.10.3
  javaBootClassPath    = /Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home/jre/lib/rt.jar
  javaExtDirs          = 
/Users/dragos/Library/Java/Extensions
/Library/Java/JavaVirtualMachines/jdk1.7.0_17.jdk/Contents/Home/jre/lib/ext
/Library/Java/Extensions
/Network/Library/Java/Extensions
/System/Library/Java/Extensions
/usr/lib/java
  javaUserClassPath    = ""
    useJavaClassPath   = true
  scalaBootClassPath   = 
  scalaExtDirs         = 
  userClassPath        = .
  sourcePath           = 
}
{code}

Notice the JDK 7 entries. Passing `-javaextdirs ""` won't have any effect.

This scenario is used in the IDE, where users configure the JDK per project, and probably JDK 8 is a prime example. Mixing JDK7 and JDK8 on the classpath crashes scalac with MissingRequirementError @Functionalinterface not found (since rt.jar comes from Java 7, but a JavaFX class would come from extdirs, meaning the JDK8 version, version that might use the new FunctionalInterface).

The `PathResolver` hardcodes the idea that an empty string means it should pick up the default value.

Workaround: use a whitespace character `-javaextdirs " "`
