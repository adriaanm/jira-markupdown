Reify dealiases symbols and types being reified. This is philosophically incorrect, but, more importantly, produces utterly confusing results with the advent of reflection:

{code}
import scala.reflect.runtime.universe._

trait A[X]
trait B[Y] extends A[Y]
trait D
trait E extends A[D]
trait F extends A[String]

object Test extends App {
  val atype = typeOf[A[String]]
  val atype2 = typeOf[F].parents(1)
  println(typeOf[F].parents contains atype)
  println(typeOf[F].parents contains atype2)
}
{code}
