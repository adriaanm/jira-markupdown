I re-open this because get() is NOT a static method on HashMap. What you describe is true for static methods collisions only.

Actually, this is exactly the opposite: it is a Scala limitation; java does not have this limitation. For proof consider this

In Scala
```scala
import java.util.HashMap

class HashMapScala extends HashMap[ String, String ] {

}

object HashMapScala {
    
    def get() : String = "dummy"
}
```

In java
```scala
import java.util.HashMap;


public class HashMapJava extends HashMap<String, String> {

    private static final long serialVersionUID = 1L;

	public static String get() {
		
		return "dummy";
	}
}
```

In java, the static get() method is available in the the compiled code along with the non static get() method inherited from Hashmap.
The static get() method is not available in the compiled code generated by the Scala compiler.

My bet is that the scala compiler only checks for method name collisions but does not check, as it should and javac does, for the methods signature: method name AND arguments. Only in the latter case you cannot have both a static and non static method generated.
