I argue that combining the top-level (or bits of other) documentation is not the best thing to do in the interest of clarity. As Ivano and others point out, the proposition having class & object  signatures on the same page with methods from each merged into the same list greatly muddles things. I'd strongly advocate against it.

I actually don't think the desire/idea expressed in scala/bug#9009 (list companion object members in their companion class/traits) is particularly good.

(Companion) objects are used differently than instances of classes. If the documentation makes it appear as if there are members on classes that don't really exist there, then more confusion is added to the mix down the road (and I **do** understand you're advocating for a second list at the bottom of the page). It allows people to continue operating without understanding the fundamental difference between classes and their companion objects.

My feeling is that if someone is frustrated because they can't find a member, and they're looking in the wrong place (e.g., class instead of companion object), we should help them learn the distinction between the two, so that in the future they know where to look.

- That said, I'd argue against the suggestion made in scala/bug#9009 altogether. Instead, I'd suggest that we do one or both of the following:
Help people discover what companion objects are, maybe via a link to a doc on docs.scala-lang.org from within all ScalaDoc classes that have companion objects.
- **If and only if** a companion object exists which has 1 or more "apply" methods, generate a visually different entry in the list of constructors indicating something along the lines of, "it appears the companion object defines one or more `apply` factory methods. (The companion object could contain other factory methods as well.)", and link to the companion.

