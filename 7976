Slightly shorter:

{noformat}
object O {

  while(true) {
    var j = 0
    try j
    catch { case t: Throwable => }
  }

}
{noformat}

The linearization of basic blocks (shown below) results in one block ({{2 loop header}}) after another ({{3 successor to try body}}) 
where the former contains the {{SCOPE_EXIT}} that corresponds to the {{SCOPE_ENTER}} in the latter block.

{noformat}
  def <init>(): ... {
  locals: variable j, value t
  startBlock: 1
  blocks: [1,2,3,4,5]
  
  1: 
    4	THIS(O)
    4	CALL_METHOD java.lang.Object.<init> (super())
    6	JUMP 2
    
  4[catch handler]:
    8	LOAD_EXCEPTION(class Throwable)
    9	STORE_LOCAL(value t)
    9	LOAD_FIELD scala.runtime.BoxedUnit.UNIT
    9	JUMP 3
    
  3[successor to try body]:
    8	DROP REF(class Object)
    8	SCOPE_EXIT variable j   <-------- SCOPE_EXIT before corresponding SCOPE_ENTER
    8	JUMP 2
    
  2[loop header]: 
    7	CONSTANT(0)
    7	STORE_LOCAL(variable j)
    7	SCOPE_ENTER variable j
    7	JUMP 5
    
  5[try body]:
    8	LOAD_LOCAL(variable j)
    8	BOX INT
    8	JUMP 3
    
  }
  Exception handlers: 
    catch (Throwable) in ArrayBuffer(5) starting at: 4
      consisting of blocks: List(4)
      with finalizer: null
{noformat}
