There's no way to query the fs for the maximum file or path length from Java NIO but you could check if getPath fails up to a sensible limit like 255 (and always cap it at no more than that):

{code}
import java.nio.file._

val fs = FileSystems.getDefault

def ok(i: Int) =
  try {
    fs.getPath("x" * i)
    true
  } catch {
    case _: InvalidPathException => false
  }

val max = (255 to 1 by -1).iterator.find(ok)
max match {
  case Some(n) => println("Use up to "+n)
  case None => println("Some problem")  
}
{code}

This *may* fail if a path is too long but I don't know if the default fs providers implement this feature. On OSX it will happily report that I can create a file name of length 10 million.
