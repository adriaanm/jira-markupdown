Here's a better look at it:
```scala
abstract class Node extends NodeSeq
trait NodeSeq extends Seq[Node]
object NodeSeq {
  implicit def seqToNodeSeq(ns: Seq[Node]): NodeSeq = ???
}

class Transformer {
  def apply(nodes: Any): Any = ???
}

class LoopTest {
  def foo[B, That](f: Seq[B])(implicit bf: scala.collection.generic.CanBuildFrom[Seq[Int], B, That]): That = ???

  object transformer1 extends Transformer {
    // Adding explicit type arguments, or making the impilcit view
    // seqToNodeSeq explicit avoids the crash
    foo {
      // These both avoid the crash:
      // {val t = new Transformer {}; t.apply(null)
      // new Transformer().apply(null)
      new Transformer {}.apply(null)

      null: NodeSeq
    }: NodeSeq
  }
}
```
