The good news is, for the first time my entire (100K+ LOC) mixed Scala/Java codebase now compiles, with only a few workarounds needed. I think I just saw light at the end of the tunnel!

The bad news is, the following bug (which occurs at runtime) is a real showstopper for Scala/Java mixing. I don't see any way to work around this. It looks like it might be easy to fix, though?  I hope so :-)

I think this has come up on the mailing list 

here's the failure when you use scalac first:
```scala
  ~/newbug> cat J.java 
class J { static void foo() { } }
  ~/newbug> cat S.scala 
object S extends Application { J.foo() }
  ~/newbug> ~/scala/dists/latest/bin/scalac J.java S.scala
  ~/newbug> javac J.java
  ~/newbug> scala S
java.lang.NoClassDefFoundError: J$$
	at S$$.<init>(S.scala:1)
	at S$$.<clinit>(S.scala)
	at S.main(S.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at scala.tools.nsc.ObjectRunner$$$$anonfun$$run$$1.apply(ObjectRunner.scala:75)
	at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
	at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:161)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
```

and here's it succeeding when you use javac first instead and don't let scalac see the Java source:
```scala
  ~/newbug> rm *.class
  ~/newbug> javac J.java
  ~/newbug> ~/scala/dists/latest/bin/scalac S.scala       
  ~/newbug> scala S
```

I'm running r15754.

