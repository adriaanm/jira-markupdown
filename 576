I have not looked into it, but there appear to be two issues.  First is that the script runner puts code directly into a main() method, but a better way would be to put it inside an object.  That is, the currently generated code for a script is like this:
```scala
object Main {
  def main(args: Array[String]) {
    implicit def iterableWithSum(it: Iterable[Int]) = new { def sum = it.foldLeft(0)(_ + _) }
    println((1 to 10).sum)
  }
}
```
It would be better to put the script code inside an object, like this:
```scala
object Main {
  def main(args: Array[String]) {
    new AnyRef {
      implicit def iterableWithSum(it: Iterable[Int]) = new { def sum = it.foldLeft(0)(_ + _) }
      println((1 to 10).sum)
    }
  }
}
```
Something like that.  This simple change would solve other limitations with scripts, e.g. allowing overloaded methods and mutually recursive functions.  It should just be a matter of modifying ScriptRunner's preambleCode method and the "end" variable within wrappedScript.

The second issue, though, is that implicits might not be working when they are defined in the same block-local scope as the use of the method.  From my understanding of the spec, this should be allowed, but I admit I haven't thought about it much.
