Scalac 2.12.0 got an assertion failure compiling the following code snippet.
scalac version 2.9 is fine, but version 2.11 crashes.
The case is generated from an exsiting test program in the scala repository.
```scala
$ scalac -version
Scala compiler version 2.12.0-20161028-204919-0666377 -- Copyright 2002-2016, LAMP/EPFL and Lightbend, Inc.


$ scalac abc.scala
abc.scala:3: error: p is not an enclosing class
  protected[p] def f(x: Int = 1) = x
                   ^
abc.scala:4: error: p is not an enclosing class
  private[p] def g(x: Int = 1) = x
                 ^
abc.scala:8: error: method f in object O cannot be accessed in object g.O
 Access to protected method f not permitted because
 enclosing object Test in package g is not a subclass of
 object O in package g where target is defined
  O.f()
    ^
abc.scala:9: error: value f$default$1 is not a member of object g.O
  O.f$default$1
    ^
error: java.lang.AssertionError: assertion failed:
  value <error: method g>
     while compiling: abc.scala
        during phase: globalPhase=typer, enteringPhase=namer
     library version: version 2.12.0-20161028-204919-0666377
    compiler version: version 2.12.0-20161028-204919-0666377
  reconstructed args:

  last tree to typer: Ident(O)
       tree position: line 10 of abc.scala
            tree tpe: g.O.type
              symbol: object O in package g
   symbol definition: object O (a ModuleSymbol)
      symbol package: g
       symbol owners: object O
           call site: object O in package g in package g

== Source file context for tree position ==

     7   O.f()
     8   O.f$default$1
     9   O.g()
    10   O.g$default$1
    11   O.h()
    12   O.h$default$1
    13 }
	at scala.tools.nsc.Global.assert(Global.scala:229)
	at scala.tools.nsc.typechecker.Namers$Namer.$anonfun$addDefaultGetters$12(Namers.scala:1432)
	at scala.Option.getOrElse(Option.scala:121)
	at scala.tools.nsc.typechecker.Namers$Namer.$anonfun$addDefaultGetters$7(Namers.scala:1430)
	at scala.tools.nsc.typechecker.Namers$Namer.$anonfun$addDefaultGetters$7$adapted(Namers.scala:1377)
	at scala.reflect.internal.util.Collections.map2(Collections.scala:79)
(...)


$ cat abc.scala
package g
object O {
  protected[p] def f(x: Int = 1) = x
  private[p] def g(x: Int = 1) = x
  private def h(x: Int = 1) = x
}
object Test {
  O.f()
  O.f$default$1
  O.g()
  O.g$default$1
  O.h()
  O.h$default$1
}
```
