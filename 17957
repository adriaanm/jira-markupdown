{code}
object Test extends App	{
  object __match {
    def one[T](x: T): Option[T] = Some(x)
    def zero = None
    def guard[T](cond: Boolean, result: => T): Option[T] =
      if (cond) Some(result) else None
    def runOrElse[T, U](in: T)(matcher: T => Option[U]): U =
      matcher(in).get
  }

  class Rule[A,B](f: PartialFunction[A, B]) {
    def	unapply(x: A): Option[B] =
      if (f.isDefinedAt(x)) Some(f(x)) else None
  }
  def rule[A, B](f: PartialFunction[A, B]): Rule[A, B] = new Rule(f)
  def rulestr(f: PartialFunction[String, String]) = rule[String, String](f)

  lazy val Foo = rulestr {
    case "yo" => "yay"
  }

  lazy val Bar = rulestr {
    case Foo(Bar(x)) => x
    case x => x
  }
}
{code}

generates a compiler crash:
{noformat}
Exception in thread "main" java.lang.NullPointerException
	at scala.tools.nsc.typechecker.PatternMatching$MatchTranslation$ExtractorCallProd.rawSubPatTypes(PatternMatching.scala:732)
	at scala.tools.nsc.typechecker.PatternMatching$MatchTranslation$ExtractorCallProd.isSeq(PatternMatching.scala:731)
	at scala.tools.nsc.typechecker.PatternMatching$MatchTranslation$ExtractorCall.subPatTypes(PatternMatching.scala:641)
	at scala.tools.nsc.typechecker.PatternMatching$MatchTranslation$class.translateExtractorPattern$1(PatternMatching.scala:405)
	at scala.tools.nsc.typechecker.PatternMatching$MatchTranslation$class.translatePattern(PatternMatching.scala:474)
{noformat}

Because the return type is missing for Bar, the compiler doesn't do the unapply desugaring and the pattern matcher takes the wrong branch.
