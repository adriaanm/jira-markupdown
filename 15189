/*My English is not so good, forgive my expression */
The iterator method of Stream is defined in LinearSeqLike now. I think it should be override in class Stream to make it more lazy.
In my opinion, it should be something like following:
```scala
class Stream[A] {
   ...
  class LazyCell[T](st: => Stream[T]){ lazy val v = st }
  
  def iterator: Iterator[A] = new Iterator[A] {
    var these = new LazyCell(Stream.this)
    def hasNext: Boolean = !these.v.isEmpty
    def next: A = 
      if (hasNext) {
        val result = these.v.head; 
        these =new LazyCell(these.v.tail); 
	result
      } else Iterator.empty.next
    override def toList: List[A] = stream.toList
  }
}
```
