The following code prints "B" instead of the expected result "C":

{code}
object MatchTest {
  class A[T] { val op = null }
  class B extends A[Any]
  class C extends B

  def f(o: AnyRef) = o match {
    case a: A[_] if(a.op != null) => "with op"
    case c: C => "C"
    case b: B => "B"
  }

  def main(args: Array[String]) = println(f(new C))
}
{code}

Case "a" is never matched because the if() guard always fails but using the existential type A[_] in case a also causes the match for case c to fail. Removing the type parameter on A entirely or matching against A[Any] (which gets erased anyway) in case a results in the correct output "C".

This is with Scala 2.7.2RC3.
