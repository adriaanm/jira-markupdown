We actually just realized that the fix is problematic: depending on the order of typechecking, it allows using the synthetical getters and setters or not.

Example: the following compiles fine. But if you invert the order of the class definitions, it won't anymore ("getFld is not a member of A").
```scala
class A {
  @scala.reflect.BeanProperty val fld = 1
}

class B {
  def foo = (new A).getFld
}
```

So the fix will unfortunately not go into 2.7.2. You can still work around it by adding the getters and setters to your trait manually, right?
