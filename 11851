Lines within the REPL are desugared to members within a synthetic wrapper object. 
```scala
scala> val a: Int = a + 1 // show
object $read extends scala.AnyRef {
  def <init>() = {
    super.<init>;
    ()
  };
  object $iw extends scala.AnyRef {
    def <init>() = {
      super.<init>;
      ()
    };
    import $line3.$read.$iw.$iw.a;
    object $iw extends scala.AnyRef {
      def <init>() = {
        super.<init>;
        ()
      };
      val a: Int = a + 1
    }
  }
}
a: Int = 1
```

The compiler does not prevent forward references within template members, only within expressions in a block.

http://www.scala-lang.org/files/archive/spec/2.11/04-basic-declarations-and-definitions.html
```
The scope of a name introduced by a declaration or definition is the whole statement sequence containing the binding. However, there is a restriction on forward references in blocks: In a statement sequence s1…sn making up a block, if a simple name in si refers to an entity defined by sj where j≥i, then for all sk between and including si and sj,

 - sk cannot be a variable definition.
 - If sk is a value definition, it must be lazy.
```
