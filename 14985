In 2.8.0-Beta1 (and in SVN trunk),
the method `scala.actors.Futures.alarm` blocks forever. For example, consider the following interaction in the shell:
```scala
scala> import scala.actors.Futures.alarm
import scala.actors.Futures.alarm

scala> val a= alarm(1000)
a: scala.actors.Future[Nothing] = <function0>

scala> a()  // future is never set -> blocks forever
```
See also the attached file `alarm.scala`.

The source code for method alarm in file `scala.actors.Future.scala` is as follows:
```scala
103  def alarm(timespan: Long) = future {
104    Actor.reactWithin(timespan) {
105      case TIMEOUT => {}
106    }
107  }
```
The problem is that `reactWithin` never returns and thus the future is never set.
The issue is either because of the handling of non-returning methods (type `Nothing`) with respect to futures, or because of the particularity of `react`/`reactWithin`.

Assuming the latter, a possible fix involving one additional actor is as follows (see also attached file `new_alarm.scala`)):
```scala
object Futures {
  ...
  private case object Wakeup
  def alarm(timespan: Long) : Future[Unit] = future {
    val sleeper = Actor.actor {
      Actor.reactWithin(timespan) {
	case TIMEOUT => Actor.react { case Wakeup => Actor.reply }
      }
    }
    sleeper !? Wakeup
  }
  ...
```
The drawback is that it defines an additional actor and that the future is of type `Future[Unit]` rather than `Future[Nothing]`.

A possibly better fix could replace the additional sleeper actor by using continuations, but this makes sense only after they are integrated into the core language.
