Aside from the question of honouring uncheckedVariance in alias RHS, which can be done by preserving annotations through type maps as Paul's experiment has confirmed, we should also pause to ask the broader question: after the fix for scala/bug#6566, which restores variance checking of the RHS of type aliases, is checking expansions redundant or somehow still material to prevent unsoundness.
```
% cat sandbox/test.scala
trait C[-I] {
  type X = C[I]
  def f2(b: X): Unit
}
2.11.x /code/scala for v in 7 8 9 10 11; do version=2.$v; echo $version; ~/scala/$version/bin/scalac sandbox/test.scala; done
2.7
sandbox/test.scala:2: error: contravariant type I occurs in invariant position in type C[I] of type X
  type X = C[I]
       ^
one error found
2.8
sandbox/test.scala:3: error: contravariant type I occurs in covariant position in type C.this.X of value b
  def f2(b: X): Unit
         ^
one error found
2.9
sandbox/test.scala:3: error: contravariant type I occurs in covariant position in type C.this.X of value b
  def f2(b: X): Unit
         ^
one error found
2.10
sandbox/test.scala:3: error: contravariant type I occurs in covariant position in type C.this.X of value b
  def f2(b: X): Unit
         ^
one error found
2.11
sandbox/test.scala:2: error: contravariant type I occurs in invariant position in type C[I] of type X
  type X = C[I]
       ^
sandbox/test.scala:3: error: contravariant type I occurs in covariant position in type C.this.X of value b
  def f2(b: X): Unit
         ^
two errors found
```

If we omit the checks on the RHS because the alias is sufficiently private, we clearly **must** check expansions. For example, the following is unsound but was allowed in Scala 2.7:
```scala
trait C[-I] {
  private[this] type X = C[I]
  def f2(b: X): Unit
}
```

Intuitively, I think we only need to check in one place. But I'll give it some more thought.
