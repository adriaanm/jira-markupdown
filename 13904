Using 2.7.2, it is possible to compile the following sources:
```scala
import scala.util.parsing.combinator.RegexParsers

trait MyLexer extends RegexParsers {
  override protected val whiteSpace = """\s+|//.*$$"""r
}

object MyParser extends MyLexer {
  
}

object Driver {
  def main(args: Array[String]) {
    MyParser
  }
}
```

However, at runtime, executing Driver produces the following exception:
```scala
java.lang.ClassFormatError: Repetitive method name/signature in class file MyParser$$
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:675)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$$100(URLClassLoader.java:56)
	at java.net.URLClassLoader$$1.run(URLClassLoader.java:195)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:316)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:374)
	at Driver$$.main(test.scala:13)
	at Driver.main(test.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at scala.tools.nsc.ObjectRunner$$$$anonfun$$run$$1.apply(ObjectRunner.scala:75)
	at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
	at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:164)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
```

The problem is the whiteSpace member is duplicated within the MyParser$$ class (as shown by javap).

Scala 2.7.1 successfully compiles and runs the above.
