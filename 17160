When translating the scala macros Getting Started example
http://scalamacros.org/documentation/gettingstarted.html
in line
{noformat}
val stats = evals ++ refs.map(ref => c.reify(print(Expr(ref).eval)).tree)
{noformat}
into
{noformat}
val stats = evals ++ refs.map(ref => c.reify(print(c.Expr(ref).splice)).tree) 
{noformat} 

I got an error message:
{noformat}
Cannot materialize scala.this{scala.type}.Predef.print{(x: Any)Unit} 
(c.Expr{[T](tree: c.Tree)(implicit evidence$1: 
c.AbsTypeTag[T])c.Expr[T]} 
 [Nothing]{(tree: c.Tree)(implicit evidence$1: 
c.AbsTypeTag[Nothing])c.Expr[Nothing]}(ref{c.universe.Tree}){(implicit 
evidence$1: 
 c.AbsTypeTag[Nothing])c.Expr[Nothing]} 
(c.universe.AbsTypeTag.Nothing{c.universe.AbsTypeTag[Nothing]}) 
 {c.Expr[Nothing]}.splice{Nothing}){Unit} as { val $u: c.universe.type 
= c.universe{c.universe.type}; val $m: $u.Mirror = 
 c.mirror.asInstanceOf{[T0]=> T0}[$u.Mirror]{<null>}; $u.Expr.apply{[T] 
(mirror: scala.reflect.api.MirrorOf[$u.type], treec: 
 scala.reflect.base.TreeCreator)(implicit evidence$1: $u.AbsTypeTag[T]) 
$u.Expr[T]}[Unit]{(mirror: scala.reflect.api.MirrorOf[$u.type], 
treec: 
 scala.reflect.base.TreeCreator)(implicit evidence$1: 
$u.AbsTypeTag[Unit])$u.Expr[Unit]}($m{$u.Mirror}, { final class 
$treecreator2 extends 
 TreeCreator { def <init>(): $treecreator2 = 
{ $treecreator2.super{$treecreator2.super.type}.<init>{()scala.reflect.base.TÂ­reeCreator} 
() 
 {scala.reflect.base.TreeCreator}; (){Unit} }{Unit}; def apply[U >: 
Nothing <: scala.reflect.base.Universe with Singleton]($m$untyped: 
 MirrorOf[U]): U#Tree = { val $u: scala.reflect.api.Universe = $m 
$untyped.universe.asInstanceOf{[T0]=> T0}[Universe]{<null>}; val $m: 
 $u.Mirror = $m$untyped.asInstanceOf{[T0]=> T0}[$u.Mirror]{<null>}; 
applyImpl{<null>}[$u{$u.type}.type]{<null>}($m{$u.Mirror}) 
 {<null>}.asInstanceOf{<null>}[U#Tree]{<null>} }{<null>}; private def 
applyImpl[U >: Nothing <: scala.reflect.api.Universe with Singleton] 
 ($m$untyped: MirrorOf[U]): scala.reflect.base.Universe#Tree = { val 
$u: U = $m$untyped.universe{$m$untyped.universe.type}; val $m: 
 $u.Mirror = $m$untyped.asInstanceOf{[T0]=> T0}[$u.Mirror]{<null>}; 
$u.Apply{(sym: $u.Symbol, args: $u.Tree*)$u.Tree <and> => 
 $u.ApplyExtractor}($u.Select{$u.Select.type}($u.Select{$u.Select.type} 
($u.build.This{(sym: $u.Symbol)$u.Tree} 
 ($m.staticModule{(fullName: String)$u.ModuleSymbol} 
("scala"{String("scala")}) 
 {$u.ModuleSymbol}.asModuleSymbol.moduleClass{$u.Symbol}){$u.Tree}, 
$u.newTermName{(s: String)$u.TermName} 
 ("Predef"{String("Predef")}){$u.TermName}){<null>}, 
$u.newTermName{(s: String)$u.TermName}("print"{String("print")}) 
 {$u.TermName}){<null>}, scala.collection.immutable.List.apply{[A](xs: 
A*)List[A]}(c.Expr{[T](tree: c.Tree)(implicit evidence$1: 
 c.AbsTypeTag[T])c.Expr[T]}(ref{c.universe.Tree}){<null>} 
(Predef.this{scala.Predef.type}.implicitly{[T](implicit e: T)T}) 
{<null>}.in{<null>} 
 ($m{<null>}){<error>}.tree{<error>}){<null>}){<error>} }{<null>} }; 
new $treecreator2{$treecreator2}{()$treecreator2}(){$treecreator2} } 
 {<null>}){<null>}($u.TypeTag.apply{<null>}[Unit]{<null>}($m{<null>}, 
{ final class $typecreator4 extends TypeCreator { def <init>() = 
 { super{<null>}.<init>{<null>}(){<null>}; (){<null>} }{<null>}; def 
apply[U >: Nothing <: Universe with Singleton]($m$untyped: 
 MirrorOf[U]): U#Type = { val $u: U = $m$untyped.universe{<null>}; val 
$m: $u.Mirror = $m$untyped.asInstanceOf{<null>}[$u.Mirror] 
 {<null>}; $m.staticClass{<null>}("scala.Unit"{<null>}) 
{<null>}.asTypeSymbol.asTypeConstructor{<null>} }{<null>} }; new 
 $typecreator4{<null>}{<null>}(){<null>} }{<null>}){<null>}){<error>} } 
{<null>} because: scala.reflect.internal.Types$TypeError: Predef is 
 not an enclosing class 
{noformat}

Workaround is to hint the type inferencer explicitly with [String]:
change
{noformat}
c.Expr(ref).splice
{noformat}
into
{noformat}
c.Expr[String](ref).splice
{noformat}

see also:
http://groups.google.com/group/scala-user/browse_thread/thread/ca4e92ff977ec6a8

