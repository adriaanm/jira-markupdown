OK, sorry about that.

Jason, I do know the difference between mutable/immutable/don't-know.

My basic confusion here is the definition of toIndexedSeq; I missed that this is defined as returning a specifically immutable IndexedSeq. To my eyes, this is obviously wrong: If a WrappedArray or an ArrayBuffer is some type of IndexedSeq, then calling toIndexedSeq on it should do nothing. I understand from what Paul says that there is a historical inconsistency here, and that some may disagree with my assertion about to IndexedSeq.

I have to say, the very first time I encountered the aliasing of mutable/immutable/don't-know collections, as a long-time programmer my instinctive reaction was "this is ugly and is going to lead to problems". Aliasing like this is usually a bad idea as it encourages sloppy thinking and makes it easy to miss critical distinctions, as I did above. The fact that whoever designed the toSeq vs. toMap vs. toIndexedSeq got some of them wrong is a good demonstration of this.

I do know that the point of doing this was supposed to make it easier to convert code between mutable and immutable, but in reality

#This is going to lead to trouble when someone does it blindly without thinking of the consequences (e.g. race conditions coming from mutability);
#Search-and-replace is your friend;
#Aliasing in import statements is also your friend. This is the proper way to handle aliasing if you really want it.

