The issue here appears to be that there is a totally different bitmap layout if things are compiled with or without -Xcheckinit, and when code is compiled with -Xcheckinit it acts like everything else was as well.  Here is a diff of Global.scala compiled with and without -Xcheckinit, filtered to the lines mentioning bitmaps.
```scala
< const SI-127 = Asciz	bitmap$$4;
< const SI-128 = Asciz	bitmap$$5;
< const SI-141 = NameAndType	SI-128:SI-22;//  bitmap$$5:I
< const SI-142 = Field	SI-140.SI-141;	//  scala/tools/nsc/Global.bitmap$$5:I
< const SI-192 = Asciz	bitmap$$3;
< const SI-193 = NameAndType	SI-192:SI-22;//  bitmap$$3:I
< const SI-194 = Field	SI-191.SI-193;	//  scala/tools/nsc/symtab/SymbolTable.bitmap$$3:I
> const SI-127 = Asciz	bitmap$$6;
> const SI-128 = Asciz	bitmap$$priv$$0;
> const SI-129 = Asciz	bitmap$$7;
> const SI-142 = NameAndType	SI-129:SI-22;//  bitmap$$7:I
> const SI-143 = Field	SI-141.SI-142;	//  scala/tools/nsc/Global.bitmap$$7:I
> const SI-193 = NameAndType	SI-127:SI-22;//  bitmap$$6:I
> const SI-194 = Field	SI-141.SI-193;	//  scala/tools/nsc/Global.bitmap$$6:I
< const SI-606 = NameAndType	SI-127:SI-22;//  bitmap$$4:I
< const SI-607 = Field	SI-140.SI-606;	//  scala/tools/nsc/Global.bitmap$$4:I
< const SI-888 = Asciz	allocate bitmaps, translate lazy vals into lazified defs;
< const SI-889 = String	SI-888;	//  allocate bitmaps, translate lazy vals into lazified defs
```
Notice bitmap$$6 and bitmap$$7 only appear when compiled with -Xcheckinit.

So I think this brings us back around to the question of why Xcheckinit is sharing bitmaps with the lazy bits.

Here is a more minimized version.
```scala
import scala.tools.nsc._

object Test {
  class DryRun {
    val compiler = new Global(new Settings()) { 
      lazy val test1 = new AnyRef
    }
  }
  
  def main(args: Array[String]) {
    new DryRun().compiler.test1
  }
}
```
