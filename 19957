When you have code that results in a structural type member, you get the below warning:

{noformat}reflective access of structural type member method foo should be enabled
[warn] by making the implicit value scala.language.reflectiveCalls visible.
[warn] This can be achieved by adding the import clause 'import scala.language.reflectiveCalls'
[warn] or by setting the compiler option -language:reflectiveCalls.
[warn] See the Scala docs for value scala.language.reflectiveCalls for a discussion
[warn] why the feature should be explicitly enabled.{noformat}

Specifically take note of :
{quote}See the Scala docs for value scala.language.reflectiveCalls for a discussion{quote}

The problem is that if you go to [the reflectiveCalls trait](http://www.scala-lang.org/api/current/index.html#scala.languageFeature$$reflectiveCalls), there is no documentation. Whereas if you go to [the language object](http://www.scala-lang.org/api/current/index.html#scala.language$) and look at it's reflectiveCalls val, then you will see the documentation. 

The natural inclination from the above warning is to review the trait, so either the trait needs to contain the documentation, or the warning needs to be made more clear as to the location of the documentation.
