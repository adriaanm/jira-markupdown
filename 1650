+1

Some of us have the discipline to respect warnings for what they are and address them from code wherever possible.  The reality is that this is *not* always possible.  Projects generally have to consume external code either in the form of an API that they integrate with or third-party libraries that they consume, and where these break the rules (such as by marking a class as deprecated without providing a replacement yet or exposing raw types), your own code is forced to break them as well to interact with them.

Not offering any way to acknowledge the situation and suppress it from the output seriously harms the signal-to-noise ratio, with the result that developers are eventually forced to ignore *all* warnings completely for their own sanity, because they have no way to distinguish warnings that are new and should be fixed immediately from those that are known and *cannot* currently be addressed.
