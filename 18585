```scala
object Test {
  import MockScalaz.{ApplicativeIdV, ToArrowOps, ToBifoldableOps}
  def functor[F[_]](f: F[_])(implicit X: DummyImplicit) = ???
  val f: Any => Any = ???
  functor(f)
}

object MockScalaz {
  trait ApplicativeIdV[A]
  trait Arrow[F[_, _]]
  trait ArrowOps[F[_, _], A, B]
  trait Bifoldable[F[_, _]]
  trait BifoldableOps[F[_, _], A, B]

  implicit def ApplicativeIdV[A](v: => A): ApplicativeIdV[A] = ???
  implicit def ToArrowOps[F[_, _], A, B](v: F[A,B])(implicit F0: Arrow[F]): ArrowOps[F,A,B] = ???
  implicit def ToBifoldableOps[F[_, _], A, B](v: F[A,B])(implicit F0: Bifoldable[F]): BifoldableOps[F,A,B] = ???
}
```
```
~/code/scala scalac-hash ef04619~1 /Users/jason/code/scratch1/src/main/scala/test.scala
[info] ef04619~1 => /Users/jason/usr/scala-v2.10.1-231-gfc65423
error: type mismatch;
 found   : Any => Any
 required: ?F forSome { type _$1 }
Note that implicit conversions are not applicable because they are ambiguous:
 both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]
 and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
 are possible conversion functions from Any => Any to ?F forSome { type _$1 }
error: type mismatch;
 found   : Any => Any
 required: ?F forSome { type _$1 }
Note that implicit conversions are not applicable because they are ambiguous:
 both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]
 and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
 are possible conversion functions from Any => Any to ?F forSome { type _$1 }
error: type mismatch;
 found   : Any => Any
 required: ?F forSome { type _$1 }
Note that implicit conversions are not applicable because they are ambiguous:
 both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]
 and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
 are possible conversion functions from Any => Any to ?F forSome { type _$1 }
error: type mismatch;
 found   : Any => Any
 required: ?F forSome { type _$1 }
Note that implicit conversions are not applicable because they are ambiguous:
 both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]
 and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
 are possible conversion functions from Any => Any to ?F forSome { type _$1 }
error: type mismatch;
 found   : Any => Any
 required: ?F forSome { type _$1 }
Note that implicit conversions are not applicable because they are ambiguous:
 both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]
 and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
 are possible conversion functions from Any => Any to ?F forSome { type _$1 }
error: type mismatch;
 found   : Any => Any
 required: ?F forSome { type _$1 }
Note that implicit conversions are not applicable because they are ambiguous:
 both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]
 and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
 are possible conversion functions from Any => Any to ?F forSome { type _$1 }
error: type mismatch;
 found   : Any => Any
 required: ?F forSome { type _$1 }
Note that implicit conversions are not applicable because they are ambiguous:
 both method any2Ensuring in object Predef of type [A](x: A)Ensuring[A]
 and method any2ArrowAssoc in object Predef of type [A](x: A)ArrowAssoc[A]
 are possible conversion functions from Any => Any to ?F forSome { type _$1 }
7 errors found
topic/by-name-revert ~/code/scala scalac-hash ef04619 /Users/jason/code/scratch1/src/main/scala/test.scala
[info] ef04619 => /Users/jason/usr/scala-v2.10.1-232-gef04619
/Users/jason/code/scratch1/src/main/scala/test.scala:5: error: erroneous or inaccessible type
  functor(f)
         ^
one error found
```

Regressed in https://github.com/scala/scala/commit/ef04619
