This is intentional. If you run scala with -Xlog-implicits, it will explain the reason:

{code}
scala> { class B(b:Int); typeTag[B] }
materializing requested reflect.runtime.universe.type.TypeTag[B] using `package`.this.materializeTypeTag[B](scala.reflect.runtime.`package`.universe)
<console>:30: `package`.this.materializeTypeTag[B](scala.reflect.runtime.`package`.universe) is not a valid implicit value for reflect.runtime.universe.TypeTag[B] because:
failed to typecheck the materialized tag: 
cannot create a TypeTag referring to local class B
              { class B(b:Int); typeTag[B] }
                                       ^
<console>:30: error: No TypeTag available for B
              { class B(b:Int); typeTag[B] }
                                       ^

scala> { class B(b:Int); weakTypeTag[B] }
res0: reflect.runtime.universe.WeakTypeTag[_ <: Object] = WeakTypeTag[B]
{code}
