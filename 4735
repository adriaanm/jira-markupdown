I'm having this problem now with a project, too (Scala 2.10.1). It doesn't seem to have to do anything with the actual code where it crashes. For example I can reduce the file to
```scala
package bar

object Foo {
  new Array[Byte](33)
}
```

Leading to
```scala
exception when typing new Array[Byte]/class scala.reflect.internal.Trees$New
illegal cyclic reference involving class Array in file /Users/hhrutz/Documents/devel/Mellite/src/main/scala/de/sciss/mellite/gui/impl/InterpreterFrameImpl.scala
scala.reflect.internal.Symbols$CyclicReference: illegal cyclic reference involving class Array
	at scala.reflect.internal.Symbols$TypeSymbol.tpe(Symbols.scala:2759)
...
[error] 
[error]   last tree to typer: Literal(Constant(33))
[error]               symbol: null
[error]    symbol definition: null
[error]        symbol owners: 
[error]       context owners: value <local Foo> -> object Foo -> package bar
[error] 
[error] == Enclosing template or block ==
[error] 
[error] Template( // val <local Foo>: <notype> in object Foo
[error]   "java.lang.Object" // parents
[error]   ValDef(
[error]     private
[error]     "_"
[error]     <tpt>
[error]     <empty>
[error]   )
[error]   // 2 statements
[error]   DefDef( // def <init>(): bar.Foo.type in object Foo
[error]     <method>
[error]     "<init>"
[error]     []
[error]     List(Nil)
[error]     <tpt> // tree.tpe=bar.Foo.type
[error]     Block( // tree.tpe=Unit
[error]       Apply( // def <init>(): Object in class Object, tree.tpe=Object
[error]         Foo.super."<init>" // def <init>(): Object in class Object, tree.tpe=()Object
[error]         Nil
[error]       )
[error]       ()
[error]     )
[error]   )
[error]   Apply( // sym= <error> illegal cyclic inheritance involving class Array
[error]     "<init>" // sym= <error> illegal cyclic inheritance involving class Array
[error]     33
[error]   )
[error] )
[error] 
[error] unrecoverable error
[error] Total time: 1 s, completed May 15, 2013 9:01:51 AM
```

Then of course, if I compile that above example alone, there is no problem, only in the context of my project (even if this is the only file being compiled) :-/

It seems to have to do with compilation order, because once I made that crash disappear by changing things (factoring out a method for example), it re-appeared soon after even though I didn't touch that file anymore.
