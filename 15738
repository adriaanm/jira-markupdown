Sorry I'm only discovering this now, although it's improbable that I found it at all as I wasn't really looking for regressions.

{code}
// J.java
package test;

public class J {
  int f1() { return 5; }
  protected int f2() { return 5; }
}

// S.scala
package test
package nest

class S1 {
  def g1(x: J) = x.f1()
  def g2(x: J) = x.f2()
}

class S2 extends J {
  def g1(x: J) = x.f1()
  def g2(x: J) = x.f2()
}
{code}

{code}
// 2.8.0 compiles as it should
% scalac28 -d . J.java S.scala

// 2.8.1RC3 does not: all four variations excluded!
% rcscalac J.java S.scala 
S.scala:5: error: method f1 cannot be accessed in test.J
  def g1(x: J) = x.f1()
                   ^
S.scala:6: error: method f2 cannot be accessed in test.J
  def g2(x: J) = x.f2()
                   ^
S.scala:10: error: method f1 cannot be accessed in test.J
  def g1(x: J) = x.f1()
                   ^
S.scala:11: error: method f2 cannot be accessed in test.J
  def g2(x: J) = x.f2()
                   ^
four errors found

// same result compiling against bytecode
% rcscalac -cp . -d . S.scala 
S.scala:5: error: method f1 cannot be accessed in test.J
  def g1(x: J) = x.f1()
                   ^
S.scala:6: error: method f2 cannot be accessed in test.J
  def g2(x: J) = x.f2()
                   ^
S.scala:10: error: method f1 cannot be accessed in test.J
  def g1(x: J) = x.f1()
                   ^
S.scala:11: error: method f2 cannot be accessed in test.J
  def g2(x: J) = x.f2()
                   ^
four errors found
% rcscalac -version
Scala compiler version 2.8.1.RC3 -- Copyright 2002-2010, LAMP/EPFL
{code}
Regression was in RC1 and RC2 as well.
