Actually, what I said is a little imprecise:

type inference&implicit search yields:
{code}
    println("A: " + f[A](a)(xa).value)
    println("B: " + f[B](b)(xa).value)
{code}

but that's what's expected because `xa` is the value with the most specific type: `X[A]`, as  `X[A] <: X[B]` (since `B <: A` and `X` is contravariant in its first type argument)
