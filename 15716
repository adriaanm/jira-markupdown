Given the following class:
```scala
object DO {
  class Extras { }
  object Extras { val defaultValue = new Extras }

  def m1(str: String, extraStuff: Extras = Extras.defaultValue): Int = str.length
  def m1(i: Int, extraStuff: Extras = Extras.defaultValue): Int = 2 * i

  def main(args: Array[String]): Unit = {
    val m1s = m1("foo")
    val m1i = m1(42)
  }
}
```
Someone asked me why that call was ambiguous, and I said "why does it even compile?" and indeed, it doesn't.  If you comment out main, you get the message you should get:
```scala
1008.scala:1: error: in object DO, multiple overloaded alternatives of method m1 define default arguments.
object DO {
       ^
one error found
```
However as given, you get this message, which if you are not already aware of the restrictions regarding overloading and default arguments, is very misleading:
```scala
1008.scala:9: error: ambiguous reference to overloaded definition,
both method m1$$default$$2 in object DO of type => DO.Extras
and  method m1$$default$$2 in object DO of type => DO.Extras
match expected type DO.Extras
    val m1s = m1("foo")
              ^
1008.scala:10: error: ambiguous reference to overloaded definition,
both method m1$$default$$2 in object DO of type => DO.Extras
and  method m1$$default$$2 in object DO of type => DO.Extras
match expected type DO.Extras
    val m1i = m1(42)
              ^
two errors found
```
If the ordering of the checks must remain, I think it should go looking for whether the overload list is valid.
