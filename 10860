This is related to fresh names. See https://github.com/scala/scala/commit/47d1fb1#diff-892d58c3587ea926d0bce6d7d53f16c6R34
```
% ack 'fresh' --scala
macros/src/main/scala/spire/macros/Syntax.scala
10:  def name(s: String) = newTermName(c.fresh(s + "$"))
ticket/8425 ~/code/spire ack '"index' --scala
core/src/main/scala/spire/util/Pack.scala
175:          c.abort(c.enclosingPosition, "index outside of 0-3")
197:          c.abort(c.enclosingPosition, "index outside of 0-7")

macros/src/main/scala/spire/macros/Syntax.scala
85:    val index = util.name("index")
136:      util.names("range", "index", "end", "limit", "step")
ticket/8425 ~/code/spire ack 'fresh' --scala
macros/src/main/scala/spire/macros/Syntax.scala
10:  def name(s: String) = newTermName(c.fresh(s + "$"))
```

Now we helpfully add a second '$' in addition to the one added by Spire. The '$$' looks like an expanded name (ie, one that has the FQCN prepended to make it unique when we are forced to make something Scala-private JVM public).

The `Constructors` phase uses `unexpandedName` which goes from `index$$macro$18$1` to `macro$18$1`:
```scala
    // The constructor parameter corresponding to an accessor
    def parameter(acc: Symbol): Symbol = parameterNamed(acc.unexpandedName.getterName)
```

That doesn't exist in the list of constructor parameters.

The error message is confusing because the same un-expansion is happening somewhere in `Symbol#toString`.

I suggest that fresh-name generation should not add a '$' if the user provided prefix already ends in '$'.
