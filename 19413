In the following code, which compiles successfully in 2.11.2 but not in 2.11.4, the definitions run2 and run3 fail to compile with the type errors that follow.
```scala
package test.nestedcov

sealed abstract class Outer[+A]
case class Let[+A](expr: Outer[Inner[A]]) extends Outer[A]

sealed abstract class Inner[+A]

sealed abstract class Outer2[+A, +B]
case class Let2[+A](expr: Outer2[Inner2[A], A]) extends Outer2[A, A]

sealed abstract class Inner2[+A]

sealed abstract class Outer3[+A, +B]
case class Let3[+A](expr: Outer3[A, A]) extends Outer3[A, A]

object NestedCov {
  def run[A](nc: Outer[A]) = nc match {
    case Let(expr) =>
      expr : Outer[Inner[A]]
  }

  def run2[A](nc: Outer2[A, A]) = nc match {
    case Let2(expr) =>
      expr : Outer2[Inner2[A], A]
  }

  def run3[A](nc: Outer3[A, A]) = nc match {
    case Let3(expr) =>
      expr : Outer3[A, A]
  }
}
```

Failing with
```scala
NestedCov.scala:22: error during expansion of this match (this is a scalac bug).
The underlying error was: type mismatch;
 found   : test.nestedcov.Outer2[test.nestedcov.Inner2[A with A],A with A]
 required: test.nestedcov.Outer2[test.nestedcov.Inner2[?A3 with ?A2],?A3 with ?A2] where type ?A2 <: A (this is a GADT skolem), type ?A3 <: A (this is a GADT skolem)
  def run2[A](nc: Outer2[A, A]) = nc match {
                                     ^
NestedCov.scala:27: error during expansion of this match (this is a scalac bug).
The underlying error was: type mismatch;
 found   : test.nestedcov.Outer3[A with A,A with A]
 required: test.nestedcov.Outer3[?A5 with ?A4,?A5 with ?A4] where type ?A4 <: A (this is a GADT skolem), type ?A5 <: A (this is a GADT skolem)
  def run3[A](nc: Outer3[A, A]) = nc match {
                                     ^
two errors found
```
