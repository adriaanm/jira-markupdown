Traits compiled with the Toolbox API are difficult to access (typeOf errors) and are separated from their implementations
```
    scala> import scala.reflect.runtime.universe._
    import scala.reflect.runtime.universe._

    scala> import scala.tools.reflect.ToolBox
    import scala.tools.reflect.ToolBox

    scala> val tb = scala.reflect.runtime.currentMirror.mkToolBox()
    tb: scala.tools.reflect.ToolBox[reflect.runtime.universe.type] = scala.tools.reflect.ToolBoxFactory$ToolBoxImpl@7469d79a

    scala> tb.eval(tb.parse("trait T; scala.reflect.runtime.universe.typeOf[T]"))
    scala.tools.reflect.ToolBoxError: reflective compilation has failed:

    No TypeTag available for T
    not enough arguments for method typeOf: (implicit ttag: reflect.runtime.universe.TypeTag[T])reflect.runtime.universe.Type.
    Unspecified value parameter ttag.
    /*stack trace*/

    scala> val mirror = scala.reflect.runtime.currentMirror

    scala> val clazz = tb.eval(tb.parse("trait T{def m = 0}; classOf[T]")).asInstanceOf[Class[_]]
    clazz: Class[_] = interface __wrapper$5$36e5027b48a44570a47be32d536aa67d.__wrapper$5$36e5027b48a44570a47be32d536aa67d$T$1
    scala> val tpe = mirror.classSymbol(clazz)
    tpe: reflect.runtime.universe.ClassSymbol = trait T$1

    scala> val tree = ClassDef(Modifiers(), "C", List(), Template(
         | List(Ident(tpe)),
         | emptyValDef,
         | List()))
    tree: reflect.runtime.universe.ClassDef = class C extends T$1

    scala> tb.eval(tree)
    scala.tools.reflect.ToolBoxError: reflective compilation has failed:

    class C needs to be abstract, since method m in trait T$1 of type ()Int is not defined
    /*stack trace*/
```
The primary issue is "class C needs to be abstract", the implementation is lost

The secondary issue is typeOf failing to find implicit typetags.

Disabling wrapping should fix the primary issue and possibly the secondary. It would also make for cleaner stacks and class names

More context can be found at http://stackoverflow.com/q/17019934/2469869
