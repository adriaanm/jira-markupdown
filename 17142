There is no way to compose an Ordering, given 2 simpler orderings.

For example:

{code}
case class Pair(x: Int, y: Int)
{code}

it would be useful to be able to do:

{code}
implicit val pairOrdering = Ordering.by[Pair, Int](_.x).compose[Pair, Int](Ordering.by[Pair, Int](_.y))
{code}

where the second ordering is triggered only if the first one returns `0`.
