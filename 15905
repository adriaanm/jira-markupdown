= problem =

given:
{code}
  class A(byName: => Unit)
{code}

this:
{code}
  object B extends A ( { 
    // codeblock
  } )
{code} 

should be made expressable without the parentheses around the single constructor argument:

{code}
  object B extends A { 
    // codeblock
  }
{code} 

... just as for single argument method/function invocations, e.g. Actor.act { /* do something */ } instead of Actor.act ({ /* do something */ }).


This would at least facilitate succinct usage of a robust implementation of an Application base class (replacing the current fragile Application trait, read its API). This implementation:

{code}
class RobustApplication(block: => Unit) {
  def main(args: Array[String]) { block } 
}
{code}

can now only be used using the ugly syntax:

{code}
object MyApp extends RobustApplication ( {

  // (my code)

} )
{code}

whereas I would desire the succinct syntax (without the parens):

{code}
object MyApp extends RobustApplication {

  // (my code)

}
{code}

This to improve further on the (pretty good) DSL qualities of Scala.

I am basing this on a real-world problem: I would want to offer my DSL end users the following succinct paradigm to create an application using my DSL. (Yes, it's a stateful DSL, full with graphics code, that's why I inherit instead of import object members.)

{code}
import mydsl.DSLApplication
// in which DSLApplication extends RobustApplication

object TheirApp extends DSLApplication {

  // (their code)

} // look, no parens!
{code}

as said, I now have to let them write:

{code}
object TheirApp extends DSLApplication ({

  // (their code)

}) // paren/brace combo is ugly and complicates API/DSL learning for non-advanced programmers.
{code}

= analysis = 

The constructor invocation syntax currently is (unnecessarily?) limited compared to the function application syntax, the latter containing just enough (plus repeated parameters as an extra) to solve the 'problem'.

The two in comparison:

_(From Scala Reference 2.8)_
{code}
5.1.1 Constructor Invocations

  Syntax:
    Constr ::= AnnotType {‘(’ [Exprs] ‘)’}
{code}

{code}
6.6 Function Applications

  Syntax:
    SimpleExpr    ::= SimpleExpr1 ArgumentExprs
    ArgumentExprs ::= 
            ‘(’ [Exprs] ‘)’
            | ‘(’ [Exprs ‘,’] PostfixExpr ‘:’ ‘_’ ‘*’ ’)’
            | [nl] BlockExpr  <== This one for constructors too plz!
    Exprs ::= Expr {‘,’ Expr} 
{code}

= enhancement recommendation =
Allow to omit parentheses around block expression for a constructor-invocation parameter-list with single by-name parameter, analog to function application.

In short:

Why not make constructor-invocation syntax equivalent to function application, something like:

{code}
Proposed constructor-invocation syntax:
    Constr ::= AnnotType [ArgumentExprs]
{code}

or at least support the no-parens block expression:

{code}
    Constr ::= AnnotType {‘(’ [Exprs] ‘)’ | [nl] BlockExpr} 
{code}
