Three methods I have found very handy in C# are String.Trim(char[] chars), String.TrimEnd(), String.TrimEnd(char[] chars), and same for TrimStart. Without parameters, they remove spaces, tabs, and whatnot. The character array is a list of characters to use instead of the standard whitespace characters, and on occasion could be useful for pretty much any character.

It would be quite nice to have these in Scala. You can do myString.dropWhile(c => Array(etc).contains(c)) for TrimStart (or "_ == 'x'" for just one character), but there's no easy way to do it for the end. Plus, the dropWhile technique isn't quite obvious, and can't easily default to just whitespace. And perhaps the character array could even be changed to a string array. And, of course, it should accept other collection types.

Obviously you can write your own implicit wrappers. But I think these deserve inclusion in the standard library. They're standard in *many* other languages, and I think scala has a general philosophy of offering lots of helper methods, right? There are other convenience methods from C# that I miss, and I might make more tickets for them as I come across them.

Sorry if this is a duplicate. I tried searching, but the search interface in Trac isn't very good.
