Normally, with any quoting:
```scala
suend.scala:5: error: unclosed multi-line string literal
  Console println ("""\u001A""" map (_.toInt))
                   ^
suend.scala:5: error: illegal character
  Console println ("""\u001A""" map (_.toInt))
                           ^
```
or
```scala
suend.scala:6: error: illegal character
  Console println ("\u001A" map (_.toInt))
                         ^
```
And for example,
```scala
suend.scala:5: error: unclosed comment
  /* \u001a */
  ^
```
The behavior of SU (substitute for a bad char) kind of explains
```scala
      case SU => // strangely enough, Character.isUnicodeIdentifierPart(SU) returns true!
        finishNamed()
```
that is, because or despite the fact that
```scala
Character.isIdentifierIgnorable(SU)
```
Scala balks at the interloper.

If a fellow in a mask showed up in your room, would you say, "Oh, he might be Zorro or maybe Batman, I mustn't kick him out!"

Or perhaps, because he is ignorable, you settle deeper into your armchair and go on reading your novel.

This may not be something to advertize, but a workaround is to use interpolation, where scanning is subtly different because, you know, it's different code:
```scala
scala> val x = s"""\u001A"""
x: String = ?
```
