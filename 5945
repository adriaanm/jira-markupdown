This is hard to fix, because the Scala compiler considers all static members of `A` as part of a (fictive) companion object `A`. Adding a field called `A` makes the definition ambiguous. Even if you compile this with javac first, you won't be able to access members of A from Scala. For instance:

{code}

public class Fisk {
    public static class A {
        public static void foo() {
            System.out.println("foo");
        }

        public int bar = 10;
    }
    public static A A = new A();

    public static void test() {
        int x = Fisk.A.bar;
        Fisk.A.foo();
    }
}
{code}

{code}
class Foo {
  Fisk.A.bar
  Fisk.A.foo()
}
{code}

you get:

{code}
isk.scala:2: error: ambiguous reference to overloaded definition,
both variable A in object Fisk of type Fisk.A
and  object A in object Fisk of type object Fisk.A
match expected type ?
  Fisk.A.bar
       ^
Fisk.scala:3: error: ambiguous reference to overloaded definition,
both variable A in object Fisk of type Fisk.A
and  object A in object Fisk of type object Fisk.A
match expected type ?
  Fisk.A.foo()
       ^
two errors found
]}}
