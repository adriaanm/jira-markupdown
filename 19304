The **copy method is not generated** for this example case class and its explicit companion object:
```scala
object A {
  def apply(i: Int, j: Int): A =
    new A(i, j) {}
}
abstract case class A private[A] (i: Int, j: Int)
```

According to the [The Scala Language Specification 2.9](http://www.scala-lang.org/docu/files/ScalaReference.pdf) in section 5.2.3:
```
A method named copy is implicitly added to every case class unless the class already has a member (directly defined or inherited) with that name, or the class has a repeated parameter. The method is defined as follows:
```
```scala
def copy[tps](ps'1)...(ps'n): c[tps] = new c[Ts](xs1)...(xsn) 
```

Since no explicit copy method is defined for the case class, then the compiler generated copy method should exist, right? The specification definition doesn't clarify what to do for the context where the case class has been declared abstract.

Of course, having the compiler blindly generate/implement the copy method as defined in the spec would result in failed compilation as the new operator doesn't exist due to the case class being declared as abstract.

Here are the possible resolution scenarios I can see (listed in least amount of effort to implement order):
- Update the specification document to cover NOT generating the copy method if the case class is declared abstract
- Update the specification document to cover using the empty curly braces when generating/implementing the copy method if the case class is declared abstract. And altering the compiler implementation to match the specification update.
- Update the specification document to cover using the apply method if defined in the (implicit/explicit) case class companion object. When the apply method is not defined, falling back to new operator if the class is not marked abstract. And if the case class has no apply method and is marked abstract, then falling back to not generating the copy implementation. And altering the compiler implementation to match the specification update.

While it is the most work, I strongly prefer the third solution as it follows the principle of "least surprise" while also maximizing what I personally sense to be the core values behind using the case class model.

Whatever the choice, the specification document needs to be altered to cover this undefined context.
