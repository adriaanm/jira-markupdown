I'd like to suggest adding a "`replace`" method to `Regex.Match`, so that a string replacement can be done without having to re-match -- which might even be impossible when iterating over matches.

Here is an example of usage -- a snippet of code that I have adapted to make use of it. The original can be found at http://speaking-my-language.blogspot.com/2009/12/string-interpolation-in-scala.html.
```scala
trait InterpolationContext {
  class InterpolatedString(val s: String) {

    def i = interpolate(s)
  }

  implicit def str2interp(s: String) = new InterpolatedString(s)

  def interpolate(s: String) = {
    var result = ""
    for (m <- "\\$\\{(.+?)\\}".r.findAllIn(s).matchData) {
      val matchString = m.matched
      var identifier = m.group(1)
      try {
        val method = this.getClass.getMethod(identifier)
        result = m.replace(method.invoke(this).toString)
      } catch {
        case _: NoSuchMethodException =>
      }
    }
    if (result.isEmpty) s else result
  }
}

object Test extends InterpolationContext {
  val a = "3"
  def main(args: Array[String]) {
    println("expanded: ${a}; not expanded: ${b}; more text".i)
  }
}
```

I'm attaching a possible implementation of such feature, which also adds a "`replaced`" method which returns, at any time, the present replacement string.
