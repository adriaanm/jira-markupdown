The following code compiles:
{noformat}
abstract class Power[G <: Global](intp: IMain) {
  val global: G
}
object Power {
  def apply[G <: Global](intp: IMain { val global: G }) =
    new Power[G](intp) { val global: G = intp.global }
}
{noformat}
This variation, differing only by "val intp: Main" instead of "intp: Main", fails:
{noformat}
abstract class Power2[G <: Global](val intp: IMain) {
  val global: G
}
object Power2 {
  def apply[G <: Global](intp: IMain { val global: G }) =
    new Power2[G](intp) { val global: G = intp.global }
}
// error: type mismatch;
//  found   : this.intp.global.type (with underlying type Global)
//  required: G
//     new Power2[G](intp) { val global: G = intp.global }
//                                                ^
// one error found
{noformat}
As evidence, should any be needed, that there is no fundamental reason for it, this compiles:
{noformat}
abstract class Power3[G <: Global](intp: IMain) {
  val global: G
  val intp2 = intp
}
object Power3 {
  def apply[G <: Global](intp: IMain { val global: G }) =
    new Power3[G](intp) { val global: G = intp.global }
}
{noformat}
