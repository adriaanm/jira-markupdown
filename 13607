Attached file causes a compiler boom. If the method is made non-final (and thus the tail recursion optimisation doesn't fire) it compiles without complaint. Stack trace as follows:

{code}
scala.tools.nsc.symtab.Types$$TypeError: type mismatch;
 found   : Foo[V]
 required: Foo[T]
        at scala.tools.nsc.typechecker.Contexts$$Context.error(Contexts.scala:350)
        at scala.tools.nsc.typechecker.Infer$$Inferencer.error(Infer.scala:256)
        at scala.tools.nsc.typechecker.Infer$$Inferencer.typeError(Infer.scala:266)
        at scala.tools.nsc.typechecker.Infer$$Inferencer.typeErrorTree(Infer.scala:272)
        at scala.tools.nsc.typechecker.Typers$$Typer.adapt(Typers.scala:813)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3233)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedArg(Typers.scala:1591)
        at scala.tools.nsc.typechecker.Typers$$Typer$$$$anonfun$$typedArgs$$2.apply(Typers.scala:1607)
        at scala.tools.nsc.typechecker.Typers$$Typer$$$$anonfun$$typedArgs$$2.apply(Typers.scala:1607)
        at scala.List$$.map2(List.scala:326)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedArgs(Typers.scala:1607)
        at scala.tools.nsc.typechecker.Typers$$Typer.doTypedApply(Typers.scala:1691)
        at scala.tools.nsc.typechecker.Typers$$Typer.typedApply$$1(Typers.scala:2538)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed1(Typers.scala:3125)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3228)
        at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3265)
        at scala.tools.nsc.transform.TailCalls$$TailCallElimination.rewriteTailCall(TailCalls.scala:308)
        at scala.tools.nsc.transform.TailCalls$$TailCallElimination.transform(TailCalls.scala:257)
        at scala.tools.nsc.transform.TailCalls$$TailCallElimination.transform(TailCalls.scala:144)
        at scala.tools.nsc.transform.TailCalls$$TailCallElimination.transform(TailCalls.scala:173)
        at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transformStats$$1.apply(Trees.scala:1403)
        at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transformStats$$1.apply(Trees.scala:1401)
        at scala.List$$.loop$$1(List.scala:293)
        at scala.List$$.mapConserve(List.scala:310)
        at scala.tools.nsc.ast.Trees$$Transformer.transformStats(Trees.scala:1401)
        at scala.tools.nsc.ast.Trees$$Transformer.transform(Trees.scala:1309)
        at scala.tools.nsc.transform.TailCalls$$TailCallElimination.transform(TailCalls.scala:210)
        at scala.tools.nsc.ast.Trees$$Transformer.transformTemplate(Trees.scala:1387)
        at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transform$$2.apply(Trees.scala:1281)
        at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transform$$2.apply(Trees.scala:1281)
        at scala.tools.nsc.ast.Trees$$Transformer.atOwner(Trees.scala:1409)
        at scala.tools.nsc.ast.Trees$$Transformer.transform(Trees.scala:1280)
        at scala.tools.nsc.transform.TailCalls$$TailCallElimination.transform(TailCalls.scala:202)
        at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transformStats$$1.apply(Trees.scala:1403)
        at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transformStats$$1.apply(Trees.scala:1401)
        at scala.List$$.loop$$1(List.scala:293)
        at scala.List$$.mapConserve(List.scala:310)
        at scala.tools.nsc.ast.Trees$$Transformer.transformStats(Trees.scala:1401)
        at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transform$$1.apply(Trees.scala:1277)
        at scala.tools.nsc.ast.Trees$$Transformer$$$$anonfun$$transform$$1.apply(Trees.scala:1277)
        at scala.tools.nsc.ast.Trees$$Transformer.atOwner(Trees.scala:1409)
        at scala.tools.nsc.ast.Trees$$Transformer.transform(Trees.scala:1276)
        at scala.tools.nsc.transform.TailCalls$$TailCallElimination.transform(TailCalls.scala:198)
        at scala.tools.nsc.ast.Trees$$Transformer.transformUnit(Trees.scala:1404)
        at scala.tools.nsc.transform.TailCalls$$Phase.apply(TailCalls.scala:37)
        at scala.tools.nsc.Global$$GlobalPhase.applyPhase(Global.scala:257)
        at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:243)
        at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:243)
        at scala.Iterator$$class.foreach(Iterator.scala:395)
        at scala.collection.mutable.ListBuffer$$$$anon$$1.foreach(ListBuffer.scala:266)
        at scala.tools.nsc.Global$$GlobalPhase.run(Global.scala:243)
        at scala.tools.nsc.Global$$Run.compileSources(Global.scala:555)
        at scala.tools.nsc.Global$$Run.compile(Global.scala:640)
        at scala.tools.nsc.StandardCompileServer.session(CompileServer.scala:137)
        at scala.tools.util.SocketServer$$$$anonfun$$run$$1.apply(SocketServer.scala:69)
        at scala.tools.util.SocketServer$$$$anonfun$$run$$1.apply(SocketServer.scala:69)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:73)
        at scala.Console$$.withOut(Console.scala:84)
        at scala.Console$$.withOut(Console.scala:102)
        at scala.tools.util.SocketServer.run(SocketServer.scala:68)
        at scala.tools.nsc.StandardCompileServer.main(CompileServer.scala:179)
        at scala.tools.nsc.CompileServer.main(CompileServer.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at scala.tools.nsc.ObjectRunner$$$$anonfun$$run$$1.apply(ObjectRunner.scala:75)
        at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
        at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
        at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:161)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
error: fatal error (server aborted): type mismatch;
 found   : Foo[V]
 required: Foo[T]

{code}
