This is an example with Specs2 library. I wasn't able to create standalone example:
{code}
package org.specs2

import org.specs2._
import execute.DecoratedResult
import matcher.{DataTable, DataTables}
import specification.{FragmentsFragment, Fragments, Fragment}

class Test extends Specification with DataTables {
  val result: DecoratedResult[DataTable] = null
//  val fragment: Fragment = dataTableExample(result)
//  val fragments: Fragments = dataTableFragments(result)

  val ff: FragmentsFragment = null
  def is: Fragments = ff ^ result
}
{code}

In FragmentsFragment there are two applicable '\^' methods. One takes Fragment, and another one takes Fragments. DecoratedResult contains implicit conversions to both of this types. Fragment and Fragments are two incompatible types. So this is the place when ambiguity error should be shown. But compiler able to choose '\^' method, which takes Fragment.
