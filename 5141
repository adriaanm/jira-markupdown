Replying to [comment:10 anovstrup]:
> Looking at this again (because I'm neurotic), it seems that the behavior of the `+` operation is *not* "the same regardless of whether the left operand is typed as String", because StringAdd's `+` method takes a `String` argument rather than an `Any`. If you change the spec as I suggested in my previous comment, this will have to be changed as well.

That String argument is the right operand of `+`; the left operand is self:Any.

I agree with your suggested change to the SLS, which shows how Paul's issue 2 **is** relevant to this bug.

I find HPGumm's "Changing the wording in SLS 12.3.1 only camouflages the problem" rather odd, since his original complaint was about behavior being determined by what the compiler does rather than by a formal specification ... how can a change in the specification "only camouflage" a problem when the specification is the only authority? Does he now want the compiler to produce an NPE even if the spec says it doesn't?

"Implicit conversions in general carry the danger of appearing to give behavior to null values, contrary to the spec."

That is **not** contrary to the spec; the spec refers to "A reference to any other member of the “null” object" but implicitly applied methods **aren't** members of the “null” object. It would not only be unwise, but impossible, to enforce implicit conversions throwing NPE's when applied to null because in general they are arbitrary user code and can do whatever they please.
