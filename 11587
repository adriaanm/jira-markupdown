Although that might be the same underlying issue, I think this is a minimal complete example that is closer to what I have:
```Scala
package blam

package foo {

  trait F[T] {
    def f(d: Double, t: T): T
    def f(d: Int, t: T): T = f(d.toDouble, t)
    def f(d: String, t: T ): T = f(d.toInt, t)
  }
}

package object foo extends foo.F[Double] {
  override def f(d: Double, t: Double): Double  = d * t
}
```

And: 
```Scala
import blam._
foo.f("3", 4.0)
```

gives: 
```scala
Error:(3, 6) overloaded method value f with alternatives:
  (d: String,t: T)T <and>
  (d: Int,t: T)T <and>
  (d: Double,t: T)T
 cannot be applied to (String, Double)
foo.f("3", 4.0)
    ^
```

Note that this example (without a generic argument) compiles fine:
```Scala
package blam

package foo {

  trait F[T] {
    def f(d: Double): T
    def f(d: Int): T = f(d.toDouble)
    def f(d: String): T = f(d.toInt)
  }
}

package object foo extends foo.F[Double] {
  override def f(d: Double): Double  = d * 3
}
```

And: 
```Scala
import blam._
foo.f("3")
```
