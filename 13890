If initialSize is overloaded for a ResizableArray subclass to
zero, then adding the first element results in an infinite
loop:

{code}
scala> val buf = new scala.collection.mutable.ArrayBuffer[String] { override val initialSize = 0 }
buf: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer()
scala> buf += "dvdfvfd"
{code}

Patch that fixes this:

{code}
Index: src/library/scala/collection/mutable/ResizableArray.scala
===================================================================
--- src/library/scala/collection/mutable/ResizableArray.scala   (revision 16464)+++ src/library/scala/collection/mutable/ResizableArray.scala   (working copy)
@@ -74,7 +74,7 @@
   /** ensure that the internal array has at n cells */
   protected def ensureSize(n: Int) {
     if (n > array.length) {
-      var newsize = array.length * 2
+      var newsize = if (array.length == 0) 2 else 2*array.length
       while (n > newsize)
         newsize = newsize * 2
       val newar: Array[AnyRef] = new Array(newsize)
{code}

Why did I run into this?

I have a method that takes an Array[String] and uses
Class.forName() and returns a new Array[Class[_ <: FooBar]]
of only concrete subclasses of FooBar, so the output array
can be smaller than the input array.  In my case, I was
passing in an 0 select Array[String] and using

{code}
def findClasses(class_names : Array[String]) =
  val results = new scala.collection.mutable.ArrayBuffer[Class[_]] {
                  override def initialSize = class_names.length
                }
  for (class_name <- class_names) {
    // Lots of class checks here:
    if (....) results += Class.forName(class_name)
  }

  results
}
{code}
