Compiling the following code,

{code}
trait T[U] {
  def x: T[V] forSome { type V <: U }
}
  
object T {
  def unapply[U](t: T[U]): Option[T[V] forSome { type V <: U }] = Some(t.x)
}
  
def f[W](t: T[W]) = t match {
  case T(T(_)) => ()
}
{code}

has the compiler crash with the following stack trace.


{code}
Exception in thread "main" java.lang.AssertionError: assertion failed: T(_) ==> Test.this.T.unapply[Nothing](<unapply-selector>) <unapply> (_), pt = Test.T[?] forSome { type V <: W }
	at scala.Predef$$.assert(Predef.scala:92)
	at scala.tools.nsc.typechecker.Typers$$Typer.doTypedApply(Typers.scala:1837)
	at scala.tools.nsc.typechecker.Typers$$Typer.doTypedApply(Typers.scala:1756)
	at scala.tools.nsc.typechecker.Typers$$Typer.typedApply$$1(Typers.scala:2553)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed1(Typers.scala:3140)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:3243)
	at scala.tools.nsc.typechecker.Typers$$Typer.typedArg(Typers.scala:1591)
	at scala.tools.nsc.typechecker.Typers$$Typer$$$$anonfun$$typedArgs$$2.apply(Typers.scala:1607)
	at scala.tools.nsc.typechecker.Typers$$Typer$$$$anonfun$$typedArgs$$2.apply(Typers.scala:1607)
	...
{code}

The crash is not reproducible when case classes are used.

I have no idea as to whether this program should be rejected, or if a sensible type can be given to it.
