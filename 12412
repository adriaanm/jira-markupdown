I am not sure what the exact meaning of "r's type conforms to a type-instance of the class which contains the access" is then. Maybe you can point me to a site that has it explained in more detail?
As I understand it, in my example {{B}} is a subtype of {{A}} and should therefore conform to being of type {{A}} which should give {{B}} access to protected members of other instances of {{A}}.
Since both of the following access patterns work
{code}
trait A {
  protected def callMe(): Unit
  def runOther(a: A): Unit = a.callMe()
}
trait SubA extends A {
  callMe()
}
{code}
Why would the combination of the two as outlined above not work as well? Where is the difference to {{protected\[this\]}} then?
