This issue can be narrowed down as:

{code}
object A {
  
  def test {
    Array("", "")
  }

}
{code}
scalac complains: 
{code}
 error: overloaded method value apply with alternatives (x: Unit,xs: Unit*)Array[Unit] <and> (x: Double,xs: Double*)Array[Double] <and> (x: Float,xs: Float*)Array[Float] <and> (x: Long,xs: Long*)Array[Long] <and> (x: Int,xs: Int*)Array[Int] <and> (x: Char,xs: Char*)Array[Char] <and> (x: Short,xs: Short*)Array[Short] <and> (x: Byte,xs: Byte*)Array[Byte] <and> (x: Boolean,xs: Boolean*)Array[Boolean] cannot be applied to (java.lang.String,java.lang.String)
    Array("", "")
{code}

But the following is ok:
{code}
object A {
  
  def test = {
    Array("", "")
  }

}
{code}
