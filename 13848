scala.util.parsing.combinator.Parsers.NoSuccess is defined as

  sealed abstract class NoSuccess(val msg : java.lang.String, val override next : Reader)
    extends ParseResult[Nothing] 

Now that abstract classes can also be case classes, NoSuccess should be a case class.

Currently, when calling a top level parser, match statements must be coded as 

    def myparser : Parser[MyType] = ...

    parseAll(myparser, input) match {
      case Success(val, _) => handle(val)
      case e:NoSuccess => handleFailure(e.msg)
    }

or 

    parseAll(myparser, input) match {
      case Success(val, _) => handle(val)
      case Failure(msg,_) => handleFailure(msg)
      case Error(msg,_) => handleFailure(msg) // redundant
    }

each of which lack a certain elegant-ness.

However, if NoSuccess were an case class (still abstract sealed), I could do:

    parseAll(myparser, input) match {
      case Success(val, _) => handle(val)
      case NoSuccess(msg,_) => handleFailure(msg)
    }

Martin Odersky replied on the scala mailing list:

It might be for historical reasons: Until 2.7.0, case classes could not inherit from other case classes, and they could not be abstract either. Nowadays it should work fine to make NoSuccess a case class, I think.

Cheers
