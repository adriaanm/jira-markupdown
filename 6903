Tree produced by the codifier is as follows:

{code}
val $local0: Symbol = selectTerm(staticModule("Foo").moduleClass, "code ").newNestedSymbol(NoPosition, newTypeName("C"));
val $local1: Symbol = $local0.newNestedSymbol(NoPosition, newTermName("<init>")).setInternalFlags(flagsOfModifiers(List()));
val $local2: Symbol = $local0.newNestedSymbol(NoPosition, newTermName("x")).setInternalFlags(flagsOfModifiers(List()));
val $local3: Symbol = $local0.newNestedSymbol(NoPosition, newTermName("x ")).setInternalFlags(flagsOfModifiers(List(`private`, local)));
$local0.setTypeSig(ClassInfoType(List(staticClass("java.lang.Object").asTypeConstructor, staticClass("scala.ScalaObject").asTypeConstructor), newScopeWith($local1, $local2, $local3), $local0));
$local1.setTypeSig(MethodType(List(), TypeRef(NoPrefix, $local0, List())));
$local2.setTypeSig(NullaryMethodType(staticClass("scala.Int").asTypeConstructor));
$local3.setTypeSig(staticClass("scala.Int").asTypeConstructor);

Block(
  List(
    ClassDef(
      Modifiers(), 
      newTypeName("C"), 
      List(), 
      Template(
        List(TypeTree(staticClass("java.lang.Object").asTypeConstructor), TypeTree(staticClass("scala.ScalaObject").asTypeConstructor)), 
        ValDef(Modifiers(Set(`private`), newTypeName(""), List()), newTermName("_"), TypeTree(NoType), EmptyTree),
        List(
          DefDef(Modifiers(), newTermName("<init>"), List(), List(List()), TypeTree(TypeRef(NoPrefix, $local0, List())), Block(List(Apply(Select(Super(This(newTypeName("")), newTypeName("")), newTermName("<init>")), List())), Literal(Constant(())))), 
          ValDef(Modifiers(Set(`private`, local), newTypeName(""), List()), newTermName("x "), TypeTree(staticClass("scala.Int").asTypeConstructor), Literal(Constant(2))), 
          DefDef(Modifiers(Set(), newTypeName(""), List()), newTermName("x"), List(), List(), TypeTree(staticClass("scala.Int").asTypeConstructor), Select(This(newTypeName("C")), newTermName("x "))))))), 

  Apply(
    Select(Select(Ident(staticModule("scala").moduleClass), newTermName("Predef")), newTermName("println")), 
    List(
      Select(
        Apply(Select(New(Ident(newTypeName("C"))), newTermName("<init>")), List()), 
        newTermName("x")))))
{code}
