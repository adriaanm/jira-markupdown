Replying to [comment:13 dragos]:
> I change the way InnerClasses are reported for inner objects, but kept the old scheme for top level objects. That should not be a problem: in the case when there's a companion class, the reference is correct. If there's no companion, that the compiler generates a mirror class, and again the reference is 'bound'. I think this way we get the best of both worlds.
> 
> I had to fix another problem with the way java signatures were generated, but now proguard is happy with the scala compiler bytecode, except for two warnings about reflective calls in the interpreter.
> 
> The fix is in r18618.
While I've been using ProGuard 4.5Beta3 with no problems with Scala 2.8Beta1, switching to recent nightly builds of Scala 2.8 (re)introduces the problems of bytecode references to non-existant classes.

It is not limited to the Scala library, but shows up for user classes:

[proguard] Warning: com.test.app.abc.data.QueryDtl$$: can't find referenced class com.test.app.abc.data.QueryDtl$$$$anonfun$$apply$$1

