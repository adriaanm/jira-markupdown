Actors can exit in a variety of circumstances, one of which is when an exception is thrown. At the moment, the code in Reaction.scala that handles this situation prints the stack trace to stderr, then calls any linked actors.

The printout is handy when an unexpected, unhandled exception is thrown. However, when there are linked actors which could handle the exception, I don't think it's necessary to print it out - it just causes unnecessary clutter in the application's output.

Instead, a strack trace could only be printed if there are no linked actors which trap it.

Alternatively, the actors library could provide a hook to customise the behaviour, leaving the current behaviour as default. Maybe something like the following:
```scala
trait IScheduler {
  ...
  def handleUntrappedThrowable(t: Throwable): Unit
  ...
}
```

