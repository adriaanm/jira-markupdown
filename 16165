As shown below, ListBuffer.prependToList breaks List's immutabilitity.

Example in REPL:
{code}
scala> val buf = new collection.mutable.ListBuffer[Int]
buf: scala.collection.mutable.ListBuffer[Int] = ListBuffer()

scala> buf ++= List(1, 2, 3)
res0: buf.type = ListBuffer(1, 2, 3)

scala> val l = buf.toList
l: List[Int] = List(1, 2, 3)

scala> buf prependToList List(4, 5, 6)
res1: List[Int] = List(1, 2, 3, 4, 5, 6)

scala> l
res2: List[Int] = List(1, 2, 3, 4, 5, 6)
{code}

I propose the following fixes.

before)
{code}
  def prependToList(xs: List[A]): List[A] =
    if (start.isEmpty) xs
    else { last0.tl = xs; toList }
{code}

after)
{code}
  def prependToList(xs: List[A]): List[A] =
    if (start.isEmpty) xs
    else {
      if (exported) copy() // added
      last0.tl = xs
      toList
    }
{code}
