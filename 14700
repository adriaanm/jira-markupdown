This issue has existed for a while, I read code of scalac.scala, and found it truly process first param only, so I'll give a patch which uses code from CompilerCommand.scala. I've tested it on my machine:

{code}
Index: src/compiler/scala/tools/ant/Scalac.scala
===================================================================
--- src/compiler/scala/tools/ant/Scalac.scala	(revision 19650)
+++ src/compiler/scala/tools/ant/Scalac.scala	(working copy)
@@ -10,7 +10,7 @@
 
 package scala.tools.ant
 
-import java.io.{File,PrintWriter,BufferedWriter,FileWriter}
+import java.io.{File,PrintWriter,BufferedWriter,FileWriter, IOException}
 
 import org.apache.tools.ant.{ BuildException, Project, AntClassLoader }
 import org.apache.tools.ant.taskdefs.{MatchingTask,Java}
@@ -18,7 +18,7 @@
 import org.apache.tools.ant.util.{FileUtils, GlobPatternMapper,
                                   SourceFileScanner}
 
-import scala.tools.nsc.{Global, Settings}
+import scala.tools.nsc.{Global, Settings, Properties}
 import scala.tools.nsc.reporters.{Reporter, ConsoleReporter}
 
 /** <p>
@@ -105,10 +105,10 @@
   /** Defines valid values for the <code>deprecation</code> and
    *  <code>unchecked</code> properties. */
   object Flag extends PermissibleValue {
-    val values = List("yes", "no", "on", "off")
+    val values = List("yes", "no", "on", "off", "true", "false")
     def toBoolean(flag: String) =
-      if (flag == "yes" || flag == "on") Some(true)
-      else if (flag == "no" || flag == "off") Some(false)
+      if (flag == "yes" || flag == "on" || flag == "true") Some(true)
+      else if (flag == "no" || flag == "off" || flag == "false") Some(false)
       else None
   }
 
@@ -558,11 +558,51 @@
     if (!assemrefs.isEmpty) settings.assemrefs.value = assemrefs.get
 
     log("Scalac params = '" + addParams + "'", Project.MSG_DEBUG)
-    settings.parseParams(addParams)
+    val args = addParams.trim.split("""\s+""").toList
+    processArguments(settings, args)
 
     (settings, sourceFiles, javaOnly)
   }
 
+  /** file extensions of files that the compiler can process */
+  lazy val fileEndings = Properties.fileEndings
+  /** Private buffer for accumulating files to compile */
+  private var fs: List[String] = List()
+
+  /** Process the arguments and update the settings accordingly.
+      This method is called only once, during initialization.  */
+  protected def processArguments(settings: Settings, arguments: List[String]) {
+    var ok = true
+    // initialization
+    var args = arguments
+    def errorAndNotOk(msg: String) = { error(msg) ; ok = false }
+
+    // given a @ argument expands it out
+    def doExpand(x: String) =
+      try   { args = scala.tools.nsc.util.ArgumentsExpander.expandArg(x) ::: args.tail }
+      catch { case ex: IOException  => errorAndNotOk(ex.getMessage) }
+
+    // true if it's a legit looking source file
+    def isSourceFile(x: String) =
+      (settings.script.value != "") ||
+      (fileEndings exists (x endsWith _))
+
+    // given an option for scalac finds out what it is
+    def doOption(x: String): Unit = {
+      val argsLeft = settings.parseParams(args)
+      if (args != argsLeft) args = argsLeft
+      else errorAndNotOk("bad option: '" + x + "'")
+    }
+
+    // cycle through args until empty or error
+    while (!args.isEmpty && ok) args.head match {
+      case x if x startsWith "@"  => doExpand(x)
+      case x if x startsWith "-"  => doOption(x)
+      case x if isSourceFile(x)   => fs = x :: fs ; args = args.tail
+      case ""                     => args = args.tail // quick fix [martin: for what?]
+      case x                      => errorAndNotOk("don't know what to do with " + x)
+    }
+  }
   
   override def execute() {
     val (settings, sourceFiles, javaOnly) = initialize
{code}
