{code}
import scala.reflect.mirror._

object Test extends App {
  {
    def foo(x: Int) = x
    reify(foo(2))
  }
}
{code}

{code}
reifying =
foo(2)
Apply(Ident(newTermName("foo")), List(Literal(Constant(2))))
reifee is located at: source-C:\Projects\Kepler\sandbox\Test.scala,line-6,offset=98
prefix = scala.reflect.`package`.mirror
[calculate phase]
[reshape phase]
[metalevels phase]
[interlude]
symbol table = <empty>
reifee =
foo(2)
Apply(Ident(newTermName("foo")), List(Literal(Constant(2))))
[reify phase]
Free term: method foo(method)
tough type: (x: Int)Int (MethodType)
Sym def: value x (value)
Sym def: method foo (method)
Sym def: value <local Test> (value)
Filling in: value <local Test> (value)
Filling in: method foo (method)
Filling in: value x (value)
Filling in: method foo (method)
reified = {
  val $mr: scala.reflect.`package`.mirror.type = scala.reflect.`package`.mirror;
  val symdef$$local$Test$1 = $mr.staticModule("Test").moduleClass.newNestedSymbol($mr.newTermName("<local Test>"), $mr.NoPosition, 0L, false);
  val symdef$foo1 = symdef$$local$Test$1.newNestedSymbol($mr.newTermName("foo"), $mr.NoPosition, 17592186044480L, false);
  val symdef$x1 = symdef$foo1.newNestedSymbol($mr.newTermName("x"), $mr.NoPosition, 17592186052608L, false);
  val free$foo1 = $mr.newFreeTerm("foo", $mr.MethodType(scala.collection.immutable.List.apply(symdef$x1), $mr.staticClass("scala.Int").asTypeConstructor), foo, 17592186044480L, "defined by <local Test> in Test.scala:5:9");
  symdef$$local$Test$1.setTypeSignature($mr.NoType);
  symdef$x1.setTypeSignature($mr.staticClass("scala.Int").asTypeConstructor);
  $mr.Expr[Int]($mr.Apply($mr.Ident(free$foo1), scala.collection.immutable.List.apply($mr.Literal($mr.Constant(2)))))($mr.ConcreteTypeTag[Int]($mr.staticClass("scala.Int").asTypeConstructor, Predef.this.classOf[Int]))
}
Test.scala:6: error: Cannot materialize Expr because:
scala.reflect.internal.Types$TypeError: missing arguments for method foo;
follow this method with `_' if you want to treat it as a partially applied function
    reify(foo(2))
         ^
one error found
{code}
