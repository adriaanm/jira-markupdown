So as you can see, question #1 shows my lack of knowledge about volatility. I misread the spec and ended up being confused. Nevertheless, it would be nice if you could elaborate on what volatility is, because comments on isVolatile also don't help much.

3) I actually have another question, which is why values of volatile types can't be matched as-is:
```scala
// cf. pos/t8300-patmat.scala
trait Universe {
  type Name >: Null <: AnyRef with NameApi
  trait NameApi

  type TermName >: Null <: TermNameApi with Name
  trait TermNameApi extends NameApi
}

object Test extends App {
  val u: Universe = ???
  import u._

  locally {
    val ScalaName: TermName = ???
    ??? match {
      case ScalaName => ???
    }
  }
}
```
```scala
t8300-patmat.scala:17: error: stable identifier required, but ScalaName found.
 Note that value ScalaName is not stable because its type, Test.u.TermName, is volatile.
      case ScalaName => ???
           ^
one error found
```
