Using currying for `mapFun`, as shown below, this already works.

{code}
object listFun extends Application {
    def mapFun[A, B](xs: List[A])(func: A => B): List[B] =
         (xs :\ List[B]())((xs, x) => func(xs) :: x)
    val names = List("hans", "peter")
    println("Capitalized names: " + mapFun(names)(name =>
        name.charAt(0).toUpper + name.substring(1)
    ))
}
{code}

I don't know if we can change the behaviour of type inference to do what you want. I suspect the way it's spec'ed&implemented now is due to static overload resolution.
