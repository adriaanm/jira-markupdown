Linking this to a code comment:
```
    // Modules whose members are in the default namespace
    // SI-5941: ScalaPackage and JavaLangPackage are never ever shared between mirrors
    // as a result, `Int` becomes `scala.Int` and `String` becomes `java.lang.String`
    // I could just change `isOmittablePrefix`, but there's more to it, so I'm leaving this as a todo for now
    lazy val UnqualifiedModules = List(PredefModule, ScalaPackage, JavaLangPackage)
    // Those modules and their module classes
    lazy val UnqualifiedOwners  = UnqualifiedModules.toSet ++ UnqualifiedModules.map(_.moduleClass)
```

And a design doc on reflection:

https://docs.google.com/document/d/1nAwSw4TmMplsIlzh2shYLUJ5mVh3wndDa1Zm1H6an9A/edit#

And a related report from the mailing lists:

https://groups.google.com/forum/#!msg/scala-language/6TyLTfk4E-I/sg33aLe_-40J
```scala
On Wed, May 1, 2013 at 7:59 AM, Ryan Hendrickson <Ryan.Hen...@bwater.com> wrote:
Any ideas as to why?

Classloaders, somehow. I get the same ## result with "scala" but different results with "scala -nobootcp".

% scala210_1 -nobootcp
Welcome to Scala version 2.10.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_45).
Type in expressions to have them evaluated.
Type :help for more information.

scala> import reflect.runtime.universe._
import reflect.runtime.universe._

scala>  (typeOf[String].normalize.##, typeOf[java.lang.String].normalize.##)
res0: (Int, Int) = (1712057924,559543568)
```

