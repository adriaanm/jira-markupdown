The bug stems from this in `typedIdent`:

{code}
          // ignore current variable scope in patterns to enforce linearity
        val startContext = if (mode.typingPatternOrTypePat) context.outer else context
        val nameLookup   = tree.symbol match {
          case NoSymbol   => startContext.lookupSymbol(name, qualifies)
          case sym        => LookupSucceeded(EmptyTree, sym)
        }
{code}


Which the any self-respecting deviant would exploit with:

{code}
  def f(x: Any) = x match { case (a: AnyRef, x: (a.type forSome { type T })) => x } // !!! compiles
{code}

Type patterns are not explicitly specced to allow the `forSome` syntax: http://www.scala-lang.org/files/archive/spec/2.11/08-pattern-matching.html#type-patterns in the 

So one most straight forward fix for the directly reported bug would be to prohibit this.

But we have to be nuanced enough to allow:

{code}
def f(x: Any) = x match { case x: Array[(T forSome { type T })] => x }
{code}

and to outlaw things like:

{code}
def f(x: Any) = x match { case (y: AnyRef, x: Array[({type X = y.type})#X]) => x }
{code}
