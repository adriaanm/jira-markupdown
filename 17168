When trying to override a concrete type member without a override keyword the compiler returns an error saying that the override keyword must be used.
```
scala> :paste
// Entering paste mode (ctrl-D to finish)

class MyString
trait A { type Hello}
class AClass extends A{ type Hello = MyString}

// Exiting paste mode, now interpreting.

defined class MyString
defined trait A
defined class AClass


scala> class B extends AClass{ type Hello = MyString with Serializable}
<console>:13: error: overriding type Hello in class AClass, which equals MyStrin
g;
 type Hello needs `override' modifier
       class B extends AClass{ type Hello = MyString with Serializable}
                                    ^
```

But after applying the overriding keyword the compiler says that the type member is incompatible. It could already be said before.
Maybe also a more unambiguous message like "Overriding concrete type members is not allowed".
"type Hello has incompatible type" suggests too much that the error is in this case the relation between MyClass and MyClass with Serializable.
```
scala> class B extends AClass{ override type Hello =MyString with Serializable}
<console>:13: error: overriding type Hello in class AClass, which equals MyStrin
g;
 type Hello has incompatible type
       class B extends AClass{ override type Hello =MyString with Serializable}
                                           ^
```
