```scala
scala> object Test {
  sealed abstract class BarrierDirection

  object BarrierDirection {
    case object Down extends BarrierDirection {
    }

    case object Up extends BarrierDirection {
    }

    (d1: BarrierDirection, d2: BarrierDirection) =>
      (d1, d2) match {
        case (Up, Up) | (Down, Down) => false
        case (Down, Up)              => true
        case (Up, Down)              => false
      }
  }
}
<console>:22: warning: match may not be exhaustive.
It would fail on the following inputs: (BarrierDirection(), Down), (BarrierDirection(), Up), (Down, BarrierDirection()), (Down, BarrierDirection()), (Down, Down), (Down, Down), (Down, Down), (Down, Up), (Down, Up), (Up, BarrierDirection()), (Up, Down), (Up, Down)
             (d1, d2) match {
             ^
```
```scala
scala> object Test {
  sealed abstract class BarrierDirection

  object BarrierDirection {
    case object Down extends BarrierDirection {
    }

    case object Up extends BarrierDirection {
    }

    (d1: BarrierDirection, d2: BarrierDirection) =>
      (d1) match {
        case Up | Down => false
      }
  }
}
<console>:22: warning: match may not be exhaustive.
It would fail on the following inputs: Down, Up
             (d1) match {
              ^
```
```scala
object Test {
  sealed abstract class BarrierDirection

  object BarrierDirection {
    case object Down extends BarrierDirection

    (d1: BarrierDirection, d2: BarrierDirection) =>
      (d1, d2) match {
        case (Down, Down)              => false
      }
  }
}

// <console>:17: warning: match may not be exhaustive.
// It would fail on the following inputs: (Down, Down), (Down, Down), (Down, Down)
//              (d1, d2) match {
//              ^
```
