I don't remember what's the review site, but I'm concerned about this:

{code}
final override def reverse: Range = if (length > 0) new Range.Inclusive(last, start, -step) else this 
{code}

I don't think there's any performance gain to be had by not creating the reverse of a zero-length range, so why change it from the original code that inverted end, start and negated step?
