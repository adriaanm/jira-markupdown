This seems needlessly uncooperative:
```
scala> new java.io.PrintWriter(new java.io.File("/tmp/foo"), csn = "UTF-8")
<console>:8: error: overloaded method constructor PrintWriter with alternatives:
  (java.io.File,String)java.io.PrintWriter <and>
  (java.io.File)java.io.PrintWriter <and>
  (String,String)java.io.PrintWriter <and>
  (String)java.io.PrintWriter <and>
  (java.io.OutputStream,Boolean)java.io.PrintWriter <and>
  (java.io.OutputStream)java.io.PrintWriter <and>
  (java.io.Writer,Boolean)java.io.PrintWriter <and>
  (java.io.Writer)java.io.PrintWriter
 cannot be applied to (java.io.File, csn: String)
              new java.io.PrintWriter(new java.io.File("/tmp/foo"), csn = "UTF-8")
              ^

scala> new java.io.PrintWriter(new java.io.File("/tmp/foo"), "UTF-8")
res1: java.io.PrintWriter = java.io.PrintWriter@31c24543
```
It would be great to do all the named/positional business in those situations where we can obtain the names of java method parameters; but failing that, at least it doesn't have to stop me from documenting the call in a situation where it would compile fine with the unlabeled arguments.
