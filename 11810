Somewhat unfortunately, this is as designed. "Autotupling" kicks in to promote an empty argument list to a value of type Unit.

The difficulty in removing this altogether comes from the fact that Scala has flexible syntax for application (`recv.meth(arg1, arg2)` vs `recv meth arg1` vs recv meth (arg1, arg2)`, and from the way that parentheses are syntactically overloaded for argument lists and literal Tuple/Unit.

However, you can enable a warning or disable this feature as follows:

{noformat}
% -Ywarn-adapted-args -e 'def abc(a: Any) = println(a.getClass); abc()'
/var/folders/s2/g6fgtpk52hl8njjvx8vyzr9r0000gn/T/scalacmd5260502621136592549.scala:1: warning: Adapting argument list by inserting (): leaky (Object-receiving) target makes this especially dangerous.
        signature: $anon.abc(a: Any): Unit
  given arguments: <none>
 after adaptation: $anon.abc((): Unit)
def abc(a: Any) = println(a.getClass); abc()
                                          ^
one warning found
class scala.runtime.BoxedUnit

%  ~/scala/2.10/bin/scala -Yno-adapted-args -e 'def abc(a: Any) = println(a.getClass); abc()'
/var/folders/s2/g6fgtpk52hl8njjvx8vyzr9r0000gn/T/scalacmd1725384774326301428.scala:1: error: not enough arguments for method abc: (a: Any)Unit.
Unspecified value parameter a.
def abc(a: Any) = println(a.getClass); abc()
                                          ^
one error found
{noformat}

In Scala 2.11, we have elevated this to a deprecation warning.

{noformat}
~/scala/2.11/bin/scala -nc -deprecation -e 'def abc(a: Any) = println(a.getClass); abc()'
/var/folders/s2/g6fgtpk52hl8njjvx8vyzr9r0000gn/T/scalacmd2712711306718809292.scala:1: warning: Adaptation of argument list by inserting () has been deprecated: leaky (Object-receiving) target makes this especially dangerous.
        signature: $anon.abc(a: Any): Unit
  given arguments: <none>
 after adaptation: $anon.abc((): Unit)
def abc(a: Any) = println(a.getClass); abc()
                                          ^
class scala.runtime.BoxedUnit
{noformat}
