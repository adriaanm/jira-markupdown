minimized a bit more, it's:
```
object S {
  def get[T]: T = null.asInstanceOf[T]
  def warn = {
    val local: String = get
    ()
  }
}
```

running with `scalacOptions in Compile := Seq("-Ywarn-dead-code", "-Xprint:typer", "-Yshow-trees-stringified")` shows:
```
          ValDef( // val local: String
            0
            "local"
            <tpt> // tree.tpe=String
            TypeApply( // def get[T]: T in object S, tree.tpe=Nothing
              S.this."get" // def get[T]: T in object S, tree.tpe=[T]=> T
              <tpt> // tree.tpe=Nothing
            )
          )
```

You might expect the type annotation on the val to cause String to be inferred for T. But that doesn't happen; T is inferred to be Nothing. Since Nothing is a bottom type, the result type-checks. By the time actual code is generated, the evidence that Nothing was involved has disappeared. But enabling dead code warnings shows the problem, since as Paul wrote on scala/bug#8109, "since it appears to return a value of type Nothing, it thinks everything after that is dead code".

In scala/bug#8109, Paul only addressed the inferring of Nothing in a specifically Java context ("on an unconstrained type parameter in java it should infer "Object", not "Nothing". But that will never happen"), but this example shows that you don't need Java in the mix.
