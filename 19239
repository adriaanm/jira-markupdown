LinearSeqLike:
{code}
 *  Linear sequences are defined in terms of three abstract methods, which are assumed
 *  to have efficient implementations. These are:
 *  {{{
 *     def isEmpty: Boolean
 *     def head: A
 *     def tail: Repr
 *  }}}
{code}

Nope.

{code}
scala> class Foo extends scala.collection.LinearSeqLike[Int, Foo]
<console>:7: error: class Foo needs to be abstract, since:
it has 4 unimplemented members.
/** As seen from class Foo, the missing signatures are as follows.
 *  For convenience, these are usable as stub implementations.
 */
  // Members declared in scala.collection.LinearSeqLike
  def seq: scala.collection.LinearSeq[Int] = ???

  // Members declared in scala.collection.SeqLike
  def apply(idx: Int): Int = ???
  def length: Int = ???

  // Members declared in scala.collection.TraversableLike
  protected[this] def newBuilder: scala.collection.mutable.Builder[Int,Foo] = ???

       class Foo extends scala.collection.LinearSeqLike[Int, Foo]
             ^
{code}
