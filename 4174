Well, the problem is the inferred type of f. Consider this example:
```scala
scala> trait A { type T; def m(t : T) = t.toString }
defined trait A

scala> class B[T2] extends A { type T = T2 }
defined class B

scala> def f[T <: B[_]](a : T#T, b : T) = b.m(a)
f: [T <: B[_]](a: Any,b: T)java.lang.String

scala> f("Hello", new B[Int])
res0: java.lang.String = Hello
```
Which obviously is unsound (calling (new B[Int]).m with a String).

Note that changing f to:
```scala
def f[T <: A](a : T#T, b : T) = b.m(a)
```
gives a compiler error. So the problem is obviously related to existential types.
{code}
