Minimized:

{code}
class Outer {
  object X

  class Inner {
    null.isInstanceOf[X.type]
  }
}
{code}

Erasure converts instanceOf tests against singleton types to `eq`.

{code}
              targ.tpe match {
                case SingleType(_, _) | ThisType(_) | SuperType(_, _) =>
                  val cmpOp = if (targ.tpe <:< AnyValTpe) Any_equals else Object_eq
                  atPos(tree.pos) {
                    Apply(Select(qual, cmpOp), List(gen.mkAttributedQualifier(targ.tpe)))
                  }
{code}

After erasure:
{code}
  class Outer$Inner#8101 extends Object#145 {
    <synthetic> <paramaccessor> <artifact> protected val $outer#15239: Outer#7816 = _;
    <synthetic> <stable> <artifact> def $outer#15238(): Outer#7816 = Outer$Inner#8101.this.$outer#15239;
    def <init>#13449($outer#15240: Outer#7816): Outer$Inner#8101 = {
      if ($outer#15240.eq#5861(null))
        throw null
      else
        Outer$Inner#8101.this.$outer#15239 = $outer#15240;
      Outer$Inner#8101.super.<init>#3011();
      null.eq#5861(Outer#7816.this.X#8099());
      ()
    }
{code}

We either need explicit outer to transform TypeTrees to subsitute `Outer.this` with $outer.type`, or change erasure to make the reference to  the term `Outer.this.x` explicitly pass through `$outer`.
