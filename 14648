The Iterator methods takeWhile, filterMap and filter evaluate the predicate more times than they need to:  repeated calls to hasNext need not call the predicate, and a call to next after hasNext need not call the predicate.  (Ticket SI-2540 mentioned filter but not the others).

Here are implementations that avoid the repeated predicate calls.
{code}
  def takeWhile(p: A => Boolean): Iterator[A] = new Iterator[A] {
    private var hd: A = _
    private var hdDefined: Boolean = false
    private var tail: Iterator[A] = self
  
    def hasNext = hdDefined || tail.hasNext && {
      hd = tail.next()
      if (p(hd)) hdDefined = true 
      else tail = Iterator.empty
      hdDefined
    }
    def next() = if (hasNext) { hdDefined = false; hd } else empty.next()
  }

  def filterMap[B](pf: PartialFunction[Any, B]): Iterator[B] = new Iterator[B] {
    private var hd: A = _
    private var hdDefined: Boolean = false
    
    def hasNext: Boolean = hdDefined || {
      do {
        if (!self.hasNext) return false
        hd = self.next()
      } while (!pf.isDefinedAt(hd))
      hdDefined = true
      true
    }
    
    def next() = if (hasNext) { hdDefined = false; pf(hd) } else empty.next()
  }

  def filter(p: A => Boolean): Iterator[A] = new Iterator[A] {
    private var hd: A = _
    private var hdDefined: Boolean = false
    
    def hasNext: Boolean = hdDefined || {
      do {
        if (!self.hasNext) return false
        hd = self.next()
      } while (!p(hd))
      hdDefined = true
      true
    }
    
    def next() = if (hasNext) { hdDefined = false; hd } else empty.next()
  }
{code}

Here are unit tests (similar to those provided in Ticket SI-2540).

{code}
object Expectations {
  def checkEqual(actual: Any, expected: Any) {
    if (actual != expected) { println("actual "+actual+" != expected "+expected) ; assume(false) }
  }
}

trait Expectations {
  def expected: Int
  def expected_=(value: Int): Unit
  def expectedStep: Int

  def check(n: Int) {
    Expectations.checkEqual(n, expected)
    expected = expected + expectedStep
  }
}

case class IsEven(var expected: Int, expectedStep: Int) extends Function1[Int, Boolean] with Expectations {
  def apply(n: Int) = {
    check(n)
    (n % 2) == 0
  }
}

case class IsOdd(var expected: Int, expectedStep: Int) extends Function1[Int, Boolean] with Expectations {
  def apply(n: Int) = {
    check(n)
    (n % 2) == 1
  }
}

case class Halve(var expected: Int, expectedStep: Int) extends PartialFunction[Any, Int] with Expectations {

  def isDefinedAt(_n: Any) = _n match {
    case n: Int => { check(n); (n % 2) == 0 }
  }

  def apply(_n: Any): Int = _n match {
    case n: Int => n / 2
  }
}

case class LessThan(var expected: Int, expectedStep: Int, other: Int) extends Function1[Int, Boolean] with Expectations {
  def apply(n: Int) = {
    check(n)
    n < other
  }
}

object Test {
  import Expectations.checkEqual

  def main(args: Array[String]) {
    testFilter()
    testFilterMap()
    testTakeWhile()
  }

  def testFilter() {
    val empty = Iterator.range(0, 10).filter(IsEven(0, 1)).filter(IsOdd(0, 2))
    val evens = Iterator.range(0, 10).filter(IsEven(0, 1)).filter(IsEven(0, 2))

    checkEqual(empty.toList, Nil)
    checkEqual(evens.toList, List.range(0, 10, 2))
  }
  
  def testFilterMap() {
    val sequence = Iterator.range(0, 10)
    checkEqual(sequence.filterMap(Halve(0, 1)).toList, List.range(0, 5))
  }
  
  def testTakeWhile() {
    val sequence = Iterator.range(0, 10)
    checkEqual(sequence.takeWhile(LessThan(0, 1, 5)).toList, List.range(0, 5))
  }
}
{code}
