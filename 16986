LinkedHashSet uses ListBuffer to store the elements in the right order.
This leads to linear time complexity for removing an element from the set.

What's even worse, it can lead to quadratic time complexity for set difference operation.

Example:
```
Welcome to Scala version 2.10.0-M3 (Java HotSpot(TM) Client VM, Java 1.6.0_16).
Type in expressions to have them evaluated.
Type :help for more information.

scala> :paste
// Entering paste mode (ctrl-D to finish)

def test(set: collection.Set[Int], n: Int) {
  val seq = 1 to 1000*n
  val x = set ++ seq
  val y = set ++ seq.reverse
  val start = System.currentTimeMillis
  val z = x &~ y
  val end = System.currentTimeMillis
  assert(z.isEmpty)
  println("size: " + seq.size + "; time: " + (end - start) / 1000.0)
}

// Exiting paste mode, now interpreting.

test: (set: scala.collection.Set[Int], n: Int)Unit

scala> import collection.{mutable, immutable}
import collection.{mutable, immutable}

scala> test(immutable.Set(), 10)
size: 10000; time: 0.015

scala> test(mutable.HashSet(), 10)
size: 10000; time: 0.032

scala> test(mutable.LinkedHashSet(), 10)
size: 10000; time: 3.719

scala> test(immutable.Set(), 100)
size: 100000; time: 0.375

scala> test(mutable.HashSet(), 100)
size: 100000; time: 0.281

scala> test(mutable.LinkedHashSet(), 100)
size: 100000; time: 418.64

scala>
```
