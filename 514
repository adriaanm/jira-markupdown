May I suggest something like the following:
```scala
trait Comprehendable[+A] {
  type AbstractC[+A]
  type C[+A] <: AbstractC[A]
  
  def map[B](f: A => B): C[B]
  def flatMap[B](f: A => AbstractC[B]): C[B]
  def filter(p: A => Boolean): C[A]
}

trait Iterable[+A] extends Comprehendable[A] {
  type AbstractC[+A] = Iterable[A]
}

trait Seq[+A] extends Iterable[A] {
  type C[+A] = Seq[A]
}
```
