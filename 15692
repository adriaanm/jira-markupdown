
In 2.8.1.RC1 types declared in Java sources are flagged as missing unless they are last to be compiled.

The following will reproduce:

{code}
//----------Main.scala--------------------------

import scala.tools.nsc.Settings
import scala.tools.nsc.reporters.ConsoleReporter
import scala.tools.nsc.interactive.Global

object Main{

  def main(args:Array[String]){
    val settings = new Settings(Console.println)
    settings.processArguments(List("-verbose", "-sourcepath", "."), false)
    val reporter = new ConsoleReporter(settings)
    val c = new Global(settings, reporter)
    val x = new c.Response[Unit]()

    // change the order of sources below to
    // get rid of error

    c.askReload(List(
    c.getSourceFile("Orange.java"),
    c.getSourceFile("Apple.scala")
      ), x)
    x.get
  }
}
//-------------------------------------------------------
//-----------------Apple.scala---------------------------
object Apple{
  def main{
    println(new Orange())
  }
}
//-------------------------------------------------------
//----------------Orange.java---------------------------
public class Orange{
    public static String FLAVOR = "sweet";
} 

{code}

Looks like the issue is on the background compilation thread, in some new top-level symbol tracking code.

From scala.tools.nsc.interactive.Global
{code}

  def recompile(units: List[RichCompilationUnit]) {
    for (unit <- units) {
      reset(unit)
      if (debugIDE) inform("parsing: "+unit)
      parse(unit)
    }
    for (unit <- units) {
      if (debugIDE) inform("type checking: "+unit)
      activeLocks = 0
      currentTyperRun.typeCheck(unit)
      unit.status = currentRunId
      syncTopLevelSyms(unit)
    }
  }

  def syncTopLevelSyms(unit: RichCompilationUnit) {
    val deleted = currentTopLevelSyms filter { sym =>
      sym.sourceFile == unit.source.file && runId(sym.validTo) < currentRunId
    }
    for (d <- deleted) {
      d.owner.info.decls unlink d
      deletedTopLevelSyms += d
      currentTopLevelSyms -= d
    }
  }
{code}


Java symbols are being classified as deleted because their runId is not equal to currentRunId after type-checking.

Martin said:
"
I believe I know what the problem is and will put in a fix shortly. (The problem is that java symbols are not automatically completed; they are completed only when their type is actually demanded somewhere. This means that validTo of a java symbol can lag behind the currentRunId).
"
