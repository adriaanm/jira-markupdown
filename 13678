This is a regression since 2.7.1-final.

here's the failure under r15827:
{code}
  ~/newbug> cat J.java 
class J { static { new S(null); } }
  ~/newbug> cat S.scala 
class S(s:List[String])
  ~/newbug> ~/scala/dists/latest/bin/scalac S.scala
  ~/newbug> javac -classpath .:/Users/tisue/scala/dists/latest/lib/scala-library.jar J.java 
J.java:1: Internal error: stack sim error on 
static void <clinit>() {
    static {
        new S(null);
    }
}
class J { static { new S(null); } }
{code}

here's it succeeding in 2.7.1-final:
{code}
  ~/newbug> scalac -version
Scala compiler version 2.7.1.final -- Copyright 2002-2008, LAMP/EPFL
  ~/newbug> scalac S.scala 
  ~/newbug> javac -classpath .:/usr/local/scala/lib/scala-library.jar J.java 
{code}

in S.scala, it makes no difference whether you use a Scala type like scala.List[String] or a Java type java.util.ArrayList[String] â€” you get the same failure either way.

It seems to be important that the Scala method being called from Java is a constructor. I was able to work around the problem in my real code by adding a factory method (with the same arguments as the constructor) to my Scala class's companion object, and then calling that instead in my Java code.

