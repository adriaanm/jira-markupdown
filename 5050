Here is a side by side comparision between case matching on Manifest and ClassManifest. Note that Manifest.equals gets slower with larger inheritance tree.

Results (4 consecutive runs):

Scala 2.8.1.final with -XX:+DoEscapeAnalysis -XX:+UseCompressedOops:
```scala
ClassMaifest match time: 1463 ms.
Manifest match time: 14348 ms.

ClassMaifest match time: 91 ms.
Manifest match time: 14189 ms.

ClassMaifest match time: 66 ms.
Manifest match time: 14209 ms.

ClassMaifest match time: 67 ms.
Manifest match time: 14207 ms.
```

Scala 2.9.0.r23541 with -XX:+DoEscapeAnalysis -XX:+UseCompressedOops:
```scala
ClassMaifest match time: 1509 ms.
Manifest match time: 13452 ms.

ClassMaifest match time: 90 ms.
Manifest match time: 13287 ms.

ClassMaifest match time: 65 ms.
Manifest match time: 13335 ms.

ClassMaifest match time: 66 ms.
Manifest match time: 13338 ms.
```

Scala 2.9.0.r23541 with no runtime options:
```scala
ClassMaifest match time: 1414 ms.
Manifest match time: 16923 ms.

ClassMaifest match time: 83 ms.
Manifest match time: 16703 ms.

ClassMaifest match time: 75 ms.
Manifest match time: 16923 ms.

ClassMaifest match time: 66 ms.
Manifest match time: 16891 ms.
```

Code:
```scala
object ManifestBench {
  def main(args: Array[String]) {
    test()
    test()
    test()
    test()
  }

  final val iterations = 2*1000*1000
  val seed = 1234567890
  val random = new java.util.Random(seed)
  
  def test() {
    println("\nTesting...")
    var start = 0L
   
    start = System.currentTimeMillis
    testClassManifestMatch(iterations)
    System.gc()
    val testClassManifestMatchTime = System.currentTimeMillis - start

    start = System.currentTimeMillis
    testManifestMatch(iterations)
    System.gc()
    val testManifestMatchTime = System.currentTimeMillis - start

    println("\nResults:")
    println("ClassMaifest match time: " + testClassManifestMatchTime + " ms.")
    println("Manifest match time: " + testManifestMatchTime + " ms.")
  }

  // Manifest.equals gets slower with larger inheritance tree.
  class S1
  class S2 extends S1
  class S3 extends S2
  class S4 extends S3
  class S5 extends S4
  class S6 extends S5
  class S7 extends S6
  class S8 extends S7

  class Class1 extends S8
  class Class2 extends S8
  class Class3 extends S8
  class Class4 extends S8

  final val ClassManifest1 = ClassManifest.classType[Class1](classOf[Class1])
  final val ClassManifest2 = ClassManifest.classType[Class2](classOf[Class2])
  final val ClassManifest3 = ClassManifest.classType[Class3](classOf[Class3])
  final val Manifest1 = Manifest.classType[Class1](classOf[Class1])
  final val Manifest2 = Manifest.classType[Class2](classOf[Class2])
  final val Manifest3 = Manifest.classType[Class3](classOf[Class3])


  private final def getManifest(i: Int) :Manifest[_] = {
    (random.nextInt(3)) match {
      case 0 => Manifest1
      case 1 => Manifest2
      case 2 => Manifest3
    }
  }
  private final def getClassManifest(i: Int) :ClassManifest[_] = {
    (random.nextInt(3)) match {
      case 0 => ClassManifest1
      case 1 => ClassManifest2
      case 2 => ClassManifest3
    }
  }

  final def testClassManifestMatch(iterations: Int) {
    random.setSeed(seed)
    var a = 0

    var i = 0; while (i < iterations) {
      getClassManifest(i) match {
        case ClassManifest1 => a += 1
        case ClassManifest2 => a += 2
        case ClassManifest3 => a += 3
      }

      i += 1
    }

    println(a)
  }

  final def testManifestMatch(iterations: Int) {
    random.setSeed(seed)
    var a = 0

    var i = 0; while (i < iterations) {
      getManifest(i) match {
        case Manifest1 => a += 1
        case Manifest2 => a += 2
        case Manifest3 => a += 3
      }

      i += 1
    }

    println(a)
  }
}
```
