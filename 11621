Since `continue` is just an inversion of `if`, is it actually important to have?

Also, can you give an example which is not more compactly expressed with `takeWhile` and a regular iterator?

I think it is valuable to have multiple ways to do things as long as some of them are clearly superior in some cases.  But otherwise it seems to be a net negative (Perl vs. Python for instance) to have many different approximately equivalent ways to do the same thing: it makes reading code harder since the code-to-intent map is more complex.

FWIW, the normal breakable/break provides a way to exit closures and such that has less boilerplate and is faster than the stackless exception-based return that the compiler will give you.  A similarly compelling story here (whether for speed or clarity or both or something else) would be nice to have.  Also, any advantage has to be weighed against the potential for accidental consumption of the `loop` iterator.
