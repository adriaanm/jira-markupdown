The current semantics of {{.withDefault}} and {{.withDefaultValue}} are tricky:  there's no way to know whether {{.apply(key)}} will return a value or Nothing.

{{.get(key)}} will return {{Some(value)}} if explicitly contained in the map, or {{None}} if not explicitly contained, even if a default value is provided.  I understand that this is coming from the underlying Map without defaults.  {{.default(key)}} will return the default if defined, or throw an exception; but there's no way to know if a default is defined.

The defaults are also discarded when calling certain Map-returning methods, such as {{filterKeys}}, {{tail}}, or even {{+}}.  

I don't know enough about the current implementation, or about {{CanBuildFrom}} etc., to know how silly this is, but really, you can't tell what's going on, and can't use them without exception handlers.

In my opinion, if the standard lib supports Maps with defaults, they should have a distinct type, not discard data, and methods like {{.default(key)}} should not be present on Maps that don't have defaults.

Thanks and please forgive any errors!
