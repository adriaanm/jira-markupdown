{code}
abstract class M
{
    def f: List[M] = Nil
}

object M1 extends M

object M2 extends M
{
    override def f = List(M1)
}

object M3 extends M
{
    override def f = List(M1)
    override def f = List(M1)
}

object M4 extends M
{
    override def f = List(
        M3,
        M2
    )
}
{code}

{code}
error: method f is defined twice
    override def f = List(M1)
                 ^
Exception in thread "main" java.lang.AssertionError: assertion failed: List(method f, method f)
	at scala.tools.nsc.symtab.Symbols$$Symbol.suchThat(Symbols.scala:1061)
	at scala.tools.nsc.symtab.Types$$$$anonfun$$32.apply(Types.scala:4546)
	at scala.tools.nsc.symtab.Types$$$$anonfun$$32.apply(Types.scala:4545)
	at scala.collection.TraversableLike$$$$anonfun$$map$$1.apply(TraversableLike.scala:240)
	at scala.collection.TraversableLike$$$$anonfun$$map$$1.apply(TraversableLike.scala:240)
	at scala.collection.LinearSeqLike$$class.foreach(LinearSeqLike.scala:88)
	at scala.collection.immutable.List.foreach(List.scala:45)
	at scala.collection.TraversableLike$$class.map(TraversableLike.scala:240)
	at scala.collection.immutable.List.map(List.scala:45)
	at scala.tools.nsc.symtab.Types$$class.lubsym$$1(Types.scala:4545)
	at scala.tools.nsc.symtab.Types$$$$anonfun$$34.apply(Types.scala:4576)
	at scala.tools.nsc.symtab.Types$$$$anonfun$$34.apply(Types.scala:4571)
	at scala.collection.LinearSeqLike$$class.foreach(LinearSeqLike.scala:88)
	at scala.collection.immutable.List.foreach(List.scala:45)
	at scala.tools.nsc.symtab.Types$$class.lub0$$1(Types.scala:4571)
	at scala.tools.nsc.symtab.Types$$class.lub(Types.scala:4595)
	at scala.tools.nsc.symtab.SymbolTable.lub(SymbolTable.scala:13)
	at scala.tools.nsc.symtab.Types$$class.solveOne$$1(Types.scala:4342)
...
{code}
