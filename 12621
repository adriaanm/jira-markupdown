This is basically another re-incarnation / a duplicate of SI-9111.

Changing the example a little:

A.java
{code}
public class A {
  public static class AInner {
    public static interface InnerInterface { }
  }
}
{code}
B.java
{code}
public class B {
  public static class BInner extends A.AInner  {
    public class ProblemClass implements InnerInterface { }
  }
}
{code}
Test.scala
{code}
object Main {
  def main(args: Array[String]): Unit = {
    // new B() // this still causes the crash reported in this ticket
    val bi = new B.BInner
    new bi.ProblemClass()
  }
}
{code}

The above doesn't compile (in mixed compilation), neither on 2.11, nor on 2.12:
{noformat}
$ scalac11 A.java B.java Test.scala
B.java:3: error: not found: type InnerInterface
    public class ProblemClass implements InnerInterface { }
                                         ^
one error found
{noformat}

This is due to the way the Scala compiler interprets Java static member classes, see SI-9111.

When the Scala code does {{new B()}} instead, it crashes in the backend. The reason is that the new backend causes some more types to be completed eagerly, something that has lead to other issues already and we should work on. But we have a workaround for SI-9111 in the backend, and I hope it can be extended to this bug. Will check tomorrow.
