try to compile next text:
```scala
package stringtag

import scala.reflect.runtime.universe._

abstract class PrimitiveTC[X:TypeTag] {
   def is[T:TypeTag]: Boolean = typeOf[X] <:< typeOf[T]
}

object StringTypeTag extends PrimitiveTC[String]
```

receive:
No TypeTag available for String
```scala
materializing requested reflect.runtime.universe.type.TypeTag[String] using `package`.this.materializeTypeTag[String](scala.reflect.runtime.`package`.universe)
reifying = String
universe = scala.reflect.runtime.`package`.universe
mirror = <empty>
Locatable: type String (type) owned by object Predef (module class) at scala.Predef
=============================
// produced from source-C:\Projects\Kepler\sandbox\Test.scala,line-7,offset=160
object Test extends App {
  val $u: scala.reflect.runtime.`package`.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass.getClassLoader);
  import $u._, $m._
  val tpe = TypeRef(SingleType(ThisType(staticPackage("scala").asModule.moduleClass), staticModule("scala.Predef")), build.selectType(staticModule("scala.Predef").asModule.moduleClass, "String"), List())
  println(tpe)
}
=============================
Test.scala:7: cannot materialize TypeTag[String] as {
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass.getClassLoader);
  $u.TypeTag.apply[String]($m, {
    final class $typecreator1 extends TypeCreator {
      def <init>(): $typecreator1 = {
        $typecreator1.super.<init>();
        ()
      };
      def apply[U >: Nothing <: scala.reflect.base.Universe with Singleton]($m$untyped: MirrorOf[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.TypeRef($u.SingleType($u.ThisType($m.staticPackage("scala").asModule.moduleClass), $m.staticModule("scala.Predef")), $u.build.selectType($m.staticModule("scala.Predef").asModule.moduleClass, "String"), scala.collection.immutab
le.List.apply())
      }
    };
    new $typecreator1()
  })
} because:
scala.reflect.internal.Types$TypeError: this can be used only in a class, object, or template
object StringTypeTag extends PrimitiveTC[String]
                     ^
Test.scala:7: `package`.this.materializeTypeTag[String](scala.reflect.runtime.`package`.universe) is not a valid implicit value for reflect.runtime.universe.TypeTag[String] because:
failed to typecheck the materialized tag:
No TypeTag available for String
object StringTypeTag extends PrimitiveTC[String]
                     ^
Test.scala:7: error: No TypeTag available for String
object StringTypeTag extends PrimitiveTC[String]
                     ^
one error found
```
