Thanks for the fast fix.

I think the debate about "implicit classes" which comes up once in a while is closely related to that.

One use-case for implicit constructors would be to replace the current "implicit def + wrapper class"-pattern:
```scala
class Foo(value: Int)

implicit def int2Foo(i: Int) = new Foo(i)
```

by an "equivalent":
```scala
class Foo implicit (value: Int)
```

So basically reducing the need for these simple "trampoline" methods calling constructors.

I'm not sure which role secondary secondary constructors would play here ...

In the end I would prefer it if primary/secondary constructors would behave as much as possible as "normal" methods in this question.
