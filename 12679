This looks not easy to fix unfortunately.

For a `try-finally`, the `finally` block is emitted in 3 copies
- once as a handler, if an exception is thrown in the `try` block (or any `catch` block)
- once for ordinary control flow
- once for `return` statements within the `try` block

`return` statements within the `try` are replaced by a store (if there's a return value) and a jump to the 3rd finally copy (called "cleanup"). This is handled in `genReturn`.

The classfile spec requires the stack to be the same (height and types) for all branches to a location. In the example, the at the first {{return}}, there's a value on the stack (the receiver of method {{m}}), at the second {{return}} there isn't. What we should do is insert {{drop}} operations until the stack is clear, but we don't keep track of the stack height in our code generator.

In 2.11.x, `returns` were handled differently: the `finally` block was inlined into the `try` block above every `return`.

Ideas welcome, cc @retronym.
