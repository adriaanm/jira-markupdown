I've been seeing this error when I attempt to compile in sbt.
```
[error] /code/zensey/web/CareLiftUtil/src/main/scala/com/careverge/lift/snippet/shared/PartnerDispatchSnippet.scala:70: object AffiliationParams is not a case class constructor, nor does it have an unapply/unapplySeq method
[error]               case AffiliationParams(partnerName,client,language) => {
[error]                    ^
```

It only appears to be a problem when I compile the file using sbt but not when I use IntelliJ IDEA.

Does overriding the apply method bork the unapply method working for the primary constructor params?

Here is the code stripped to the offending case. I haven't had time to narrow it down further, but this (plus the Lift library -- any version should do) should be enough to cause the issue(?).

Sorry I can't spend more time debugging this to isolate the issue... :(

PS: Sorry for the ugly amount of implicit conversions (this was early in my Scala exploration)
```scala
import net.liftweb.util.Helpers._
import net.liftweb.sitemap.{NormalLocPath, *, LocPath}
import scala.annotation.tailrec

object Example {

  sealed trait PartnerDispatchParams {

    def partner: Option[AffiliationTarget]

    def client: Option[String]

    def language: Option[String]
  }

  /**
   * Partner in this context refers directly to the business partner we are proving a custom landing endpoint for.
   * Client in this context refers to the way a client is connecting to our system. In most cases, SSO
   */
  case class AffiliationParams(affiliation: AffiliationTarget, client: Option[String], language: Option[String])
    extends PartnerDispatchParams {

    val partner = Some(affiliation)
  }

  object AffiliationParams {

    def apply(affiliation: String, client: Option[String], language: Option[String]): AffiliationParams =
      this(AffiliationTarget.findOrThrow(affiliation), client, language)
  }

  /**
   * An unaffiliated user has no identifiably associated partner or client.
   */
  case object Unaffiliated extends PartnerDispatchParams {
    val partner = None
    val client = None
    val language = None
  }

  trait PartnerDispatchSnippet extends PathBuilder {
    def params: PartnerDispatchParams
    protected lazy val parts = ^
    def dispatch = {
      val calcParams = params

      def affiliateTemplate = calcParams match {
        case AffiliationParams(partnerName,client,language) => {
          // Look for the partner specific template
          // Note: Optional strings are only appended if they are defined,
          // and client cannot be defined unless partner is defined
          val search = ^ / partnerName.target / client / language
          ???
        }
        case Unaffiliated => None
      }

      ???
    }
  }

  /**
   * This is the base of all models received or sent to our API.
   *
   * It can also serve as a marker for any value objects held within
   * a model that is sent from the API, but never sent directly.
   */
  trait ApiModel

  /**
   * The base type of all models that are RECEIVED from the API.
   */
  trait ApiBase extends ApiModel

  /**
   * Strongly-typed name of the {@link Affiliation}.
   *
   * While it is not ideal to have a constant that reflects what is in the database, the affiliation rework happened
   * after the affiliation names were hard-coded into the code. This class exists to replace the stringly-typed form
   * with a strongly-typing form so if/when we eliminate this class it will be easier to clean up. This also makes a
   * clear distinction from {@link AffiliationTarget}, which suffer from a very similar problem.
   *
   * To expound on the clean up, there should be an enhancements to the {@link AffiliationService} so that it can answer
   * various questions about what to do instead of manually comparing the name.
   *
   * I did not make this deprecated because its used so heavily that it just creates noise.
   */
  sealed case class AffiliationName(name: String) extends ApiBase

  object AffiliationName {

    val Cigna = AffiliationName("cigna")
    val FloridaBlueEmployees = AffiliationName("floridablueEmployees")
    val FloridaBlueExchange = AffiliationName("floridablueExchange")
    val FloridaBlueSpanish = AffiliationName("floridablueSpanish")

    private val values = Seq(Cigna, FloridaBlueEmployees, FloridaBlueExchange, FloridaBlueSpanish)

    def find(name: String): Option[AffiliationName] = values.find(x => x.name == name)

    def unapply(name: String): Option[AffiliationName] = find(name)

    /**
     * Helper method to find an {@link AffiliationTarget} by name. This throws if no match, which is what should happen
     * in most cases -- if the affiliation exists it must have a recognized name.
     */
    def findOrThrow(name: String): AffiliationName =
      find(name).getOrElse(throw new IllegalArgumentException("no AffiliationName for " + name))

  }

  /**
   * The targets of affiliations are standardized because they may be compared. Using raw strings opens us the door to
   * mismatches and confusion. (A good example of this is for the coaching field, where the value of the coaching field
   * will be compared to the payer field to determine if coach X can work with user Y.)
   *
   * Note that if we move away from comparing strings directly this enumeration may be unnecessary or may be able to
   * reduced in visibility.
   */
  sealed case class AffiliationTarget(target: String) extends ApiBase

  object AffiliationTarget {

    val Cigna = AffiliationTarget("cigna")
    val FloridaBlue = AffiliationTarget("floridablue")

    private val values = Seq(Cigna, FloridaBlue)

    def find(target: String): Option[AffiliationTarget] = values.find(x => x.target == target)

    def unapply(target: String): Option[AffiliationTarget] = find(target)

    /**
     * Helper method to find an {@link AffiliationTarget} by name. This throws if no match, which is what should happen
     * in most cases -- if the affiliation exists it must have a recognized name.
     */
    def findOrThrow(target: String): AffiliationTarget =
      find(target).getOrElse(throw new IllegalArgumentException("no AffiliationTarget for " + target))

    /**
     * Figures out the {@link AffiliationTarget} from the {@link Affiliation#name}. This exists as a sort of hold-over,
     *
     */
    def fromAffiliationName(name: AffiliationName): AffiliationTarget = {
      name match {
        case AffiliationName.Cigna => AffiliationTarget.Cigna
        case AffiliationName.FloridaBlueExchange |
             AffiliationName.FloridaBlueEmployees |
             AffiliationName.FloridaBlueSpanish => AffiliationTarget.FloridaBlue
        case _ => throw new IllegalArgumentException("Unknown affiliation name")
      }
    }
  }

  trait PathPartException {
    this: Exception =>
  }

  class PathPartConstructionException(message: String)
    extends IllegalArgumentException("Error constructing PathPart from String: " + message)
    with PathPartException

  class PathPartSplitException(message: String)
    extends IllegalArgumentException("Error splitting absolute path into PathParts: " + message)
    with PathPartException

  object ^ extends PathParts()

  case class PathParts(parts: NormalPathPart*) {
    def / (part: String): PathParts = PathParts((parts :+ NormalPathPart(part)): _*)
    def / (partOpt: Option[String]): PathParts = (partOpt: PathPart) match {
      case EmptyPathPart => this
      case part: NormalPathPart => PathParts((parts :+ part): _*)
    }
    def / (part: NormalPathPart): PathParts = PathParts((parts :+ part): _*)
    def / (part: LocPath): PathParts = PathParts((parts :+ {
      part match {
        case * => NormalPathPart("*")
        case NormalLocPath(pathItem) => NormalPathPart(pathItem)
      }
    }): _*)
    def / (that: PathParts): PathParts = PathParts(this.parts ++ that.parts: _*)

    def fullUrl: String = "/" + parts.map(_.slug).mkString("/")
  }
  object PathParts {
    // Convert to PathParts
    implicit def listPathPartToPathParts(parts: List[PathPart]): PathParts = PathParts(parts: _*)

    // Convert from PathParts
    implicit def pathPartsToString(parts: PathParts): String = parts.fullUrl

    implicit def pathPartsToListPathPart(path: PathParts): List[NormalPathPart] = path.parts.toList

    implicit def pathPartsToSeqString(path: PathParts): Seq[String] = path.parts.map{ _.slug }

    implicit def pathPartsToListString(path: PathParts): List[String] = path.parts.map{ _.slug }.toList
  }

  case class NormalPathPart(slug: String) extends PathPart(slug, false)

  case object EmptyPathPart extends PathPart("", true)

  sealed abstract class PathPart(val slugOpt: Option[String], val optional: Boolean) {
    if (!optional && slugOpt.isEmpty)
      throw new PathPartConstructionException("Non optional PathPart cannot be empty: " + this.toString)
    if (slugOpt exists { _ exists { _ == '/' } })
      throw new PathPartConstructionException("PathPart cannot contain a slash.")

    def this(slug: String, optional: Boolean) = this(if (slug.isEmpty) None else Some(slug), optional)
  }

  object PathPart {

    def apply(slug: String): PathPart = if (slug.isEmpty) EmptyPathPart else NormalPathPart(slug)

    def apply(slug: LocPath): PathPart = if (slug.wildcard_?) apply("*") else apply(slug.pathItem)

    /**
     * Attempts to split the given string into a path list
     * @param absolutePath an absolute path to split
     * @throws IllegalArgumentException if the given string doesn't start with a / or contains empty path parts
     * @return The path parts as a list
     */
    def splitAbsPath(absolutePath: String): List[NormalPathPart] = {
      if (absolutePath.charAt(0) != '/')
        throw new PathPartSplitException("Path is not absolute (does not start with '/'): \"%s\"".format(absolutePath))
      val parts = absolutePath.split('/')
      if (parts.isEmpty) Nil
      else parts.tail.map{ NormalPathPart(_) }.toList
    }

    implicit def strToNormalPathPart(part: String): NormalPathPart = NormalPathPart(part)

    implicit def locPathToPathPart(part: LocPath): NormalPathPart = NormalPathPart(if (part == *) "*" else part.pathItem)

    implicit def optionStringToPathPart(part: Option[String]): PathPart = PathPart(part.getOrElse(""))

    implicit def strToListNormalPathParts(part: String): List[NormalPathPart] = List(NormalPathPart(part))

    implicit def locPathToListNormalPathPart(part: LocPath): List[NormalPathPart] = List(part)

    implicit def seqStrToListNormalPathParts(parts: Seq[String]): List[NormalPathPart] =
      (parts map { part => NormalPathPart(part) }).toList

    /* Convert between PathPart and OptionalPathPart */
    implicit def listPathPartsToListNormalPathParts(optionalParts: List[PathPart]): List[NormalPathPart] =
      optionalParts collect {
        case part: NormalPathPart => part
      }

    /* Converting PathParts into List[String] */
    implicit def normalPathPartToString(part: NormalPathPart) = part.slug
    implicit def seqPathPartsToListString(parts: Seq[PathPart]): Seq[String] =
      parts map { _.slugOpt.getOrElse("") }
    implicit def listPathPartsToListString(parts: List[PathPart]): List[String] =
      parts map { _.slugOpt.getOrElse("") }
    implicit def listNormalPathPartsToListString(parts: List[NormalPathPart]): List[String] =
      parts map {
        part => urlEncode(part.slug)
      }
  }

  trait PathBuilder {

    /**
     * Added to all route url matching with the / operator
     */
    protected def parts: Seq[NormalPathPart]

    /**
     * PathParts object containing all the parts built up to the point of the first wildcard.
     */
    object ^** extends PathParts(
      parts takeWhile {
        _.slug != "*"
      }: _*)

    /**
     * Convert some PathParts object into a full url
     */
    implicit def pathPartsToString(path: PathParts): String = path.parts.toSeq.mkString("/")

    /**
     * Pattern extractor that splits a list of path part strings so that it can be matched using PathParts objects.
     */
    object / {

      def unapply(path: List[String]): Option[(PathParts, String)] = path match {
        case Nil => None
        case parts =>
          val init = PathParts(parts.init: _*)
          val leading = if (^**.parts == init.parts) ^** else init
          Some(leading, parts.last)
      }

      def unapply(mid: PathParts): Option[(PathParts, String)] = mid.parts match {
        case Seq() => None
        case q: Seq[NormalPathPart] =>
          val init = PathParts(q.init: _*)
          val leading = if (^**.parts == init.parts) ^** else init
          Some(leading, q.last.slug)
      }
    }
  }
}
```
