The fix didn't fix this regression related to forward-references, implicits without return types, and fallback to the implicit scope exercised by ScalaTest. I haven't managed to extricate this from Scalatest.

{code}
package org.scalatest

import org.scalautils.Equality
import org.scalautils.NormalizingEquality
import org.scalautils.Normalization
import org.scalautils.StringNormalizations._
import SharedHelpers._

class ListShouldContainSpec extends Spec with Matchers {
  val some: Option[String] = Some("hi")

  {
    val wrap = ListShouldContainSpec.this.convertToAnyShouldWrapper[Option[String]](ListShouldContainSpec.this.some)
    // forward reference to `implicit val e` reported in 2.10.2, in 2.10.1 companion implicit for Equality[String] was used as the implicit argument to `being`.
    wrap.should(contain("HI"))(ListShouldContainSpec.this.after.being(org.scalautils.StringNormalizations.lowerCased)/*(implicitly[Equality[String]])*/)
    wrap.should(contain("HI"))(ListShouldContainSpec.this.after.being(org.scalautils.StringNormalizations.lowerCased)/*(implicitly[Equality[String]])*/)

    // annotate type and the forward reference error is issued under 2.10.1
    implicit val e /*Equality[String]*/ = new Equality[String] {
      def areEqual(a: String, b: Any): Boolean = a != b
    }
  }
}
{code}
