I have a very simple macro [here|https://github.com/cb372/enumerate/blob/bugreport/src/main/scala/enumerate/package.scala] that makes use of {{ClassSymbol.knownDirectSubclasses}}

The macro is invoked in the test ([EnumerateSpec.scala|https://github.com/cb372/enumerate/blob/bugreport/src/test/scala/enumerate/EnumerateSpec.scala]). It works as expected when you pass it the type of trait {{Foo}}, which is defined in {{src/main}}. But when you pass it the type of trait {{Goo}}, which is defined in {{src/test}}, it cannot find any of the trait's subclasses. ({{ClassSymbol.knownDirectSubclasses}} returns an empty Set, as you can see from the {{println}} output.)

If you checkout the {{bugreport}} branch of https://github.com/cb372/enumerate and run {{sbt test}} you can see for yourself.

The weird thing is, if you then make an edit to {{src/main/scala/enumerate/package.scala}}, triggering recompilation, then the macro starts working as expected and the tests pass. So I'm guessing this is somehow related to compilation order.

At first I thought it might be a thread-safety issue similar to SI-6240, but as far as I can tell the Symbol has already been initialized. Manually calling {{initialize}}, {{info}}, etc. before {{knownDirectSubclasses}} did not fix the problem.
