I'm having an issue in one of my applications where it is crashing about once every week or so due to a slow, steady memory leak. For brief overview of a recent heap dump in VisualVM, please watch this brief video I've recorded: http://screencast.com/t/3qiNuzwa

After doing my best to reason about the problem, and still admittedly rather confused about the issue, this is the best hypothesis I can form:

- There are several process-lifetime long instances of {{scala.reflect.runtime.ThreadLocalStorage$MyThreadLocalStorage}} allocated here: https://github.com/scala/scala/blob/v2.11.2/src/reflect/scala/reflect/runtime/SynchronizedTypes.scala#L53

- Running any scala reflection code in a thread causes that thread to be permanently referenced as a key in the {{MyThreadLocalStorage}} {{ConcurrentLinkedHashMap}}: https://github.com/scala/scala/blob/v2.11.2/src/reflect/scala/reflect/runtime/ThreadLocalStorage.scala#L24

- After old threads worker threads die and new ones are spawned, references to the old are retained as keys in {{ConcurrentHashMap}} residing in {{ThreadLocalStorage$MyThreadLocalStorage}}; eventually, all memory is consumed and the JVM crashes.

I did my best to capture a stack-trace of when these thread references are being inserted into the {{ThreadLocalStorage}}:

{quote}
promotion-api scala.reflect.runtime.ThreadLocalStorage$MyThreadLocalStorage.set(ThreadLocalStorage.scala:30)
promotion-api scala.reflect.runtime.SynchronizedTypes$class.subsametypeRecursions_$eq(SynchronizedTypes.scala:55)
promotion-api scala.reflect.runtime.JavaUniverse.subsametypeRecursions_$eq(JavaUniverse.scala:16)
promotion-api scala.reflect.internal.tpe.TypeComparers$class.isSubType(TypeComparers.scala:284)
promotion-api scala.reflect.internal.SymbolTable.isSubType(SymbolTable.scala:16)
promotion-api scala.reflect.internal.Types$Type.$less$colon$less(Types.scala:779)
promotion-api scala.reflect.internal.Types$Type.$less$colon$less(Types.scala:260)
promotion-api scaldi.TypeTagIdentifier.sameAs(Identifier.scala:46)
promotion-api scaldi.Identifiable$$anonfun$isDefinedFor$2$$anonfun$apply$4.apply(Binding.scala:10)
promotion-api scaldi.Identifiable$$anonfun$isDefinedFor$2$$anonfun$apply$4.apply(Binding.scala:10)
promotion-api scala.collection.LinearSeqOptimized$class.exists(LinearSeqOptimized.scala:79)
promotion-api scala.collection.immutable.List.exists(List.scala:83)
promotion-api scaldi.Identifiable$$anonfun$isDefinedFor$2.apply(Binding.scala:10)
promotion-api scaldi.Identifiable$$anonfun$isDefinedFor$2.apply(Binding.scala:10)
promotion-api scala.collection.LinearSeqOptimized$class.forall(LinearSeqOptimized.scala:69)
promotion-api scala.collection.immutable.List.forall(List.scala:83)
promotion-api scaldi.Identifiable$class.isDefinedFor(Binding.scala:10)
promotion-api scaldi.LazyBinding.isDefinedFor(Binding.scala:65)
promotion-api scaldi.Module$$anonfun$getBindingInternal$1.apply(Module.scala:24)
promotion-api scaldi.Module$$anonfun$getBindingInternal$1.apply(Module.scala:24)
promotion-api scala.collection.LinearSeqOptimized$class.find(LinearSeqOptimized.scala:99)
promotion-api scala.collection.immutable.List.find(List.scala:83)
promotion-api scaldi.Module$class.getBindingInternal(Module.scala:24)
promotion-api com.spingo.promotion.Global$$anon$1.getBindingInternal(Boot.scala:83)
promotion-api scaldi.InjectorWithLifecycle$$anonfun$getBinding$3.apply(Injector.scala:138)
promotion-api scaldi.InjectorWithLifecycle$$anonfun$getBinding$3.apply(Injector.scala:138)
promotion-api scaldi.util.Util$WorkflowHelper$.$bar$greater$extension(Util.scala:7)
promotion-api scaldi.InjectorWithLifecycle$class.getBinding(Injector.scala:138)
promotion-api com.spingo.promotion.Global$$anon$1.getBinding(Boot.scala:83)
promotion-api scaldi.Injectable$class.scaldi$Injectable$$injectWithDefault(Injectable.scala:43)
promotion-api scaldi.Injectable$$anonfun$inject$1.apply(Injectable.scala:22)
promotion-api scaldi.Injectable$$anonfun$inject$1.apply(Injectable.scala:22)
promotion-api scaldi.util.Util$WorkflowHelper$.$bar$greater$extension(Util.scala:7)
promotion-api scaldi.Injectable$class.inject(Injectable.scala:22)
promotion-api scaldi.Injectable$.scaldi$OpenInjectable$$super$inject(Injectable.scala:91)
promotion-api scaldi.OpenInjectable$class.inject(Injectable.scala:73)
promotion-api scaldi.Injectable$.inject(Injectable.scala:91)
promotion-api com.spingo.promotion.actors.HttpActor.<init>(HttpActor.scala:53)
promotion-api com.spingo.promotion.ActorBindings$$anonfun$26$$anonfun$apply$2.apply(Boot.scala:66)
promotion-api com.spingo.promotion.ActorBindings$$anonfun$26$$anonfun$apply$2.apply(Boot.scala:66)
promotion-api akka.actor.TypedCreatorFunctionConsumer.produce(Props.scala:343)
promotion-api akka.actor.Props.newActor(Props.scala:252)
promotion-api akka.actor.ActorCell.newActor(ActorCell.scala:552)
promotion-api akka.actor.ActorCell.create(ActorCell.scala:578)
promotion-api akka.actor.ActorCell.invokeAll$1(ActorCell.scala:456)
promotion-api akka.actor.ActorCell.systemInvoke(ActorCell.scala:478)
promotion-api akka.dispatch.Mailbox.processAllSystemMessages(Mailbox.scala:263)
promotion-api akka.dispatch.Mailbox.run(Mailbox.scala:219)
promotion-api akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:393)
promotion-api scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
promotion-api scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
promotion-api scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
promotion-api scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)
{quote}

(Line numbers for {{ThreadLocalStorage.scala}} are off because I'd added some code to help with debugging)

It seems that {{ThreadLocalStorage}} should use a storage mechanism that allows for garbage collection of the keys, such as {{WeakHashMap}}.

I have pushed a suggested fix to github, here:

https://github.com/spingo/scala/tree/issue/SI-8946

I am open to suggestions on how to write an effective test for this.
