Some examples of the scala package documentation.
```scala
  // these are "too little"
  type AbstractMethodError = AbstractMethodError
  type AnyRef = AnyRef

  // these are "too much"
  class Unit extends Any with AnyVal
  case class Cell [+T] (elem: T) extends Product with Serializable
  class cloneable extends Annotation with StaticAnnotation
```

1) type AnyRef = AnyRef should not have made it out of the gate.

2) we can't want to include "Product with Serializable" on every case class in the world.

3) the definition of cloneable is "extends StaticAnnotation". It is quite an unfortunate and noisy penalty if every such annotation has to be characterized as "extends Annotation with StaticAnnotation" just because Annotation is an abstract class and not a trait.  Let's say that not burying people in redundant information is more important than being 100% consistent about how we present the parents and say "extends StaticAnnotation".  The problem of "Any wiht AnyVal" is similar; scaladoc is thinking AnyVal is a trait.  The AnyVal bits I can special case for now.

4) Same thing with "extends AnyRef".  If we consider it advantageous to be able to omit this when writing the code, surely it's also advantageous not to have to read it on every class for which AnyRef is the only parent.  Documentation is about presenting information usefully, a purpose which is not served by never omitting anything.

5) Do we have the capability to link to javadoc? If not that's pretty glaring.  If so, all those dozens of aliases which presently say "type Foo = Foo" should in addition to saying "type Foo = java.lang.Foo", link to the java class.  This is the minimum people expect of documentation.

6) Prefixes seem to be discarded in almost all cases.  So everything which uses any enum is of type "Value", and even the link goes straight to Enumeration.Value. [[http://www.scala-lang.org/api/rc/scala/swing/Oriented.html Example]]. You're down to reading the source code at that point. (On the plus side, there is a link to the source code.)

I have fixed some of the prefix issues locally, but scaladoc makes it difficult to do in a principled fashion.  I don't want to check in code that does a bunch of string manipulations to get the right output, but it would be far superior to not fixing these issues.
