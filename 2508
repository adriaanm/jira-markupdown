Output from the simpler test case. Note the different return type of TestMethod after the typer phase. Either the projection type is too eagerly expanded now, or the pickler should be updated to avoid writing an EXTref to the type param 'B'.
```scala
~/code/scratch/BugPartialApply> ./test.sh 
+ mkdir -p classes27
+ mkdir -p classes28
+ rm 'classes27/*class'
+ rm 'classes28/*class'
+ /Users/jason/usr/scala-2.7.6.final/bin/scalac -d classes27 Test0.scala
+ /Users/jason/usr/scala-2.7.6.final/bin/scalac -d classes27 -classpath classes27 -Xprint:typer Test.scala
[[syntax trees at end of typer]]// Scala source: Test.scala
package <empty> {
  final object Test extends java.lang.Object with ScalaObject {
    def this(): object Test = {
      Test.super.this();
      ()
    };
    def TestMethod[TestMethodTypeParam >: Nothing <: Any]: TraitWithExistenstialParam[PartialApply1Of2[TraitWithTwoTypeParams,TestMethodTypeParam]#Apply] = scala.this.Predef.error("stub")
  }
}

+ /Users/jason/usr/scala-2.7.6.final/bin/scalac -d classes27 -classpath classes27 -classpath . UseTest.scala
+ /Users/jason/usr/scala-2.8.0.r19120-b20091017023354/bin/scalac -d classes28 Test0.scala
+ /Users/jason/usr/scala-2.8.0.r19120-b20091017023354/bin/scalac -d classes28 -classpath classes28 -Xprint:typer Test.scala
[[syntax trees at end of typer]]// Scala source: Test.scala
package <empty> {
  final object Test extends java.lang.Object with ScalaObject {
    def this(): object Test = {
      Test.super.this();
      ()
    };
    def TestMethod[TestMethodTypeParam >: Nothing <: Any]: TraitWithExistenstialParam[[B]TraitWithTwoTypeParams[B,TestMethodTypeParam]] = scala.this.Predef.error("stub")
  }
}

+ /Users/jason/usr/scala-2.8.0.r19120-b20091017023354/bin/scalac -d classes28 -classpath classes28 -classpath . UseTest.scala
error: class file needed by Test is missing.
reference type B of type Apply refers to nonexisting symbol.
one error found
```
