I recently have been playing a lot with the parallel collections and have been using {{GenIterable}}, {{GenSeq}} and {{GenMap}} more often in the code I write, wherever they are suitable.

Unfortunately, what they are still missing are the sorting functions {{sorted}}, {{sortBy}} and {{sortWith}} - not just with the parallel collection, as they are currently provided just for {{scala.collection.SeqLike}}.

Of course I can use {{someCollection.toSeq.sorted}} and I know this is not much boilerplate, but it can be reduced. A little more awkward is sorting a {{Map}}, especially when using {{groupBy}}, because it does not return a sorted {{Map}}, which then has to be passed to {{TreeMap}} explicitly.

To summarize, really awesome would be:

- parallel sorting, e.g. some kind of divide and conquer merge sort, as it has been suggested at scala-debate
- {{sorted}}, {{sortBy}} and {{sortWith}} at the top of the collection hierarchy, i.e. {{GenTraversableOnce}}, even if they are just forwarders, e.g. {{toSeq.sorted}}, to reduce boilerplate - of course, better, more suitable, i.e. efficient, algorithms should be implemented later
