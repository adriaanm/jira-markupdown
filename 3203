After some research I found that this happens only in projects with multiple source folders. Output folders do not matter, the source folders can have the same or different output folders.

*Steps to reproduce the bug*

 1. Create a Scala project
 2. Add the JUnit 4 library to the build-path
 3. Create a folder, named _test_ and add it to the build-path as a source folder
 4. Create a package named _bug_ under the _test_ directory
 5. Create a dummy JUnit 4 test (with one empty method annotated with @Test) under the _bug_ package

After step 5 if we try to run the JUnit test case it will _run successfully_.

 6. Create a package with the same name (_bug_) under the _src_ directory (that was created by default)
 7. Create a class or object under that package (for example an object named _Main_)

Now if we try to run the JUnit test again we will get an info dialog with the message: "The input type of the launch configuration does not exist".

Please note that the test will run if the directory that was created when we created the package under _src_ does not contain any files (it can contain directories that contain files, if we create a subpackage and move _Main_ there) or if it has a different name from the directory where the test case in located (for example test/bug for the test case and src/pack for the code).

Also the package declared in the source files does not matter, all that matters is where the files are located. For example if we place _Main_ under the default package but declare it to be under _bug_ then the test will run.

As I've said earlier this happen when we try to run an individual file and not all the files under a source folder or package. 

Sorry for not researching the bug earlier but I use separate test and application folders and I also place the code and the test cases under the same package (a common convention) so the bug appeared in all of my project and I failed to narrow it down.
