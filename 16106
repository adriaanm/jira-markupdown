As suggested in this thread: http://www.scala-lang.org/node/9080 and endorsed by no less an authority than Alexander Spoon...

Let us stop pursuing the madness of a centralized, adjunct toString method which trades the deficiencies of java's toString for a new set of deficiencies: namely, that all this string logic is hardcoded in one place.  The fact that things can define their own toString methods is a good thing.  Let's get the baby back from the bathwater.

To summarize for anyone new to the game: there are two major issues with toString which cannot be dealt with without a different method.  One is that no sane language would either a) force everyone to do a null check on every call to toString or b) throw NPEs just because you're trying to print a null reference.  But here we are.

There are three abstract methods in class Any where we inherit implementations from java: equals, hashCode, and toString.  Here is where we stand with those methods and their issues.  Drink in the symmetry.  Also, this one would have far less impact than the other two.
{code}
  // not null-safe, some classes give insensible scala answers
  // solution: def ==(other: Any): Boolean
  def equals(other: Any): Boolean

  // not null-safe, some classes give insensible scala answers
  // solution: def ## : Int
  def hashCode(): Int

  // not null-safe, some classes give insensible scala answers
  // solution: Coming Soon!
  def toString(): String
{code}
The insensible answers for equals and hashCode come from the boxed types: 1L == 1, but new Long(1).equals(new Integer(1)) is false.  So we said "let us do better" and we did.

The insensible answers for toString come from Array, possibly among other things.  I'm sure a non-overridable, non-delegatable, non-interceptible toString method for Arrays which prints a meaningless jumble of characters seemed like a good idea at the time.  Here we see Array through the eyes of the repl, followed by its true, horrifying visage.
{code}
scala> Array(1)
res1: Array[Int] = Array(1)

scala> println(Array(1))
[I@f0d797f
{code}
But it is not enough to intercept Array's toString, because anything which is composed of the strings of smaller elements will eventually arrive at Array and print that stupid squiggle.
{code}
scala> List(Array(1))
res2: List[Array[Int]] = List(Array(1))

// this involves rewriting string calls bound for Tuple2,
// Set, List, and Array
scala> (Set(List(Array(1))), List(Array(List(1))))
res3: (scala.collection.immutable.Set[List[Array[Int]]], List[Array[List[Int]]]) = (Set(List(Array(1))),List(Array(List(1))))
{code}
When one does not have the luxury of a repl environment which rewrites all one's code not to use toString, this system breaks down.
When one has a collection which wants to fully control its own printing, this system breaks down.  (Witness recent lobbying by author of Graph classes for changes in stringOf.)

As to the name: it is sad and backward that we have so little punctuation which doesn't require unknown finger gymnastics, but there we are.  So not that many choices.

If only $$ weren't quite so busy and didn't have special status, $$$$ would be ideal.  In BASIC, $$ was used for String variables! It's like they saw this coming!

Please give this idea all consideration: my quantity of rejected ideas is getting a bit sad, and this one seems like a win at all levels.  Depending on the name.
