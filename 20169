Scala 2.9:

{noformat}
scala> val m = collection.mutable.ListMap[Int, Int]()
m: scala.collection.mutable.ListMap[Int,Int] = Map()

scala> m += 1 -> 1
res0: m.type = Map(1 -> 1)

scala> m += 2 -> 2
res1: m.type = Map(2 -> 2, 1 -> 1)

scala> m += 3 -> 3
res2: m.type = Map(3 -> 3, 2 -> 2, 1 -> 1)

scala> m += 4 -> 4
res3: m.type = Map(4 -> 4, 3 -> 3, 2 -> 2, 1 -> 1)

scala> m += 5 -> 5
res4: m.type = Map(5 -> 5, 4 -> 4, 3 -> 3, 2 -> 2, 1 -> 1)

scala> m -= 99
res5: m.type = Map(5 -> 5, 4 -> 4, 3 -> 3, 2 -> 2, 1 -> 1)

scala> m -= 3
res6: m.type = Map(5 -> 5, 4 -> 4, 2 -> 2, 1 -> 1)
{noformat}

but Scala 2.10.6 scrambles the order:

{noformat}
scala> val m = collection.mutable.ListMap[Int, Int]()
m: scala.collection.mutable.ListMap[Int,Int] = Map()

scala> m += 1 -> 1
res0: m.type = Map(1 -> 1)

scala> m += 2 -> 2
res1: m.type = Map(2 -> 2, 1 -> 1)

scala> m += 3 -> 3
res2: m.type = Map(3 -> 3, 1 -> 1, 2 -> 2)

scala> m += 4 -> 4
res3: m.type = Map(4 -> 4, 2 -> 2, 1 -> 1, 3 -> 3)

scala> m += 5 -> 5
res4: m.type = Map(5 -> 5, 3 -> 3, 1 -> 1, 2 -> 2, 4 -> 4)

scala> m -= 99
res5: m.type = Map(4 -> 4, 2 -> 2, 1 -> 1, 3 -> 3, 5 -> 5)

scala> m -= 3
res6: m.type = Map(1 -> 1, 2 -> 2, 4 -> 4, 5 -> 5)
{noformat}

The intent that either ListMap should preserve insertion order wasn't explicit in the doc until https://github.com/scala/scala/pull/4788 and https://github.com/scala/scala/pull/4994, and there's some confusion at http://stackoverflow.com/questions/7539924/why-do-mutable-and-immutable-listmaps-have-different-orders-in-scala and https://twitter.com/travisbrown/status/735201036873400321 about what the behavior should properly be.

But I think not preserving the order is just absurd. There's no downside to preserving. Also, note that http://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html#list_maps implies that the only reason to use a ListMap at all is if you care about the order.
