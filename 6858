Issues remain.

1) As detailed in email to scala-internals, the fix was overly specific and missed numerous unsound cases.

2) I also found that the current fix only works on explicitly declared types. For instance in t5189b.scala, if I let the return type be inferred:
{code}
def unwrap[T](x: AbsWrapperCov[T])/*: Wrapped[T]*/ = x match {
  case Wrapper/*[_ <: T ]*/(wrapped) => wrapped
}
{code}
Then it compiles - and infers Wrapped[T], unsoundly. I assume this is pt=WildcardType never coming to grips with the situation.

I believe the soundness issue requires an invariant something like: if the type of a GADT method (inferred or otherwise) uses the method's type parameters as type arguments, then either the corresponding class type parameters must be covariant, or the usages must be upper-bounded by the type parameter rather than the type parameter itself. Similar for contravariant/lower.

That doesn't address the type inference question - it has to infer Wrapped[_ <: T] rather than Wrapped[T] in the above example, and I'm not sure what that will take.

I also have serious doubts about the mitigation strategy taken with the original patch, i.e. adding a bunch of casts. Those casts look pretty unsafe, is there reason to believe otherwise?
