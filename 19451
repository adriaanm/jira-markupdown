{{tail}} is supposed to produce a new collection that doesn't depend on mutation of the existing one.  So is {{drop}}.  Not so with {{Queue}}:

{code}
scala> import scala.collection.mutable.Queue
import scala.collection.mutable.Queue

scala> val q = Queue(1,2,3)
q: scala.collection.mutable.Queue[Int] = Queue(1, 2, 3)

scala> val r = q.tail
r: scala.collection.mutable.Queue[Int] = Queue(2, 3)

scala> q.enqueue(4)

scala> r
res1: scala.collection.mutable.Queue[Int] = Queue(2, 3, 4)

scala> val s = q.drop(1)
s: scala.collection.mutable.Queue[Int] = Queue(2, 3, 4)

scala> q.enqueue(5)

scala> s
res3: scala.collection.mutable.Queue[Int] = Queue(2, 3, 4, 5)
{code}

This is a deeper problem than it might initially appear, as {{Queue}} is a {{LinearSeq}}, which means that it is supposed to have an efficient tail.  But of course it can't in the face of mutation.  So to fix this would require non-negligible reworking of the class hierarchy or painstaking overriding of methods that expect efficient tail.

This is not true of e.g. {{ArrayBuffer}}: tail really does create another collection.

My best idea presently is to create a marker trait for mutable collections that produce collections that are mutably entangled with the original.  Then at least you have some chance at detecting that everything is screwy.
