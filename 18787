Compiling this class works:

{code}
class Test5[@specialized(Float) T](val data : T) {
    data.asInstanceOf[Double] == 0.0f
}
{code}

Compiling this class fails:

{code}
class Test6[@specialized(Float) T](val data : T) {
    None match {
        case None => data.asInstanceOf[Double] == 0.0
    }
}
{code}

{noformat}
== Expanded type of tree ==

TypeRef(TypeSymbol(final abstract class Float extends ))

Unknown type: => None.type, => None.type [class scala.reflect.internal.Types$NullaryMethodType, class sca
la.reflect.internal.Types$NullaryMethodType] TypeRef? false
        at scala.reflect.internal.SymbolTable.abort(SymbolTable.scala:49)
        at scala.tools.nsc.Global.abort(Global.scala:254)
        at scala.tools.nsc.backend.icode.TypeKinds$class.toTypeKind(TypeKinds.scala:397)
        at scala.tools.nsc.backend.icode.ICodes.toTypeKind(ICodes.scala:20)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadSelect$1(GenICode.scala:1006)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICode
{noformat}

The stack trace is attached.

The problem goes away if you remove the @specialized(Float) annotation.
