Are you suggesting that =>? have meaning to the compiler and not be a simple type alias?

I'd love it if Scala's support for partial functions paralleled that of ordinary functions.  In other words it would be great to be able to write:
```scala
val f: (Int, Int) =>? String) = { case 0, 0 => "Two zeros"; case i, j => "Non-zeros: " + i + ", " + j }
```

and have f be of type PartialFunction2[Int, Int, String] (which extends Function2[Int, Int, String]).

There are probably reasons why it doesn't work this way now.
