The OR operator ("|") in the combinator parsing framework (parsers.scala) seems to be behaving strangely.  The the order seems to impact the outcome.

By running the simple program errorparse.scala from the command line, the last test, which should yield (Double,3.0) returns a match error.

>scala errorparse.scala "1+2"
(Int,3)

>scala errorparse.scala "1.0+2.0"
(Double,3.0)

>scala errorparse.scala "1.0+2"
(Double,3.0)

>scala errorparse.scala "1+2.0"
error: string matching regex `\z' expected but `.' found

By modifying the code (see errorparse.scala below) in the following way:

  def genexpr : Parser[Any] =  dexpr^^( x => ("Double",x.toDouble) ) | iexpr^^( x => ("Int",x.toInt) ) 

then scala errorparse.scala "1+2.0" will work correctly.


// errorparse.scala

import scala.util.parsing.combinator._


object Arith extends JavaTokenParsers {

  def genexpr : Parser[Any] = iexpr^^( x => ("Int",x.toInt) ) | dexpr^^( x => ("Double",x.toDouble) )

  def dexpr : Parser[Double] = dterm ~ "+" ~ dterm ^^ { case left ~ op ~ right => left + right }
                                           
  def dterm : Parser[Double] = """-?(\d+(\.\d*)?|\d*\.\d+)([eE][+-]?\d+)?[fFdD]?\w*""".r ^^ ( _.toDouble)
  
  def iexpr : Parser[Int] =  iterm ~ "+" ~ iterm ^^ { case left ~ op ~ right => left + right }
  
  def iterm : Parser[Int] = """-?\d+\w*""".r ^^ ( _.toInt)
  
  
  def run(input : String) = {
   
    parseAll(genexpr,input) match {
      case Success(e,_) => e.toString
      case f : NoSuccess => "error: "+f.msg
    }
    
  }
}


println(Arith.run(args(0)))


