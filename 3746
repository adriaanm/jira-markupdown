For a totally analogous situation that has nothing to do with either by-name or blocks:
```
scala> def noisyIdentity[A](a: A): A = { println("LOUD NOISES"); a }
noisyIdentity: [A](a: A)A

scala> implicit def intToStr(i: Int): String = { println("intToStr here"); i.toString }
warning: there were 1 feature warnings; re-run with -feature for details
intToStr: (i: Int)String

scala> noisyIdentity(noisyIdentity(5)): String
intToStr here
LOUD NOISES
LOUD NOISES
res0: String = 5
```

`intToStr` runs first for the same reason: in type-checking, expected types of inner expressions are determined by the expected types of outer expressions, and implicit conversions are applied as a fallback when expected types can't be satisfied.
