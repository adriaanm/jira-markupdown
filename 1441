I see a similar, unexpected behavior:

With the scale source file

{code}
package whf.scala.ui

class ObjectWithSameNameConsoleReproducer {
  def main(args: Array[String]) = {
    println("running")
  }
}

object ObjectWithSameNameConsoleReproducer extends ObjectWithSameNameConsoleReproducer

object ObjectWithDifferentNameForConsoleReproducer extends ObjectWithSameNameConsoleReproducer
{code}

the Package Explorer shows four nodes, one for the source file and three children for the class and the two objects.

For all four nodes, the context menu Run As > Scala Application
opens the Select Java Application Dialog with the pattern "**" (two asteriscs) and three matching items, the class and the two synthetic classes for the objects.

Selecting the class leads to an error dialog "Could not find the main class. Will exit."
and this console message:

{code}
java.lang.NoClassDefFoundError: whf/scala/ui/ObjectWithSameNameConsoleReproduce
Caused by: java.lang.ClassNotFoundException: whf.scala.ui.ObjectWithSameNameConsoleReproduce
	at java.net.URLClassLoader$$1.run(URLClassLoader.java:200)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at sun.misc.Launcher$$AppClassLoader.loadClass(Launcher.java:276)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)
}

Note the missing "r" in the demo class.

Selecting the synthetic class of the companion object with the _same_ name leads to an error dialog "Fatal exception ocurred. Program will exit." and this console output: 
{code}
java.lang.NoSuchMethodError: main
Exception in thread "main" 
{code}

Selecting the synthetic class of the object with a _different_ name works as expected. In this example, it leads to the console output
{code}
running
{code}

Cleaning the project or closing/reopening the project has no effects.

I started with a reproducer for a Swing App, with the same results. The positive case here is that the JFrame shows as expected.

{code}
package whf.scala.ui

import swing.{MainFrame, SimpleGUIApplication}

class ObjectWithSameNameGUIReproducer extends SimpleGUIApplication {
	val top = new MainFrame{
	  val text = "ObjectWithSameNameGUIReproducer"
      // no content
	}
}

object ObjectWithSameNameGUIReproducer extends ObjectWithSameNameGUIReproducer

object ObjectWithDifferentNameForGUIReproducer extends ObjectWithSameNameGUIReproducer
{code}

Workaround: For a main object, that is the object of a class with a main method, use a different name from its class.

Issues with the current behaviour:

1) Selecting a Scala source file, only the two objects should be shown as matching items. The class should _not_ be shown.

2) Selecting the object within the source file, it should be launched without a selection dialog.

3) Selecting the class, the menu Run As > Scala Application should _not_ be shown.

4) If there are two runnable/launchable objects in a selection, there Scala names should be shown, not the synthetic Java names.

5) The Launch dialog should be named with "Scala", not "Java".

6) And last but not least: A companion object with the same Scala name as its class should be launchable.

Environment:

Eclipse Version: 3.4.0
Build id: I20080617-2000

Scala Plugin 2.7.4 final
dito Weaver

Java 1.6, jdk1.6.0_07

Windows XP
