Here's the typer trace.
```
% qbin/scalac -Dscala.color -Ytyper-debug sandbox/t7745.scala
...
|    |-- base.op(23) BYVALmode-EXPRmode (site: value <local TestBase> in TestBase)
|    |    |-- base.op BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value <local TestBase> in TestBase)
|    |    |    |-- base EXPRmode-POLYmode-QUALmode (silent: value <local TestBase> in TestBase)
|    |    |    |    \-> TestBase.base.type (with underlying type Base[String])
|    |    |    |-- Base.baseOps BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value <local TestBase> in TestBase) implicits disabled
|    |    |    |    [adapt] [T](b: Base[T])BaseOps[T] adapted to [T](b: Base[T])BaseOps[T]
|    |    |    |    \-> (b: Base[T])BaseOps[T]
|    |    |    solving for T/?T
|    |    |    [adapt] [T](b: Base[T])BaseOps[T] adapted to [T](b: Base[T])BaseOps[T] based on pt TestBase.base.type => ?{def op: ?}
|    |    |    |-- [T](b: Base[T])BaseOps[T] EXPRmode-POLYmode-QUALmode (silent: value <local TestBase> in TestBase)
|    |    |    |    \-> BaseOps[String]
|    |    |    |-- Base.baseOps[String](TestBase.this.base).op BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value <local TestBase> in TestBase)
|    |    |    |    \-> (tgt: OpTarget[[U]Op[String,U]])OpTarget[[U]Op[String,U]]
|    |    |    \-> (tgt: OpTarget[[U]Op[String,U]])OpTarget[[U]Op[String,U]]
|    |    |-- 23 : pt=OpTarget[[U]Op[String,U]] BYVALmode-EXPRmode (silent: value <local TestBase> in TestBase)
|    |    |    |-- OpTarget.apply BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value <local TestBase> in TestBase) implicits disabled
|    |    |    |    [adapt] [TC[_]](a: Any)OpTarget[TC] adapted to [TC[_]](a: Any)OpTarget[TC]
|    |    |    |    \-> (a: Any)OpTarget[TC]
|    |    |    solving for TC/?TC
|    |    |    [adapt] [TC[_]](a: Any)OpTarget[TC] adapted to [TC[_]](a: Any)OpTarget[TC] based on pt Int(23) => OpTarget[[U]Op[String,U]]
|    |    |    |-- OpTarget.apply BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value <local TestBase> in TestBase) implicits disabled
|    |    |    |    [adapt] [TC[_]](a: Any)OpTarget[TC] adapted to [TC[_]](a: Any)OpTarget[TC]
|    |    |    |    \-> (a: Any)OpTarget[TC]
|    |    |    solving for TC/?TC
|    |    |    [adapt] [TC[_]](a: Any)OpTarget[TC] adapted to [TC[_]](a: Any)OpTarget[TC] based on pt (=> Int(23)) => OpTarget[[U]Op[String,U]]
|    |    |    \-> <error>
|    |    second try: (tgt: OpTarget[BaseOps.this.OpT])OpTarget[BaseOps.this.OpT] and 23
```
