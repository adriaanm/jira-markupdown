Say an actor is a sink and receives messages from several other actors (e.g., listens to events). Then each actor is allocated the same slot by the executor, which means the other actors will put more messages than those the sink actor can consume. 
```scala
scala> val sink = actor{loop{react{case x => if (mailboxSize > 10000) println(mailboxSize)}}}
sink: scala.actors.Actor = scala.actors.Actor$$anon$1@a1ee92

scala> for (i <- 1 to 10) actor{loop{ sink ! i}}

scala> 10222
45909
82157
...
```

Using schedulers is tricky (and i think it does not guarantee the actor will be able to consume all its messages)

There should be a way for an actor to drain its mailbox. IMHO it may also be good to have this as the default behavior: Let the actor's current react handle all the messages that it is defined for before control leaves the actor (if it ignores some messages, they are left in the mailbox)
