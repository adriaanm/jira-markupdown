Reproduction:

{code}
scala> trait HasP[P] { def p: P}
trait AR[P] extends HasP[P] { type T = this.type with P; def p: P = ??? }
defined trait HasP
defined trait AR

scala> typeOf[AR[_]].member("T": TypeName).info.members
ReplGlobal.abort: P in trait AR cannot be instantiated from AR.this.type with P


scala> val tinfo = typeOf[AR[_]].member("T": TypeName).info
tinfo: $r.intp.global.Type = AR.this.type with P

scala> val arP = typeOf[AR[_]].member("p": TermName)
arP: $r.intp.global.Symbol = method p

scala> tinfo memberType arP
ReplGlobal.abort: P in trait AR cannot be instantiated from AR.this.type with P

{code}
