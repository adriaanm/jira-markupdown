{code}
import scala.reflect.makro.{Context => Ctx}

object Impls {
  def foo[U](c: Ctx)(x: c.Expr[U])(evidence: c.Expr[Numeric[U]]) = {
    import c.mirror._
    val plusOne = Apply(Select(evidence.tree, newTermName("plus")), List(x.tree, Literal(Constant(1))))
    val body = Apply(Select(Ident(definitions.PredefModule), newTermName("println")), List(plusOne))
    Expr[Unit](body)
  }
}
{code}

{code}
object Test extends App {
  def foo[U: Numeric](x: U) = macro Impls.foo[U]
  foo(42)
}
{code}

{code}
Macros_Test_2.scala:2: error: macro implementation has wrong shape:
 required: (c: scala.reflect.makro.Context)(x: c.Expr[U])(evidence$1: c.Expr[Numeric[U]]): c.Expr[Unit]
 found   : (c: scala.reflect.makro.Context)(x: c.Expr[U])(evidence: c.Expr[Numeric[U]]): c.Expr[Unit]
parameter names differ: evidence$1 != evidence
  def foo[U: Numeric](x: U) = macro Impls.foo[U]
                                             ^
one error found
{code}
