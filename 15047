scanLeft is similar to foldLeft but it collects all intermediate results. For instance a list of cumulative sums can be calculated simply:

{code}
scala> List(2, 4, 1, 8, 5).scanLeft(0)(_+_)
res0: List[Int] = List(0, 2, 6, 7, 15, 20)
{code}
 
Example implementation + scalacheck property:

{code}
  def scanLeft[B, That](z: B)(op: (B, A) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {
    val (_, b) = foldLeft(z, bf(repr) += z) { (acc, x) =>
      val next = op(acc._1, x)
      (next, acc._2 += next)
    }
    b.result
  }

  property("scanLeft") = forAll { (xs: List[Int], z: Int) => {
    val sums = xs.scanLeft(z)(_ + _)
    sums.zip(sums.tail).map(x => x._2 - x._1) == xs
  }}
{code}

scanRight would be useful too but it is surprisingly tricky to implement it in TraversableLike (if possible at all?).
