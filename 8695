The difference between vals and defs comes down to whether or not that local class is emitted as an inner class or not. {{Class#isMemberClass}} reveals this; and is used by reflection to decide whether to look for this class in the declarations of the enclosing class, or to look it up as a top level class on the classpath.

I haven't quite figured out why def-vs-val is material; it may be a bug in the bytecode emitter.

Test:

{code}
object NotTheRepl1 {
  lazy val resultVal = {
    class A
    println("NotTheRepl1.resultVal::A " + classOf[A].isMemberClass)
    reflect.runtime.currentMirror.classSymbol((new A).getClass)
  }

  def resultDef = {
    class A
    println("NotTheRepl1.resultDef::A " + classOf[A].isMemberClass)
    reflect.runtime.currentMirror.classSymbol((new A).getClass)
  }
}

object NotTheRepl2 {
  val resultVal = {
    class B
    println("NotTheRepl2.resultVal::B " + classOf[B].isMemberClass)
    reflect.runtime.currentMirror.classSymbol((new B).getClass)
  }
}

object NotTheRepl3 {
  def resultDef = {
    class C
    println("NotTheRepl3.resultDef::C " + classOf[C].isMemberClass)
    reflect.runtime.currentMirror.classSymbol((new C).getClass)
  }
}


object Test extends App {

  println(NotTheRepl3.resultDef)
  println(NotTheRepl1.resultDef)
  println(NotTheRepl2.resultVal)
  println(NotTheRepl1.resultVal)
}

{code}

Breadcrumbs:

{code}
      // `jclazz.isLocalClass` doesn't work because of problems with `getSimpleName`
      // hence we have to approximate by removing the `isAnonymousClass` check
//      def isLocalClass0: Boolean = jclazz.isLocalClass
      def isLocalClass0: Boolean = jclazz.getEnclosingMethod != null || jclazz.getEnclosingConstructor != null
{code}

{code}
if (jclazz.isMemberClass) {
        val jEnclosingClass = jclazz.getEnclosingClass
        val sEnclosingClass = classToScala(jEnclosingClass)
        followStatic(sEnclosingClass, jclazz.javaFlags)
      } else if (jclazz.isLocalClass0) {
        val jEnclosingMethod = jclazz.getEnclosingMethod
        if (jEnclosingMethod != null) {
          methodToScala(jEnclosingMethod)
        } else {
          val jEnclosingConstructor = jclazz.getEnclosingConstructor
          constructorToScala(jEnclosingConstructor)
        }
....

val cls =
          if (jclazz.isMemberClass && !nme.isImplClassName(jname))
            lookupClass
          else if (jclazz.isLocalClass0 || isInvalidClassName(jname))
            // local classes and implementation classes not preserved by unpickling - treat as Java
            //
            // upd. but only if they cannot be loaded as top-level classes
            // otherwise we may mistake mangled symbolic names for mangled nested names
            //
            // in case when a Java binary name can be treated both as a top-level class and as a nested class
            // (as described in http://groups.google.com/group/scala-internals/browse_thread/thread/10855403bbf04298)
            // we check for a top-level class first
            // this is totally correct, because a top-level class and a nested class with the same name cannot coexist
            // so it's either one or another, but not both - therefore we always load $-bearing classes correctly
            lookupClass orElse jclassAsScala(jclazz)
{code}


{code}
    /** Return the name of this symbol that can be used on the Java platform.  It removes spaces from names.
     *
     *  Special handling:
     *    scala.Nothing erases to scala.runtime.Nothing$
     *       scala.Null erases to scala.runtime.Null$
     *
     *  This is needed because they are not real classes, and they mean
     *  'abrupt termination upon evaluation of that expression' or null respectively.
     *  This handling is done already in GenICode, but here we need to remove
     *  references from method signatures to these types, because such classes
     *  cannot exist in the classpath: the type checker will be very confused.
     */
    def javaName(sym: Symbol): String = {

        /*
         * Checks if given symbol corresponds to inner class/object and add it to innerClassBuffer
         *
         * Note: This method is called recursively thus making sure that we add complete chain
         * of inner class all until root class.
         */
        def collectInnerClass(s: Symbol): Unit = {
          // TODO: some enteringFlatten { ... } which accounts for
          // being nested in parameterized classes (if we're going to selectively flatten.)
          val x = innerClassSymbolFor(s)
          if(x ne NoSymbol) {
            assert(x.isClass, "not an inner-class symbol")
            val isInner = !x.rawowner.isPackageClass
            if (isInner) {
              innerClassBuffer += x
              collectInnerClass(x.rawowner)
            }
          }
        }
{code}

{code}
  protected def originalEnclosingMethod(sym: Symbol): Symbol = {
    if (sym.isMethod || sym == NoSymbol) sym
    else {
      val owner = originalOwner.getOrElse(sym, sym.rawowner)
      if (sym.isLocalDummy) owner.enclClass.primaryConstructor
      else originalEnclosingMethod(owner)
    }
  }

{code}
