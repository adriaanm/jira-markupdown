Try to compile and run following code:
```scala
trait Types {
  type Type
  type TypeA <: Type
  trait TypeAExtractor {
    def unapply(x: TypeA): Option[Int]
  }
  val TypeA: TypeAExtractor

  type TypeB <: Type
  trait TypeBExtractor {
    def unapply(x: TypeB): Option[(Int, Int)]
  }
  val TypeB: TypeBExtractor
}

trait RealTypes extends Types {
  sealed trait Type

  case class TypeA(n: Int) extends Type
  object TypeA extends TypeAExtractor

  case class TypeB(n: Int, m: Int) extends Type
  object TypeB extends TypeBExtractor
}

trait Intermed extends Types {
  def crash(tpe: Type): Unit = tpe match {
    case TypeA(m) => println("A")
    case TypeB(n, m) => println("B")
  }
}

object Test extends RealTypes with Intermed with App {
  crash(TypeB(1, 2))
}
```

You'll get following error:
```scala
java.lang.ClassCastException: RealTypes$TypeB cannot be cast to RealTypes$TypeA
	at RealTypes$TypeA$.unapply(Bridge.scala:20)
	at Intermed$class.crash(Bridge.scala:27)
	at Test$.crash(Bridge.scala:33)
	at Test$delayedInit$body.apply(Bridge.scala:34)
```

The issue has been discovered by Nada and she explains the situation like this:
```
Adriaan and I looked at this today. The problem is that, because the
subtypes are abstract aliases, they are eliminated by erasure. Then,
for each unapply method, a bridge unapply method which takes any Type
gets generated. The pattern-matcher happily calls this bridge method.
The bridge method just blindly casts to the concrete case class
corresponding to the abstract alias, causing the cast exception when
it is passed a different subtype.
```

Since the pattern has been extracted from reflection api it's a fairly important bug and needs some attention as no viable work-arounds are present.
