This isn't quite complete, but it moves in the right direction:

https://github.com/retronym/scala/compare/ticket/7459

It still leaves unsubstituted references in cases where the 'to' trees in the substitution are Selects, rather than simple Idents.
```scala
object Test extends App {
  class C { class D }

  case class FooSeq(x: Int, y: String, z: C*)

  FooSeq(1, "a", ???) match {
    case FooSeq(1, "a", x@_* ) =>
      null.asInstanceOf[x.type]
  }
}
```
```scala
      case <synthetic> val x1: Test.FooSeq = Test.this.FooSeq.apply(1, "a", scala.this.Predef.???);
      case8(){
        if (x1.ne(null))
          {
            <synthetic> val p2: Int = x1.x;
            <synthetic> val p3: String = x1.y;
            if (1.==(p2))
              if ("a".==(p3))
                matchEnd7(null.asInstanceOf[x.type])
              else
                case9()
            else
              case9()
          }
        else
          case9()
      };
```

I'm going to assign to Adriaan for an opinion.
