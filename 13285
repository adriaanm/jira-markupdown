I'm baffled why this won't pass the compiler:
```scala
object Tester {
  implicit def pimpMyIterableInt(it: Iterable[Int]) =  
    new { def sum = it.foldLeft(0)(_ + _) }
  def foo = {
    val triangles:Stream[Int] = Stream.from(1).map(n => (1 to n).sum)
    triangles.take(10).toList
  }
}
```
the error I get is:
```scala
% scalac Tester.scala
Tester.scala:5: error: value sum is not a member of Range.Inclusive
    val triangles:Stream[Int] = Stream.from(1).map(n => (1 to n).sum)
                                                                 ^
one error found
```

if I pull the definition of triangles out of the enclosing definition, then the compiler likes it fine, like this:
```scala
object Tester {
  implicit def pimpMyIterableInt(it: Iterable[Int]) =  
    new { def sum = it.foldLeft(0)(_ + _) }
  val triangles:Stream[Int] = Stream.from(1).map(n => (1 to n).sum)
}
```
