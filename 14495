This compiles under 2.7.4 and 2.7.5 but fails under 2.8.0.r18678

{code}
object ProjectionTest {

  trait Column[T] { final type Value = T }

  trait Projection[T]

  trait Projection2[T1 <: Column[_], T2 <: Column[_]] extends Projection[(T1#Value, T2#Value)]

  def f(p: Projection2[Column[Int], Column[Int]]): Projection[(Int,Int)] = p
}
{code}

The error is:

{code}
type mismatch;
  found   : ProjectionTest.Projection2[ProjectionTest.Column[Int],ProjectionTest.Column[Int]]
  required: ProjectionTest.Projection[(Int, Int)]
{code}

This modified version without existential types in the type bounds of Projection2 compiles:

{code}
object ProjectionTest {

  trait BaseColumn { type Value }

  trait Column[T] extends BaseColumn { final type Value = T }

  trait Projection[T]

  trait Projection2[T1 <: BaseColumn, T2 <: BaseColumn] extends Projection[(T1#Value, T2#Value)]

  def f(p: Projection2[Column[Int], Column[Int]]): Projection[(Int,Int)] = p
}
{code}
