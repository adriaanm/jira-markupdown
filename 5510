Motivation: Once an item has been added to an immutable Set, there is no way to retrieve it other than iteration (e.g., find). The design seems to assume that Set(item) will locate the same item if it's in the set, but of course it will only locate an **equal** item, and objects can have fields that don't play a role in equality, and can be referenced -- not being able to retrieve a referenced object from a set is a serious deficiency. mutable.Set does have a *findEntry(elem: A): Option[A]* method -- there's nothing specific to mutability about such a method and no reason it should be restricted to mutable Sets. As a consequence, people have found it necessary to use mutable.Set when they just as soon would use immutable.Set.

Set[A] is conceptually Map[A,A], and it would be nice if the API reflected that. Unfortunately, we have *Set#apply(elem: A): Boolean* vs. *Map#apply(key: A): B* so  consistency is already not possible. However, that doesn't mean that it can't be achieved for new methods, e.g., *Set#get(elem: A): Some[A]* and *Set#getOrElse[A1 >: A](elem: A, default: => A1): A1* ... get is certainly a better name than findEntry. And for mutable.Set, there should also be *getOrElseUpdate(elem: A): A*, analogous to the mutable.Map method except that a second argument isn't needed. getOrElseUpdate would return the item in the Set equal to elem if there is one, otherwise it would add elem to the Set and return it.
