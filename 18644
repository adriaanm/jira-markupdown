{code}
scala> import scala.language.experimental._
import scala.language.experimental._

scala> object Macro {
     |   def apply[A](a: A): A = macro impl[A]
     |   def impl[A](c: reflect.macros.Context)(a: c.Expr[A]): c.Expr[A] = a
     | }
defined module Macro

scala>

scala> class C[T] {
     |   def foo = 0
     | }
defined class C

scala> implicit def AnyToC[T](a: Any): C[T] = new C[T]
warning: there were 1 feature warning(s); re-run with -feature for details
AnyToC: [T](a: Any)C[T]

scala> Macro {
     |   "".foo
     |    ()
     | }
<console>:17: error: macro has not been expanded
              Macro {
              ^
{code}
