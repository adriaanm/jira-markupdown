In the general category of "polymorphic Arrays are strange beasts"

{code}
package arraycast;

class Foo[T](x : Array[AnyRef]) { def bar = x.asInstanceOf[Array[T]] }
class Bar[T](x : Array[T]) { def bar = x.asInstanceOf[Array[AnyRef]] }

object FromMono{
   def main(args : Array[String]) = (new Foo[AnyRef](Array[AnyRef]("Halp!"))).bar
}

object FromPoly{
  def main(args : Array[String]) = (new Bar[AnyRef](Array[AnyRef]("Halp!"))).bar
}
{code}

FromMono will throw a ClassCastException, but FromPoly will work. So what seems to be happening is that the compiler special cases casting to monomorphic arrays but not casting to polymorphic ones. 

{code}
java.lang.ClassCastException: [Ljava.lang.Object
{code}
