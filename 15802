The compiler should be able to resolve the overloaded method. This is indeed the case for all the other combinations of _ and TypeArg.
```scala
object Main {
 trait TypeArg

 trait Parent[R]
 trait Child[R] extends Parent[R]

 class Impl extends Child[TypeArg] {
   // works, will print "c"
//    def foo(b: Parent[TypeArg]) { println("d") }
//    def foo(b: Child[TypeArg]) { println("c") }

   // works, will print "c"
//    def foo(b: Parent[_]) { println("d") }
//    def foo(b: Child[_]) { println("c") }

   // works, will print "c"
//    def foo(b: Parent[_]) { println("d") }
//    def foo(b: Child[TypeArg]) { println("c") }

   // broken
   def foo(b: Parent[TypeArg]) { println("d") }
   def foo(b: Child[_]) { println("c") }
 }

 def main(args: Array[String]) {
   val impl = new Impl
   impl.foo(impl)
 }
}
```

Compiler error:
```scala
error: ambiguous reference to overloaded definition,
both method foo in class Impl of type (b: Main.Child[_])Unit
and  method foo in class Impl of type (b: Main.Parent[Main.TypeArg])Unit
match argument types (Main.Impl)
   impl.foo(impl)
one error found
```

Tested on 2.8.1.final and 2.9.0.r23541
