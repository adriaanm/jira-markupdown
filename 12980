Consider the following program:

{code}
class Program {
  val v: int => int = _ => 42
  val w: int => int = (_:int) => 42
}
{code}

Compiling it with 2.6.1-final yields the following output:

{code}
repro.scala:2: error: missing parameter type
  val v: int => int = _ => 42
                      ^
repro.scala:3: error: type mismatch;
 found   : (int) => Int
 required: int
  val w: int => int = (_:int) => 42
                              ^
two errors found
{code}

This is confusing. I suspect the underscore triggers the placeholder syntax feature; however, it should not do so when the underscore appears as a parameter declaration.

The compiler should either generate an error message saying that underscores are not allowed in parameter declaration positions, or it should support underscores in parameter declaration positions and not bind the corresponding argument to any parameter name. (This would be a special case of supporting arbitrary patterns in parameter declaration positions.)

Many thanks,-
Bart
