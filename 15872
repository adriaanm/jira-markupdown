=== What steps will reproduce the problem? ===
{code}
  var t = collection.immutable.TreeMap.empty[Int, Int]
  for (i <- 1 to 100000)
    t = (t + (i -> i) - i)   
{code} 

=== What is the expected behavior? ===

The loop should require constant memory, regardless of the number of iterations.

=== What do you see instead? ===

The memory footprint is increasing while the loop is running.
When it finishes, there are exactly 100001 {{TreeMap}} and {{RedBlack$$Empty$$}} instances that cannot be garbage collected until the reference t goes out of scope. 

If you run this loop for a larger number of iterations, you will get an {{OutOfMemoryError}} (out of JVM heap space). 

=== Additional information ===

The problem goes away, when you always keep at least one element in the {{TreeMap}}. This code works correctly:

{code}
var t = collection.immutable.TreeMap(0 -> 0)  // never removed
for (i <- 1 to 100000)
  t = (t + (i -> i) - i) 
{code}

JVisualVM suggests also that the problem might be related to the $$outer reference preventing 0-sized {{TreeMap}} objects from being GCed. (https://lampsvn.epfl.ch/trac/scala/ticket/1419)

=== What versions of the following are you using? ===
  - Scala: 2.8.1.final
  - Java: 1.6.0 update 23
  - Operating system: Windows Vista Home Premium, 32-bit
