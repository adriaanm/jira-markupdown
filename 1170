What Martin said.  But I had to work it out on a napkin first.

Since the smart people who have commented are terse, here is my explicative peroration:

Since g asks for a thunktional arg, and myToString says its domain is Any, which is anything, I don't see a violation.

Otherwise, one has to say =>A is not a type and => is some sort of storage class notation.

There is a question whether =>Anything should show its bones this way.  But people seem to go both ways: either =>A can only be realized as A, or come on, it's just a Function0[A]. Sprinkle on some sugar. The newer toString in this example at least says it's a <function0> so you can guess which thunk-like thing it's referring to.  Maybe it deserves a marker trait, runtime.$arrow, which would override toString so it sounds like the bumper sticker: If you can read this, you're too close.

Conversion of x to =>Any on g(ex) here is a special case and not an implicit; but imagine an implicit conversion from Int to Foo, should we be surprised to find a Foo at myToString?  I was going to say, "Should we be shocked-- shocked!" but a recent article on the 70th anniversary of Casablanca says this is a cliche of the Zeitgeist, "an emblem of public hypocrisy."  I think we like Renault (Claude Rains) because he can follow rules while averting his eyes and looking the other way when necessary. That's also a virtue in a compiler. It makes for the beginning of a beautiful friendship.

