I use java.util.Properties which is a subclass of java.util.Hashtable
in my program and having a JCL wrapper around Hashtable would make it
easier to use.

You cannot pass a java.util.Hashtable into a scala.collection.jcl.HashMap.

{code}
scala> new scala.collection.jcl.HashMap(new java.util.Hashtable[Int,Int])
<console>:5: error: type mismatch;
 found   : java.util.Hashtable[Int,Int]
 required: java.util.HashMap[?,?]
       new scala.collection.jcl.HashMap(new java.util.Hashtable[Int,Int])
{code}

Here's an implementation.

{code}
package scala.collection.jcl
class Hashtable[K,E](override val underlying : java.util.Hashtable[K,E])
  extends scala.collection.jcl.MapWrapper[K,E]
{
  def this() = this(new java.util.Hashtable[K,E])

  override def clone() : Hashtable[K,E] =
    new Hashtable[K,E](underlying.clone().asInstanceOf[java.util.Hashtable[K,E]])
}
{code}
