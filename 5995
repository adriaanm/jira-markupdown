I've tested some more and the problem seems to be related to pattern-matching, cons, and extractors. The segment of code has a form similar to:
{code}
(name,arr.toList) match {
  case ("a",Extractor1(a) :: Extractor2(b) :: Extractor3(c) :: Nil) =>
  case ("b",(x: String) :: (y: String) :: Nil) =>
}
{code}

Running example code with similar to this form does not lead to any increased compilation time, so might be related to the context of it being part of the large application class.

Compilation time slightly improved by changing cons to List().
