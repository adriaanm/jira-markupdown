Ok. Here is a minimal test case.
We have the following three files:

A.scala:
package com.intel.test
object A {
	def foo : Int = B.foo
}

B.scala:
package com.intel.test
object B {
	def foo : Int = C.foo
}

package com.intel.test
object C {
	def foo : Int = 4 
}
 

If I add an extra bit of whitespace to C, and save it, the eclipse plugin recompiles C, B, and A. It seems that it is following the transitive import relation, rather than looking to see if an interface has changed, requiring a recompile.

In this case, perhaps the compiler could observe that the change to C had not changed the interface relative to the previously compiled version, and thus that B did not need to be recompiled. Similarly, if B was recompiled, it could observe that the new compiled file had the same interface as the old compiled file, and to A did not need to be recompiled.


In the mean time, I'm thinking I may just revert to using dynamic string-based binding to avoid my files having to import each other - but that's an ugly hack.

