Here's another WIP branch for the improved diagnostic: https://github.com/retronym/scala/tree/ticket/8460-3

[~dlwh] The compiler is supposed to tolerate one divergent path in the implicit search. If a second path is found, it can abort the search. The implementation of this is a touch buggy and can sometimes explore a bit further, but that's the intent.

The implicit search space is explored in an order driven by the specificity of the candidates. The rules are analagous to those of static overload resolution. The levers are pretty crude, but you can deprioritize an implicit by putting it in a superclass of a the one that defined a competing implicit.

This criteria is used to determine a winner if we have multiple eligible results. With this in mind, the compiler can pre-sort candidates based on the specificity, and avoid exploring less specific candidates if a more-specific result has already been found.

See the neg and pos examples from this commit [1] for an example of how to use this to avoid divergence.

Here's an example of how to use this to speedup implicit search [2].

[1] https://github.com/retronym/scala/tree/ticket/8460-3
[2] https://github.com/NICTA/scoobi/pull/324
