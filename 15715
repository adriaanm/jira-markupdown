When implementing the foreach method in a Java class to participate in a scala for loop, the declared function parameter requires a dummy return type argument.[[BR]]
In code:

This works but is not too elegant:
{code}
// M.java
public class M<A> {
  public <DUMMY> void foreach(scala.Function1<A, DUMMY> b) {}
}
{code}

{code}
// Test.scala
object Test {
  // Uses M.java in a for loop
  def t(){ for(m <- new M[Int]){} }
}
{code}

The following three versions lead to compile errors:

Using java.lang.Void is maybe the most natural choice for Java programmers.
{code}
public void foreach(scala.Function1<A, Void> b) {}

Test.scala:3: error: type mismatch;
 found   : Unit
 required: java.lang.Void
      for(m <- new M[Int]) {  }
                           ^
{code}

{code}
public void foreach(scala.Function1<A, scala.runtime.Unit> b) {}

Test.scala:3: error: type mismatch;
 found   : scala.Unit
 required: scala.runtime.Unit
      for(m <- new M[Int]) {  }
                           ^
{code}

{code}
public void foreach(scala.Function1<A, scala.runtime.BoxedUnit> b) {}

Test.scala:3: error: type mismatch;
 found   : Unit
 required: scala.runtime.BoxedUnit
      for(m <- new M[Int]) {  }
                           ^
{code}

The error messages are confusing. Looks like the required / found types are swapped.
The other three methods (map, flatMap, withFilter) can be expressed in Java as expected.

Compiler versions:
{code}
$$ javac -version
javac 1.6.0_20

$$ scalac -version
Scala compiler version 2.8.0.final -- Copyright 2002-2010, LAMP/EPFL
{code}




