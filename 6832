same happens with overloaded methods without default arguments and an implicit parameter:

{code}
trait a {
  def notified(title: String, layout: Component, width: Int, height: Int)(implicit app: com.vaadin.Application) {}
  def notified(title: String, layout: Component, width: Int, height: Int, action: () => Unit)(implicit app: com.vaadin.Application) {}
}
class b extends a {
    notified("", new VerticalLayout, width = 380, height = 430, action = () => ())
}
{code}
{code}
error: overloaded method value notified with alternatives:
(title: String,layout: com.vaadin.ui.Component,width$3: Int,height$3: Int,action$1: () => Unit)(implicit app$3: com.vaadin.Application)Unit <and>
(title: String,layout: com.vaadin.ui.Component,width: Int,height: Int)(implicit app: com.vaadin.Application)Unit
cannot be applied to (java.lang.String, vaadin.scala.VerticalLayout, width: Int, height: Int, action: () => Unit)
Error occurred in an application involving default arguments.
notified("", new VerticalLayout, width = 380, height = 430, action = () => ())
{code}

although it's really flaky, i tried to define a methods with same signatures but with a different name and wasn't able to reproduce
