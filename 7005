Maybe I'm missing something, but it looks like there's a simpler route available which accomplishes the same thing.

{code}
scala> case class CC[Repr <: Traversable[_]](base: Repr) { def copy(base: Repr) = CC(base) }
defined class CC

scala> CC(List(1,2,3))
res0: CC[List[Int]] = CC(List(1, 2, 3))

scala> res0.copy(Set(1,2,3))
<console>:11: error: type mismatch;
 found   : scala.collection.immutable.Set[Int]
 required: List[Int]
              res0.copy(Set(1,2,3))
                           ^

scala> CC(Map(1 -> 2))
res2: CC[scala.collection.immutable.Map[Int,Int]] = CC(Map(1 -> 2))

scala> res2.copy _
res3: scala.collection.immutable.Map[Int,Int] => CC[scala.collection.immutable.Map[Int,Int]] = <function1>
{code}
