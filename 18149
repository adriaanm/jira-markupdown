This code will type-check but it will fail in runtime, as Macros dont generate runtime bytecode.
{code:title=A.scala|borderStyle=solid}
object A {
  def hello_impl(c:Context)() :c.Expr[Unit] = {
    import c.universe._
    reify {
      println("hello world")
    }
  }

}
```scala

{code:title=B.scala|borderStyle=solid}
class B{
def hello():Unit = macro A.hello_impl
}
```


{code:title=C.scala|borderStyle=solid}
object C extends App{
  type greeter = {
    def hello():Unit;
  }
  val g:greeter= new B
  g.hello()
}
{code} 

running such app raises java.lang.NoSuchMethodException: B.hello()


It also interferes a lot with how some java libraries work: for example Amazon DynamoDB SDK uses reflection to get all getters and setters, if some of them are defined by macros, they will be unreachable in runtime using reflection.
