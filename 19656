Implicit parameters with one type parameter fails to compile
With 2, 3 and possibly more it works.

{code}

trait WithThree[A, B, C]

case class Holder[T](_elem: T) {
  def elem_=[U>:T](newElem: U)(implicit ev: U <:< AnyVal) = copy(_elem=newElem)
  def elem = _elem

  def elem3_=[U>:T](newElem: U)(implicit ev: WithThree[T, T, T]) = copy(_elem=newElem)
  def elem3 = elem

  def typeClassElem = _elem
  def typeClassElem[U>:T](newElem: U)(implicit n: Numeric[U]) = copy[U](_elem=n.negate(newElem))
}

object HolderTest {
  implicit val three: WithThree[Nothing, Nothing, Nothing] = ???
  val hBottom: Holder[Nothing] = ???
  val hTop: Holder[AnyVal] = hBottom.elem = 3
  val hParam: Holder[Int] = hBottom.elem3 = 3
//  val hType = Holder[Int] = hBottom.typeClassElem = 3 // <-- Doesnt compile
}

{code}
