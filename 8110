Here's a seemingly related problem reported on the mailing list (https://groups.google.com/forum/?fromgroups=#!topic/scala-user/1VYTLcxmL8g):

{code}
  trait A {
    type Element<:Elt
    trait Elt {
      def doIt(x:Int):Int
      def child(e:Element):Unit
    }
  }
  class A1 extends A {
    class Element extends Elt {
      def doIt(x:Int):Int = x+3
      def child(e:Element):Unit = ()
    }
  }
  class A2 extends A1 {
    class Element extends super.Element {
      override def doIt(x:Int):Int = super.doIt(x)+1
      override def child(e:Element):Unit = super.child(e)
    }
  }
{code}

{quote}
In class A2, method child, the call to super fails with "ambiguous reference to overloaded definition".

I do not understand why:
- super.Element is the direct descendant from the concrete class A1#Element,so super.child should refer to its child method.
- anyway, Elt.child is abstract so it should not be considered.
{quote}

If it proves to be a separate issue, we could spawn a new ticket.
