There is a new problem with wrong type bound checks when using default arguments:

{code}
object Bug {
  trait Sys[S] {
    type Tx
  }

  trait Baz[-Tx]

  trait Foo[S <: Sys[S]] {
    def bar: Bar[S] = Bar.read[S]()
  }

  object Bar {
    object NoBaz extends Baz[Any]

    def read[S <: Sys[S]](baz: Baz[S#Tx] = NoBaz): Bar[S] = ???
  }
  trait Bar[S <: Sys[S]]
}
{code}

This compiles correctly under 2.10.3, but fails with 2.11.0-RC1:

{code}
[error] /home/hhrutz/Documents/devel/BugScala211RC1DefaultArg/src/main/scala/de/sciss/bugs/Bug.scala:11: type arguments [S] do not conform to method read$default$1's type parameter bounds [S <: de.sciss.bugs.Bug.Sys[S]]
[error] Error occurred in an application involving default arguments.
[error]     def bar: Bar[S] = Bar.read[S]()
[error]                               ^
[error] one error found
{code}

The bug disappears when the return type is {{Unit}} instead of {{Bar[S]}}.
