Ranges (other than Int) produce a ParVector when calling .par. This is a O(n) operation, instead of the expected O(1) which can lead to OutOfMemory because the excessive space consumption.

I would recommend disabling par for Ranges which can't return a ParRange.
```scala
scala> ((1:BigInt) to Int.MaxValue)
res3: scala.collection.immutable.NumericRange.Inclusive[BigInt] = NumericRange(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 1...
scala> ((1:BigInt) to Int.MaxValue).par
java.lang.OutOfMemoryError: Java heap space
	at java.math.BigInteger.add(BigInteger.java:1069)
	at java.math.BigInteger.add(BigInteger.java:1042)
	at scala.math.BigInt.$$plus(BigInt.scala:161)
	at scala.math.Numeric$$BigIntIsIntegral$$class.plus(Numeric.scala:28)
	at scala.math.Numeric$$BigIntIsIntegral$$.plus(Numeric.scala:40)
	at scala.math.Numeric$$BigIntIsIntegral$$.plus(Numeric.scala:40)
	at scala.math.Numeric$$Ops.$$plus(Numeric.scala:208)
	at scala.collection.immutable.NumericRange.foreach(NumericRange.scala:75)
	at scala.collection.Parallelizable$$class.par(Parallelizable.scala:40)
	at scala.collection.immutable.NumericRange.par(NumericRange.scala:42)
	at .<init>(<console>:14)
	at .<clinit>(<console>)
	at .<init>(<console>:11)
	at .<clinit>(<console>)
	at $$export(<console>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at scala.tools.nsc.interpreter.IMain$$ReadEvalPrint.call(IMain.scala:592)
	at scala.tools.nsc.interpreter.IMain$$Request$$$$anonfun$$10.apply(IMain.scala:828)
	at scala.tools.nsc.interpreter.Line$$$$anonfun$$1.apply$$mcV$$sp(Line.scala:43)
	at scala.tools.nsc.io.package$$$$anon$$2.run(package.scala:31)
	at java.lang.Thread.run(Thread.java:679)
```
