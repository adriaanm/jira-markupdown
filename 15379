Using 2.8.0.r22065-b20100527020151

{code}
abstract class A[T, @specialized(scala.Int) U : Manifest, @specialized(scala.Int) V <% Ordered[V]] {
    val u: U
    val v: V

    def f(t: T, v2: V): Pair[U, V] = {
        val m: Array[U] = null
        if (m.isEmpty) {
            Pair(u, v)
        } else {
            Pair(u, v2)
        }
    }
}

{code}
{code}
Exception in thread "main" scala.tools.nsc.symtab.Types$$TypeError: method f$$mcII$$sp is defined twice
	at scala.tools.nsc.typechecker.Contexts$$Context.error(Contexts.scala:273)
	at scala.tools.nsc.typechecker.Infer$$Inferencer.error(Infer.scala:213)
	at scala.tools.nsc.typechecker.Typers$$Typer.checkNoDoubleDefsAndAddSynthetics$$1(Typers.scala:2070)
	at scala.tools.nsc.typechecker.Typers$$Typer.typedStats(Typers.scala:2105)
	at scala.tools.nsc.typechecker.Typers$$Typer.typedTemplate(Typers.scala:1503)
	at scala.tools.nsc.typechecker.Typers$$Typer.typedClassDef(Typers.scala:1279)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed1(Typers.scala:3701)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:4046)
	at scala.tools.nsc.typechecker.Typers$$Typer.typed(Typers.scala:4094)
	at scala.tools.nsc.transform.SpecializeTypes$$$$anon$$6$$$$anonfun$$transform$$3$$$$anonfun$$24.apply(SpecializeTypes.scala:1123)
	at scala.tools.nsc.transform.SpecializeTypes$$$$anon$$6$$$$anonfun$$transform$$3$$$$anonfun$$24.apply(SpecializeTypes.scala:1123)
	at scala.collection.TraversableLike$$$$anonfun$$map$$1.apply(TraversableLike.scala:204)
	at scala.collection.TraversableLike$$$$anonfun$$map$$1.apply(TraversableLike.scala:204)
	at scala.collection.LinearSeqOptimized$$class.foreach(LinearSeqOptimized.scala:61)
	at scala.collection.immutable.List.foreach(List.scala:45)
	at scala.collection.TraversableLike$$class.map(TraversableLike.scala:204)
	at scala.collection.immutable.List.map(List.scala:45)
	at scala.tools.nsc.transform.SpecializeTypes$$$$anon$$6$$$$anonfun$$transform$$3.apply(SpecializeTypes.scala:1123)
	at scala.tools.nsc.transform.SpecializeTypes$$$$anon$$6$$$$anonfun$$transform$$3.apply(SpecializeTypes.scala:1122)
	at scala.tools.nsc.ast.Trees$$Transformer.atOwner(Trees.scala:856)
	at scala.tools.nsc.transform.TypingTransformers$$TypingTransformer.atOwner(TypingTransformers.scala:35)
	at scala.tools.nsc.transform.SpecializeTypes$$$$anon$$6.transform(SpecializeTypes.scala:1122)
	at scala.tools.nsc.transform.SpecializeTypes$$SpecializationTransformer$$$$anonfun$$transform$$8.apply(SpecializeTypes.scala:1446)
	at scala.tools.nsc.transform.SpecializeTypes$$SpecializationTransformer$$$$anonfun$$transform$$8.apply(SpecializeTypes.scala:1445)
	at scala.tools.nsc.symtab.SymbolTable.atPhase(SymbolTable.scala:103)
	at scala.tools.nsc.transform.SpecializeTypes$$SpecializationTransformer.transform(SpecializeTypes.scala:1445)
	at scala.tools.nsc.ast.Trees$$Transformer.transformUnit(Trees.scala:849)
	at scala.tools.nsc.transform.Transform$$Phase.apply(Transform.scala:30)
	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$applyPhase$$1.apply(Global.scala:276)
	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$applyPhase$$1.apply(Global.scala:276)
	at scala.tools.nsc.reporters.Reporter.withSource(Reporter.scala:48)
	at scala.tools.nsc.Global$$GlobalPhase.applyPhase(Global.scala:276)
	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:252)
	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:252)
	at scala.collection.Iterator$$class.foreach(Iterator.scala:631)
	at scala.collection.mutable.ListBuffer$$$$anon$$1.foreach(ListBuffer.scala:304)
	at scala.tools.nsc.Global$$GlobalPhase.run(Global.scala:252)
	at scala.tools.nsc.Global$$Run.compileSources(Global.scala:733)
	at scala.tools.nsc.Global$$Run.compile(Global.scala:813)
	at scala.tools.nsc.Main$$.process(Main.scala:108)
	at scala.tools.nsc.Main$$.main(Main.scala:122)
	at scala.tools.nsc.Main.main(Main.scala)
{code}
