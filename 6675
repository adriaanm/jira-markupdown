No unchecked warnings, prints -5.  You appear to have multiple misapprehensions about how things work at runtime.  You're never calling getClass on an instance whose type neither the compiler nor you know; from such beginnings one cannot be too surprised at CCEs.
{noformat}
diff --git a/expressionproblem.scala b/expressionproblem.scala
index fe31f7037d..55d30688dc 100644
--- a/expressionproblem.scala
+++ b/expressionproblem.scala
@@ -11,8 +11,10 @@ package exprframework {
 
     abstract class Node[V <: Visitor: Manifest] extends Exp { 
         final def handle(v: Visitor) {
-            if (manifest[V].erasure.cast(v).isInstanceOf[V]) accept(manifest[V].erasure.cast(v).asInstanceOf[V])
-            else v.default(this)
+            if (manifest[V].erasure isAssignableFrom v.getClass)
+              accept(v.asInstanceOf[V])
+            else
+              v.default(this)
         }
         //final def isV[W <: Visitor: Manifest](v: W) = { manifest[V] <:< manifest[W] }
         //final def asV(v: Visitor) = { val x = manifest[V].erasure.cast(v); println(x.getClass); x.asInstanceOf[V] }
@@ -21,8 +23,10 @@ package exprframework {
 
     abstract class Op[E <: Exp: Manifest] extends Visitor { 
         final def apply(e: Exp) {
-            if (manifest[E].erasure.cast(e).isInstanceOf[E]) call(manifest[E].erasure.cast(e).asInstanceOf[E])
-            else e.handle(this)
+            if (manifest[E].erasure isAssignableFrom e.getClass)
+              call(e.asInstanceOf[E])
+            else
+              e.handle(this)
         }
         //final def isE[F <: Exp: Manifest](e: F) = { manifest[E] <:< manifest[F] }
         //final def asE(e: Exp) = { val x = manifest[E].erasure.cast(e); println(x.getClass); x.asInstanceOf[E] }
{noformat}
