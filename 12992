When running: 
```scala
> scala pattern.scala 
```
With the following pattern.scala file:
```scala
sealed abstract class Tree
case class Node(l: Tree, v: Int, r: Tree) extends Tree
case object EmptyTree extends Tree

val t: Tree = EmptyTree

t match {
    case Node(_,v,_) if (v == 0) => 0
    case EmptyTree => 2
}
```

I get this compiler crash (with Scala-2.6.1):
```scala
exception when transforming {
  val args: Array[java.lang.String] = argv;
  sealed abstract class Tree extends java.lang.Object with ScalaObject {
    def this(): Tree = {
      Tree.super.this();
      ()
    }
  };
  @serializable case class Node extends Tree with ScalaObject with Product {
    <caseaccessor> <paramaccessor> private[this] val l: Tree = _;
    <stable> <caseaccessor> <accessor> <paramaccessor> def l(): Tree = Node.this.l;
    <caseaccessor> <paramaccessor> private[this] val v: Int = _;
    <stable> <caseaccessor> <accessor> <paramaccessor> def v(): Int = Node.this.v;
    <caseaccessor> <paramaccessor> private[this] val r: Tree = _;
    <stable> <caseaccessor> <accessor> <paramaccessor> def r(): Tree = Node.this.r;
    def this(l: Tree, v: Int, r: Tree): Node = {
      Node.super.this();
      ()
    };
    final override def $$tag(): Int = 1706565911;
    override def hashCode(): Int = ScalaRunTime.this._hashCode(Node.this);
    override def toString(): java.lang.String = ScalaRunTime.this._toString(Node.this);
    override def equals(x$$1: Any): Boolean = x$$1 match {
      case (Tree,Int,Tree)Node((l$$0 @ _), (v$$0 @ _), (r$$0 @ _)) if x$$1.==(l()).&&(x$$2.==(v())).&&(
3.==(r())) => true
      case _ => false
    };
    final override def productPrefix(): java.lang.String = "Node";
    final override def productArity(): Int = 3;
    final override def productElement(x$$1: Int): Any = x$$1 match {
      case 0 => l()
      case 1 => v()
      case 2 => r()
      case _ => throw new java.lang.IndexOutOfBoundsException(x$$1.toString())
    }
  };
  @serializable final case class EmptyTree extends Tree with ScalaObject with Product {
    def this(): object EmptyTree = {
      EmptyTree.super.this();
      ()
    };
    final override def $$tag(): Int = 2038313110;
    final override def toString(): java.lang.String = "EmptyTree";
    final override def productPrefix(): java.lang.String = "EmptyTree";
    final override def productArity(): Int = 0;
    final override def productElement(x$$1: Int): Any = x$$1 match {
      case _ => throw new java.lang.IndexOutOfBoundsException(x$$1.toString())
    };
    protected def readResolve(): java.lang.Object = EmptyTree()
  };
  var EmptyTree$$module: object EmptyTree = null;
  final case <stable> def EmptyTree(): object EmptyTree = {
    if (EmptyTree$$module.eq(null))
      EmptyTree$$module = new object EmptyTree();
    EmptyTree$$module
  };
  val t: Tree = EmptyTree();
  t match {
    case (Tree,Int,Tree)Node(_, (v @ _), _) if x$$1.==(0) => {
      0;
      ()
    }
    case EmptyTree() => {
      2;
      ()
    }
  }
}
..... 
```

Eric.
