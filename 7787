Also Greg, you're defining a ClassManifest for B, whereas the compiler tries to calculate a manifest for type A:
```scala
[[syntax trees at end of typer]]// Scala source: Test.scala
package <empty> {
  import scala.collection._;
  import scala.collection.generic.CanBuildFrom;
  abstract trait LongTraversableLike[A >: Nothing <: Any, Repr >: Nothing <: LongTraversableLike[A,Repr]] extends AnyRef with scala.collection.TraversableLike[A,Repr] {
    def /*LongTraversableLike*/$init$(): Unit = {
      ()
    };
    override def toArray[B >: A <: Any](implicit evidence$1: ClassManifest[B]): <error> = LongTraversableLike.super.toArray[A]()
  }
}
```

How was that supposed to work?
