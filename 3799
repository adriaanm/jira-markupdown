Replying to [comment:5 extempore]:
> I applaud your progress, but so far in my limited fiddling with your implementation I haven't gotten zipped to behave fully lazily.  I can't spend any more time on it, but it would be great if you could take this all the way to a patch against trunk.  (I can't guarantee it'll go into 2.8 though.)

It works fine in my tests.
However, I don't satisfied with this way to fix SI-2634 since it is not perfect at all(as I mentioned in [http://old.nabble.com/Some-ideas-of-lazy-version-takeWhile-method-in-TraversableLike.-td28189940.html]).
In my opinion, just keep the status of SI-2634 until we have a pefect solution.

Anyway, this ticket(SI-3273) should be fixed
{code}
  override /*LinearSeqLike*/ 
  def iterator: Iterator[A] = new Iterator[A] {
  
    class LazyCell(st: => Stream[A]){ lazy val v = st }
    
    var these = new LazyCell(self)
    def hasNext: Boolean = !these.v.isEmpty
    def next: A = 
      if (hasNext) {
        val cur = these.v
        val result = cur.head
        these = new LazyCell(cur.tail)
        result
      } else Iterator.empty.next
    override def toStream: Stream[A] = these.v
    override def toList: List[A] = these.v.toList
    
  }
{code}

