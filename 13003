Possibly a misunderstanding on my part, and a very inconsequential bug if not...

`RandomAccessSeq.Projection` overrides `map` with a return type of `RandomAccessSeq.Projection`, but merely inherits `filter` and `flatMap` from `Seq.Projection` with their return types of `Seq.Projection`. As far as I know, this mainly affects the `Range` class.

This works:
{code}
val z: RandomAccessSeq.Projection[Int] = for (i <- 1 until 4) yield i
{code}
but adding a simple guard causes compiler type conflict errors:
{code}
val z: RandomAccessSeq.Projection[Int] = for (i <- 1 until 4 if true) yield i
{code}
Adding a second generator also causes compiler type conflict errors.

Not that anyone would actually do that.

For the same reason (I think), the `RangeM` class is a subtype `RandomAccessSeq.Projection`, while the `RangeFM` and `RangeG` classes are not.

It just seems to me that the return types from `filter`, `map`, and `flatMap` should always be identical.

(2.6.1-final)
