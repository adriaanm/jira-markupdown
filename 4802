I realize iulian will probably wave a wand and solve this in a few minutes, but as an excuse to dig deeper into the bytecode I looked at this for a while.

Using this slightly simplified code:
{code}
class S {
  def g(f: () => Any) = ()
  
  def f = {
    var n = try 17 catch { case _ => 34 }
    g(() => n)
  }
}
{code}
Which leads to the following for f():
{code}
public void f();
  Code:
   Stack=5, Locals=3, Args_size=1
   0:	new	SI-16; //class scala/runtime/IntRef
   3:	dup
   4:	iconst_0
   5:	istore_2
   6:	ldc	SI-17; //int 17
   8:	istore_2
   9:	goto	16
   12:	pop
   13:	ldc	SI-18; //int 34
   15:	istore_2
   16:	iload_2
   17:	invokespecial	SI-22; //Method scala/runtime/IntRef."<init>":(I)V
   20:	astore_1
   21:	aload_0
   22:	new	SI-24; //class bug3855/S$$$$anonfun$$f$$1
   25:	dup
   26:	aload_0
   27:	aload_1
   28:	invokespecial	SI-27; //Method bug3855/S$$$$anonfun$$f$$1."<init>":(Lbug3855/S;Lscala/runtime/IntRef;)V
   31:	invokevirtual	SI-31; //Method g:(Lscala/Function0;)V
   34:	return
{code}
Locals:
{code}
LocalVariableTable:
  Start Length Slot Name               Descriptor            Generic-signature
  0     35     0    this               Lbug3855/S;           
  6     11     2    exceptionResult1   I                     
  21    13     1    n$$1                Lscala/runtime/IntRef;
{code}
The space for the IntRef is allocated and then code is executed to obtain the constructor argument.  That code extends all the way to inst 16, which is also the point at which the verifier gives a failing grade.

Via the non-exceptional path, instr 9 jumps to 16 and the stack height is 2: the dup-ed IntRef.  If the exception is thrown, execution is resumed at 12 with a stack consisting only of the exception, which is popped off.  When it reaches instr 16 there is nothing there.  2 != 0 so fail.

I conclude it should look more like:
{code}
// first the try/catch expression
4:	iconst_0
5:	istore_2
6:	ldc	SI-17; //int 17
8:	istore_2
9:	goto	16
12:	pop
13:	ldc	SI-18; //int 34
15:	istore_2

// then the intref creation
0:	new	SI-16; //class scala/runtime/IntRef
3:	dup
16:	iload_2
17:	invokespecial	SI-22; //Method scala/runtime/IntRef."<init>":(I)V
{code}
