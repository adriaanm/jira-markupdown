Here is how eclipse developer Olivier Thomann described the problem:

[https://bugs.eclipse.org/bugs/show_bug.cgi?id=345926#c14]

{noformat}
The signature of the method apply in type com.twitter.finagle.Service$$anon$2
is:
 (TReq1;)Lcom/twitter/util/Future<TRep;>;

There is no type variable argument to "resolve" the Req1 type variable.

When the binary type binding is built for the type
com.twitter.finagle.Service$$anon$2, all method signatures are validated.

When this method is resolved, the only type arguments that are known are the
type arguments of the enclosing type com.twitter.finagle.Service: [<Req extends
java.lang.Object>, <Rep extends java.lang.Object>]

Req1 is not one of them so an error is returned.
I believe the signature of this method is invalid. Once this is fixed, we
should see if the two other issues are still reported.

Do you have a bug report opened against the scala compiler for this issue ?

The definition of this type is:
abstract class Service[-Req, +Rep] extends (Req => Future[Rep]) {
  def map[Req1](f: Req1 => Req) = new Service[Req1, Rep] {
    def apply(req1: Req1) = Service.this.apply(f(req1))
    override def release() = Service.this.release()
  }

  /**
* This is the method to override/implement to create your own Service.
*/
  def apply(request: Req): Future[Rep]

  /**
* Relinquishes the use of this service instance. Behavior is
* undefined is apply() is called after resources are relinquished.
*/
  def release() = ()

  /**
* Determines whether this service is available (can accept requests
* with a reasonable likelihood of success).
*/
  def isAvailable: Boolean = true
}

Maybe javac doesn't validate the signature of methods. And this could explain
why javac is compiling the code ok.
{noformat}
