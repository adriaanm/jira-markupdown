This is a follow-up to SI-1167 which was a problem with the !InnerClass attribute of anonymous classes which resulted in runtime exceptions.  Whereas this particular problem was fixed, the generated class-files do still not comply to the JVM spec. 

Take again this example (compiled with scala-2.8.0.r19928-b20091129020233):
{code}
trait Test {
 def testFunc(i:Int) = ((i:Int) => i + 5)(i)
}
{code}

The compiler generates three classes `Test`, `Test$$class` and `Test$$$$anonfun$$testFunc$$1`.

Here are the relevant parts from the `javap -v` outputs:

{code}
% javap Test -v
Compiled from "test.scala"
public interface Test extends scala.ScalaObject
  SourceFile: "test.scala"
//...
  InnerClass: 
   public final SI-11= SI-8 of SI-10; //$$anonfun$$testFunc$$1=class Test$$$$anonfun$$testFunc$$1 of class Test
//...

% javap Test\$$class -v
Compiled from "test.scala"
public abstract class Test$$class extends java.lang.Object
  SourceFile: "test.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final SI-39= SI-13 of SI-38; //$$anonfun$$testFunc$$1=class Test$$$$anonfun$$testFunc$$1 of class Test

% javap Test\$$\$$anonfun\$$testFunc\$$1 -v
Compiled from "test.scala"
public final class Test$$$$anonfun$$testFunc$$1 extends java.lang.Object implements scala.Function1,scala.ScalaObject,java.io.Serializable
  SourceFile: "test.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final SI-68= SI-9 of SI-67; //$$anonfun$$testFunc$$1=class Test$$$$anonfun$$testFunc$$1 of class Test
{code}

SI-1167 was about `Test` and `Test$$$$anonfun$$testFunc$$1` inconsistently reporting the outer class. This was obviously fixed. But there still remain several issues:
 * The inner class should really belong to `Test$$class` because that contains the implementation.
 * `Test$$class` and `Test` both contain the !InnerClass attribute
 * The !InnerClass attribute for anonymous classes is handled differently than done here. From [http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.htmlSI-79996 JVM Spec �4.7.5]: 

  If C is anonymous, the value of the inner_name_index item must be zero.

 and

  If C is not a member, the value of the outer_class_info_index item must be zero.

 * Since the EnclosingMethod (see [http://java.sun.com/docs/books/jvms/second_edition/ClassFileFormat-Java5.pdf �4.8.6 of the Java 5 class-file spec]) attribute is missing `Class.getEnclosingMethod/Constructor` are not working.

As a reference, see a corresponding Java example:
{code}
class JavaTest {
  public void calc(){
    new Object(){
      int calculate(int i) { return i + 5; }
    }.calculate(12);
  }
}
{code}
compiled with `javac -source 1.5 -target 1.5 Tester.java`

And the `javap` output:
{code}
% javap -v JavaTest
Compiled from "Tester.java"
class JavaTest extends java.lang.Object
  SourceFile: "Tester.java"
  InnerClass: 
   SI-2; //class JavaTest$$1
  minor version: 0
  major version: 49

% javap -v JavaTest\$$1
Compiled from "Tester.java"
class JavaTest$$1 extends java.lang.Object
  SourceFile: "Tester.java"
  EnclosingMethod: length = 0x4
   00 10 00 11 
  InnerClass: 
   SI-3; //class JavaTest$$1
  minor version: 0
  major version: 49
{code}

See this [http://old.nabble.com/Re%3A-Scala-Interpreter-Oddity----General-Class-Name-Curio-p25869373.html mailing-list post], as well, for more information.
