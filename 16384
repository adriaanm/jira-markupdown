Once again I'm frustrated with the mkString function in the library.

The issue is that that three-parameter version could be great but is in fact almost completely pointless.  All it does is this:

`noformat`
mkString(begin: String, sep: String, end: String) = begin + mkString(sep) + end
`noformat`

When I need to **unconditionally** add something before and/or after a string, I can just use the + operator.  It doesn't get any easier than that, and that's the way people unconditionally concatenate strings in Java and Scala both.  I don't even save any typing with mkString since it's not any shorter than the corresponding expression using +:

`noformat`
foo.mkString("start","sep","end")
"start"+foo.mkString("sep")+"end"
`noformat`

What I most often find myself wanting to do is something like this:

`noformat`
val sql = "select * from table" + conditions.mkString(" where", "and", "")
`noformat`

Or this:

`noformat`
val path = "/a/b/c" + pathComponents.mkString("/", "/", "")
`noformat`

In other words, I want to only add the begin and end part if the collection is not empty.  Having mkString work this way would be much more useful.
