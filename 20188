Scala appears to encode strings with a NUL byte "\u000" differently than Java. To reproduce this define a compile time constant in Java.

Create a Java file (Test.java):
```java
public class Test {
  public static final String TEST = "\0ABC";
}
```

Create a sample Scala main program and access TEST from there.

When accessing the string TEST from scala, the NUL byte appears to be encoded with 2 bytes. So, even simple equality tests like 
```java
"\0ABC".equals(Test.TEST) 
```
fail and return false. 

However, when TEST is made a private field in the class, and returned from class Test from a static getter function - getTestValue(), the equality check {code:java}  "\0ABC".equals(Test.getTestValue())  {code} passes and returns true.

I took a look at the generated bytecode, and I suspect defining TEST as a compile time constant and makes this difference (as opposed to accessing it via a getter()). 

Can someone please explain if I'm missing something obvious related to encoding of Strings? Some insight on the problem will be helpful.
