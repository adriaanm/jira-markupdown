The following code results in a compiler crash due to a failed assertion: 
```scala
def leaves[V, T[_]](
     root: T[V],
     children: T[V] => Option[Iterable[T[V]]],
     v: T[V] => V): Stream[V] = {
   children(root) match {
     case None => Stream.cons(v(root), Stream.empty)
     case Some(e) => e.toStream.flatMap((x) => leaves(x, children, v))
   }
}
```
(Stack trace attached.) Adding an explicit type application to the recursive call solves the problem:
```scala
def leaves[V, T[_]](
    root: T[V],
    children: T[V] => Option[Iterable[T[V]]],
    v: T[V] => V): Stream[V] = {
  children(root) match {
    case None => Stream.cons(v(root), Stream.empty)
    case Some(e) => e.toStream.flatMap((x) => leaves[V,T](x, children, v))
  }
}
```
