{code}
package p

class C {
  /** ol 1*/
  def ol(i: Int): Int = 0
  /** ol 2*/
  def ol(i: Int, j: Int): Int = 0

  // Forgetting to fully qualify the reference here results in a compiler crash
  // in 2.10.5 with JDK 7, as this searchs the empty package, which contains
  // `WrapperGenerator$FunctionType.class(rt.jar)`. Forcing the `info` of this
  // blows up with a "NoSymbol.owner" exception. 2.11 changes the crash to
  // a failure to lookup the member, since `NoSymbol.owner` now returns `NoSymbol`.
  //
  // Scaladoc should wrap the info forcing in `cleanupBogusClasses` with a try/catch in any case.

  /**
   * [[[ol(Int):Int* ol with a single parameter]]]
   */
  def linky = 0
}
{code}

Here's the faulty comment in Spark:

{noformat}
% git grep -E 'computeCost.RDD'
mllib/src/main/scala/org/apache/spark/mllib/clustering/BisectingKMeansModel.scala:   * Java-friendly version of [[computeCost(RDD[Vector])*]].
{noformat}

