Replying to [comment:1 dragos]:
> Can you provide an example? Not all cyclic references are solved by a return type, so maybe we can refine the scope of this.

There are various kinds of illegal cyclic references, but is it possible to have an illegal cyclic reference on a *method* which is not fixable using a return method?

How about if the error message is about an illegal cyclic *method* - and the method in question has no explicit return type, we mention the solution *may* be to add an explicit return type? (If we just include the may/might word then folks would at least think of it as a possible solution).

FWIW the method which caused the issue for me was of this form...

class Something {
  val bar = new Bar

  def foo = bar.something.filter( _.isSomething )
}

class Bar {
  def something: Seq[Cheese[_]] = {...}
}

the code which generated the error was of this form...

val s = new Something
import s._
foo

