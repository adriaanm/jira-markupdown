Scala has an elegant way to match the first element of a list, but not the last one. Doing it currently seems fairly awkward:

{code}
List(1,2,3) match {
  case l: List[_] if l.last == 3 => println("last is 3")
}
{code}

Instead, Apache ESME has defined the following extractor to be able to match the last element of the list:

{code}
object ::> {
  def unapply[A] (l: List[A]) = l match {
    case Nil => None
    case _ => Some( (l.init, l.last) )
  }
}
{code}

Now one can simply do this

{code}
List(1,2,3) match {
  case _ ::> 3 => println("last is 3")
}
{code}

Does it make sense to include something like this in the standard library? Perhaps one could think of a more appropriate object name.

This feature request is definitely not of high priority.
