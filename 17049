```scala
import scala.reflect.runtime.universe._
import scala.reflect.runtime.{universe => ru}
import scala.tools.reflect.RuntimeEval

object Test extends App {
  val tpe = typeOf[ru.Type]
  println(tpe.typeSymbol.isFreeType)
}
```
```scala
object Test extends App {
  val $u: scala.reflect.runtime.`package`.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = $u.runtimeMirror(getClass.getClassLoader);
  import $u._, $m._, Flag._
  val tpe = {
    val free$Type1 = build.newFreeType("Type", TypeBounds(staticClass("scala.Null").asTypeSymbol.asTypeConstructor, TypeRef(ThisType(staticClass("scala.reflect.api.Types")), build.selectType(staticClass("scala.reflect.api.Types"), "TypeApi"), List())), TypeTag[Type](null, null), DEFERRED | OVERRIDE, "defined by Types");
    TypeRef(SingleType(SingleType(SingleType(SingleType(SingleType(build.thisPrefix(RootClass), staticModule("scala")), staticModule("scala.reflect")), staticModule("scala.reflect.runtime")), staticModule("scala.reflect.runtime.package")), build.selectTerm(staticModule("scala.reflect.runtime.package").asModuleSymbol.moduleClass, "universe")), free$Type1, List())
  }
  println(tpe)
}
```

`ru.Type` is indeed an abstract type member, but it's not a free type, because it's path-dependent.
