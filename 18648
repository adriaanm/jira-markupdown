With `-Xstrict-inference` per scala/bug#6680:
```scala
scala> sealed abstract class IBox[A]
defined class IBox

scala> final case class ICBox[A](a: A) extends IBox[A]
defined class ICBox

scala> def mapbox[A, B](fa: IBox[A])(f: A => B): IBox[B] = fa match {case ICBox(a) => ICBox(f(a))}
<console>:10: error: type mismatch;
 found   : a.type (with underlying type A)
 required: A
       def mapbox[A, B](fa: IBox[A])(f: A => B): IBox[B] = fa match {case ICBox(a) => ICBox(f(a))}
                                                                                              ^
```

It's great that `a` has the `A` from `ICBox` in this case, but here it's sound to crush it up to `A` from `mapbox` at the point I'm using it.  Similarly with covariant box:
```scala
scala> sealed abstract class Box[+A]
defined class Box

scala> final case class CBox[+A](a: A) extends Box[A]
defined class CBox

scala> def mapbox[A, B](fa: Box[A])(f: A => B): Box[B] = fa match {case CBox(a) => CBox(f(a))}
<console>:10: error: type mismatch;
 found   : a.type (with underlying type A)
 required: A
       def mapbox[A, B](fa: Box[A])(f: A => B): Box[B] = fa match {case CBox(a) => CBox(f(a))}
                                                                                          ^
```
