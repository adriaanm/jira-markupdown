I can reproduce the OOME with JVM heap sizes up to 1G. (The default is typically less, it depends on your platform).

Increasing this to 2GB gets past the OOME, although it just gets as far as running into a JVM limitation about the size of a class:
```
% scalac -version
Scala compiler version 2.11.2 -- Copyright 2002-2013, LAMP/EPFL
% scala -J-Xmx2G sandbox/test.scala
sandbox/test.scala:79: error: Could not write class All$ because it exceeds JVM code size limits. Method Start$'s code too large!
object All {
       ^
one error found
```

There is nothing the compiler can to to help out here. You might have more luck in writing code to read the parse the data from a CSV file, or otherwise you would need to artificially chunk the generated code.

Alternatively, you could provide the arguments in the parameter declaration order, which is a lot more efficient in the generated bytecode.

For instance, this compiles without heap exhaustion or exceeding classfile limitations with default settings:

```
```scala
object All {
  def newEvent(year: Int, month: Month, weekday: Weekday, day: Int, hour: Int, minute: Int, second: Int, timezone: Timezone, action: Action)
     = new Event (second, minute, hour, weekday, day, month, year, timezone, action);

newEvent ( year = 2014, month = Jul, weekday = Sun, day = 6, hour = 11, minute = 40, second = 55, timezone = BST, action = Start );
newEvent ( year = 2014, month = Jul, weekday = Sun, day = 6, hour = 11, minute = 41, second = 13, timezone = BST, action = Paperwriting );
newEvent ( year = 2014, month = Jul, weekday = Sun, day = 6, hour = 11, minute = 53, second = 35, timezone = BST, action = Break );
...
```
