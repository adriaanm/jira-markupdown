[scala 2.8.1]
One would expect that 'set.toSeq' will always contain the same elements as 'set', well, prehaps just in a different order? It is so frustrating to find out that to be false:

{code}
import scala.xml._
import scala.collection.immutable


final case class Category (id: Int, parent: Int) {
	override def hashCode() = id

	override def equals (obj: Any): Boolean = {
		if (!(obj.isInstanceOf[Category])) return false
		id == obj.asInstanceOf[Category].id
	}

	def xml: Elem = <category id={id.toString} parent={parent.toString}/>
}

object test {
	def main (params: Array[String]): Unit = {
		var set = immutable.Set.empty[Category]
		set += Category(1, 0)
		set += Category(2, 1)
		set += Category(3, 1)
		System.err.println("set=" + (set map {_.xml} ))
		System.err.println("set.seq=" + (set.toSeq map {_.xml} ))
	}
}
{code}

The output (slightly formatted manually):
{code}
set=Set(
	<category parent="0" id="1"></category>,
	<category parent="1" id="2"></category>
)
set.seq=List(
	<category parent="0" id="1"></category>,
	<category parent="1" id="2"></category>,
	<category parent="1" id="3"></category>
)
{code}

Oh no, that should not be so!

The set and set.toSeq objects themselves are ok; each has length of 3. It is after mapping the set elements into scala.xml.Elem some elements are starting to magically disappear.

This bug resembles SI-3334; but here the final set contains the exact same type objects passed via the exact same mapping - it could not be more trivial than this (on the user side). And it could not be harder to find out where those categories disappear into...
