"Wip it good."  Is that an old one?

I have a spec question.  Boolean match is achieved by unapply returning boolean.  What about `get` returning boolean?  It's the same use case.  Right now, you must supply a pattern arg.  isEmpty means you don't match.

The additional use case is that in a macro, it's more symmetrical or regular to generate the return of get in one place. I already worked around SI-7897 in the obvious way, `get: String`, so this was the next target.
{code}
  class Nada(s: String) extends AnyRef {
    def isEmpty = s != "null"
    def get: Boolean = !isEmpty

    override def toString = "Nada"
  }

  object Nada {
    def unapply(x: Any): Nada = new Nada(String.valueOf(x))
  }
{code}
Trying to eliminate the bad:
{code}
    null match {
      case p0.Nada(/*bad*/) => println(s"matched Nada")
      case _         => println("no matchada")
    }
{code}
