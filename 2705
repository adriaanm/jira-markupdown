You can also use 'map' directly with the new 'breakOut' CanBuildFrom introduced by SI-19493 (nice work), to build a Map, or anything else for that matter. Like so:

{code}
> import scala.collection.breakOut
> val map : Map[Int,String] = List("London", "Paris").map(x => (x.length, x))(breakOut)
map: Map[Int,String] = Map(6 -> London, 5 -> Paris)
{code}

Bit more elegant, and more efficient I imagine, than passing an intermediate data structure to the Map factory object:

{code}
val map = Map(List("London", "Paris").map { x => (x.length,x) }: _*)
{code}

Don't think a special 'mapBy' or 'mapTo' is useful enough to merit being added. Plus these method names could lead to increased confusion between 'map' the generic method on collections, and Map the particular kind of collection.
