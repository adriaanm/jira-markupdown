Scalac manages to parse both of the following expressions:
```scala
scala> a.b(c).d(e) //print
   a.b(c).d(e) // : <error>

scala> a b(c).d(e) //print
   a.b(c.d(e)) // : <error>
```

I think it is pretty clear that the second one will almost always be because of a wrong keystroke or an oversight. But scalac manages to parse it, and completely ignores the parenthesis to the right of `c`, resulting in something that the author probably didn't intend (or he would have written it that way).

Some convoluted example to show this can lead to unexpected results:
```scala
scala> object a { def b(x: Any) = hasD }; object hasD { def d(x: Any) = x }; object e; val c = hasD
defined object a
defined object hasD
defined object e
c: hasD.type = hasD$@4bb2ee58

scala> a b(c).d(e)
res1: hasD.type = hasD$@4bb2ee58

scala> a.b(c).d(e)
res2: Any = e$@756c6202
```

Example it can lead to very confusing compiler errors: http://stackoverflow.com/questions/41600172/scala-multiple-type-parameter-that-are-defined-later
