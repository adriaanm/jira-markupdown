Existential subtype calculations create temporary type variables for the quantified parameters:

https://github.com/scala/scala/blob/v2.11.7/src/reflect/scala/reflect/internal/tpe/TypeComparers.scala#L482-L483

This is a pretty fundamental part of the compiler and I can't see a way to change this.

These will indeed end up in the uniques cache until GC evicts them.

One idea you might be able to try is use this way to find whether a type is a subclass of {{Option}} or not:

{code}
scala> val optionClass = symbolOf[Option[_]] // just do this once
optionClass: reflect.runtime.universe.TypeSymbol = class Option

scala> typeOf[Option[Any]].baseType(optionClass) != NoType
res3: Boolean = true

scala> typeOf[Tuple1[Any]].baseType(optionClass) != NoType
res4: Boolean = false
{code}
