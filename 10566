By way of example, consider `AnyRefMap#getOrElse`

{code}
override def getOrElse[V1 >: V](key: K, default: => V1): V1 = {
    val i = seekEntry(hashOf(key), key)
    if (i < 0) default else _values(i).asInstanceOf[V]
  }
{code}

and compare with `MapLike#getOrElse` (which is inherited by the old, slow HashMap)

{code}
def getOrElse[B1 >: B](key: A, default: => B1): B1 = get(key) match {
    case Some(v) => v
    case None => default
  }
{code}

If `AnyRefMap` were not final, and we allowed you to override `get`, we could not optimize away the allocation of the `Some`.
