I don't see yet there's anything to be fixed in the compiler. These are the rules of overloading resolution. You can get yourself into hot water for any set of rules. The problem is that if you write just toString, both toString() and toString(StringBuilder) are applicable (via closure conversion). Scala's overloading resolution prefers toString() over toString(StringBuilder) (which it should!). However, toString(StringBuilder) is defined in a subclass, so an ambiguity error results.

Generally it is always a bad idea to overload with overlapping instances in subclasses, except if the subclass instance is strictly more specific. In the case of toString maybe the fact that both methods overlap is surprising, but I don't see how we can do anything about it.

So, to reiterate my position from a year ago, it's really toString(StringBuilder) that has to be deprecated and fixed. We should deprecate for 2.7.2 RC4 and keep Geoffreys fix to scala/bug#1404 rolled back so that arrays still print out correctly. We should remove toString(StringBuilder) for 2.8 and at that time we can finally roll back the fix for scala/bug#547, which made scala/bug#1404 fail (because then there won't be a need for the fix).

Pretty convoluted. We could have avoided all of this if we had fixed it a year ago.

As to a replacement: Everywhere else in the libraries, it's addString(StringBuilder)
so I propose we rename it to that.

Burak, how about it?
