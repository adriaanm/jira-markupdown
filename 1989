
T in C overrides the abstract type in A and f in C overloads the method f in A.  Both 'override' modifiers are optional here.
The T traits in B and C are indeed different types to the compiler.  You can see this with classes as well (example at the end).  Additionally, you can make them related by having the trait in C extend `super.T`.

Details:

Line 387 in !RefChecks explicitly skips checking overridden classes:
{code}
  if (!opc.overridden.isClass) checkOverride(clazz, opc.overriding, opc.overridden);
{code}

This particular line is 5 years old (r4511) and the behavior existed in the code it replaced.  It appears to have been this way since !RefChecks existed (r4246).

If I remove the `!isClass`, I get the error probably expected by the reporter:
{code}
error: overriding trait T in trait B;
 trait T cannot be used here - classes and objects cannot be overridden
        override trait T {
                       ^
{code}

or for the example at the end:
{code}
Q.scala:3: error: overriding class Q in class M;
 class Q cannot be used here - classes and objects cannot be overridden
class N extends M { class Q { def x = 5 } }
                          ^
{code}

However, I think the current behavior might be intended.  Compiling the standard library with the check removed shows that the collections library has things like:
{code}
  trait Transformed[+B] extends IterableView[B, Coll] with super.Transformed[B]
{code}
and Numeric shadows Ops in Ordering:
{code}
src/library/scala/math/Numeric.scala:189: error: overriding class Ops in trait Ordering;
class Ops cannot be used here - classes and objects cannot be overridden
class Ops(lhs: T) {
      ^
{code}

Since this appears to be intended, I would guess that this bug is invalid.
I've read the relevant definitions (matches, subsumes, overrides) in Ch. 2, 3, and 5, and I'm not sure what exactly allows this in the spec.
Perhaps closing this bug would just be a matter of updating or clarifying the spec?

While the spec update can probably wait, perhaps it is an immediate issue to just verify that the behavior is indeed expected.  Otherwise, the collections library makes it to final depending on a bug.

Example showing different classes and methods:
{code}
scala> class M { class Q { def x = 3 }; def q(a: Q) = a.x }
defined class M

scala> class N extends M { class Q { def x = 5 }; def q(a: Q) = a.x }
defined class N

scala> val m = new M
m: M = M@10aefdb

scala> val n = new N
n: N = N@1ce08c7

scala> val nm: M = n
nm: M = N@1ce08c7

scala> val mq = new m.Q
mq: m.Q = M$$Q@191f61c

scala> val nq = new n.Q
nq: n.Q = N$$Q@938b4a

scala> val nmq = new nm.Q
nmq: nm.Q = M$$Q@1ab7626

scala> m.q(mq)
res0: Int = 3

scala> m.q(nq)
<console>:11: error: type mismatch;
 found   : n.Q
 required: m.Q
       m.q(nq)
           ^

scala> m.q(nmq)
<console>:12: error: type mismatch;
 found   : nm.Q
 required: m.Q
       m.q(nmq)
           ^

scala> nm.q(nmq)
res3: Int = 3

scala> n.q(nmq)
<console>:11: error: overloaded method value q with alternatives:
  (a: n.Q(in class N))Int <and>
  (a: n.Q(in class M))Int
 cannot be applied to (nm.Q(in class M))
       n.q(nmq)
         ^

scala> (n: M).q(nmq)
<console>:11: error: type mismatch;
 found   : nm.Q
 required: _1.Q where val _1: M
       (n: M).q(nmq)
                ^

scala> n.q(nq)
res6: Int = 5
{code}
