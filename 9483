This gets pretty hairy, but we could selectively normalized type refs for symbols that originate from classfiles.
```scala
    // TODO: test case that is compiled in a specific order and in different runs
    final override def normalize: Type = {
      // arises when argument-dependent types are approximated (see def depoly in implicits)
      if (pre eq WildcardType) WildcardType
      else if (phase.erasedTypes) normalizeImpl
      else {
        if (normalized == NoType) normalizeImpl // source file symbol, always recalc.
        else if (normalized eq null) {
          if (sym.enclosingTopLevelClass != null && sym.enclosingTopLevelClass.sourceFile != null) {
            normalized = NoType // don't cache normalized types for source symbols, see SI-7361
            normalizeImpl
          } else {
            normalized = normalizeImpl // populate the cache
            normalized
          }
        } else normalized
      }
    }
```

Here's where the caching was added: https://github.com/scala/scala/commit/7ff290c#L8R1515
