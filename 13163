I was trying to break things in a different way, but the following code:
{code}
object Testing extends Application {

  class MacGuffin

  object A {
     var x : { type T >: Null <: AnyRef;
               val y : T;
               def z (w : T) : T } =
             new { type T = String;
                   val y = "foo";
                   def z (w : String) = w + "bar" }
     lazy val u = { println("u evaluated"); x }
     def foo (v : => u.type#T) : u.type#T = {
       x = new { type T = MacGuffin;
                 val y = new MacGuffin;
                 def z (w : MacGuffin) = w }
       u.z(v)
     }
  }

  A.foo(A.u.y)
}
{code}
compiles fine, but when executed:
{code}
u evaluated
java.lang.ExceptionInInitializerError
        at Testing.main(testing.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at scala.tools.nsc.ObjectRunner$$$$anonfun$$run$$1.apply(ObjectRunner.scala:75)
        at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
        at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
        at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:161)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.NoSuchMethodException: Testing$$A$$$$anon$$2.z(java.lang.Object)
        at java.lang.Class.getMethod(Class.java:1581)
        at Testing$$A$$.reflMethod$$Method1(testing.scala:17)
        at Testing$$A$$.foo(testing.scala:17)
        at Testing$$.<init>(testing.scala:21)
        at Testing$$.<clinit>(testing.scala)
        ... 10 more
{code}
I was aiming for a {{ClassCastException}}, but the above is definitely also a problem. 
