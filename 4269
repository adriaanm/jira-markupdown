I think it is the same issue manifesting in two different ways.  The pattern matcher is duplicating the default body in the decision tree.  When there are two or more routes to the same body it's supposed to generate a label and have the blocks jump to the label.  In this case it isn't doing that.

In the crashing case, the two bodies look the same to the lifter, so when it looks for the second one it has already removed it from the map, and key not found.

In the other case, they look avoid that crash but they're still generating the same method thus duplicate definition.

I assume it's a pattern matcher bug.  I remember not being clear on what goes into this logic, which predates me:
```scala
      def isLabellable = !cond(body)  { case _: Throw | _: Literal => true }
```
But you can see the relevance.
