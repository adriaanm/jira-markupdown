Here's a simple test program:

{code}
object Main {
  def main(args:Array[String]) {
    val ns = Array(3L, 3L, 3L)
    val a:A = new A(ns(0))
  }
}

class A(val u:Long) extends AnyVal
{code}

It currently crashes with an error in typer:

{code}
exception when typing new <error>(ns.apply(0).$asInstanceOf[<notype>]())
class type required but <notype> found in file test.scala
scala.reflect.internal.Types$TypeError: class type required but <notype> found
        at scala.tools.nsc.typechecker.Contexts$Context.issue(Contexts.scala:317)
{code}

If you save the dereference Long in a val and then instantiate A, things are fine.
