While it's a bit annoying, it's not really a bug.

Expanding the implicit conversion {{Predef.any2ArrowAssoc}} illuminates the example:

{code}
scala>  Map[Set[T],Int]((Set(A), 1))
res5: scala.collection.immutable.Map[Set[T],Int] = Map(Set(A$@78e782a8) -> 1)

scala>  Map[Set[T],Int](any2ArrowAssoc[Set[T]](Set(A)).->(1))
res6: scala.collection.immutable.Map[Set[T],Int] = Map(Set(A$@78e782a8) -> 1)

scala>  Map[Set[T],Int](any2ArrowAssoc(Set(A)).->(1))
<console>:10: error: type mismatch;
 found   : (scala.collection.immutable.Set[A.type], Int)
 required: (Set[T], Int)
               Map[Set[T],Int](any2ArrowAssoc(Set(A)).->(1))
                                                        ^

scala> any2ArrowAssoc(Set(A)).->(1) : (Set[T], Int)
<console>:10: error: type mismatch;
 found   : (scala.collection.immutable.Set[A.type], Int)
 required: (Set[T], Int)
              any2ArrowAssoc(Set(A)).->(1) : (Set[T], Int)
{code}

Type inference doesn't consider the expected type of the result of {{->(..)}} when inferring the type argument to {{any2ArrowAssoc}}.
