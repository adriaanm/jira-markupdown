Given some class with a method
```scala
class A {
  def m() = 5
}
```

it is currently possible to override this method with an object definition:
```scala
class B extends A {
  object m
}
```

The compiler won't complain about this (and I'm not sure what the specification says about this specific situation), however the code will break wherever A is expected:
```scala
scala> ((new B): B).m    // compiles and runs
res: object B#m = B$m$@1e450448
scala> ((new B): A).m
java.lang.ClassCastException
```

As a possibly related phenomenon: It is currently not possible to override a parentheses-less def with an object.
```scala
class A2 {
  def m2 = 5
}
class B2 extends A2 {
  object m2
}
error: overriding method m in class A2 of type => Int;
 object m2 cannot be used here - classes and objects can only override abstract types
       class B2 extends A2 { object m2 }
                                  ^
```

Related: https://groups.google.com/forum/#!topic/scala-user/TOuQ2-Jr_R8
Related: http://stackoverflow.com/questions/7584400/overriding-a-method-with-an-object

