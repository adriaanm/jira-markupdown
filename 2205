I was just about to open a ticket and then took my own advice about searching trac first, and sure enough it's a duplicate of this one.  Well, for posterity then:

Here is the "embed clojure" hello world: http://en.wikibooks.org/wiki/Clojure_Programming/Tutorials_and_Tips#Invoking_Clojure_from_Java

Here is the direct scala translation:
{code}
import clojure.lang.{ RT, Var }

// Load the Clojure script -- as a side effect this initializes the runtime.
RT.loadResourceScript("foo.clj")

// Get a reference to the foo function.
val foo = RT.`var`("user", "foo")

// Call it!
val result = foo.invoke("Hi", "there");
println(result)
{code}
With the same foo.clj on the classpath, scala 2.7 and 2.8:
{code}
$$ ./go27 a.scala 
Hi there
{code}
{code}
$$ ./go28 a.scala 
java.lang.AssertionError: assertion failed: java.util.concurrent.Callable[V]
	at scala.Predef$$.assert(Predef.scala:97)
	at scala.tools.nsc.symtab.Types$$TypeRef.transform(Types.scala:1417)
	at scala.tools.nsc.symtab.Types$$TypeRef$$$$anonfun$$baseTypeSeq$$3.apply(Types.scala:1588)
	at scala.tools.nsc.symtab.Types$$TypeRef$$$$anonfun$$baseTypeSeq$$3.apply(Types.scala:1588)
	at scala.tools.nsc.symtab.BaseTypeSeqs$$BaseTypeSeq.map(BaseTypeSeqs.scala:114)
	at scala.tools.nsc.symtab.Types$$TypeRef.baseTypeSeq(Types.scala:1588)
	at scala.tools.nsc.symtab.BaseTypeSeqs$$$$anonfun$$compoundBaseTypeSeq$$1.apply(BaseTypeSeqs.scala:207)
	at scala.tools.nsc.symtab.BaseTypeSeqs$$$$anonfun$$compoundBaseTypeSeq$$1.apply(BaseTypeSeqs.scala:205)
	at scala.collection.generic.LinearSequenceTemplate$$class.foreach(LinearSequenceTemplate.scala:82)
...
{code}
