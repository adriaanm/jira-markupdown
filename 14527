Given the following:
```scala
abstract class A[T <: A[T]] {
  def foo: X[T]
}

class B extends A[B] {
  def foo = new X[B]
} 

class X[T <: A[T]]

object Test {
  def test: X[_] = {
    val a: A[_] = new B

    def f[T <: A[T]](x: X[T]) = x

    f(a.foo)
  }
}
```

compilation fails as: 
```scala
Test.scala:18: error: inferred type arguments [_$$2] do not conform to method f's type parameter bounds [T <: A[T]]
    f(a.foo)
    ^
```
even though it is not possible for any instance of A to fail to satisfy this bound. Explicitly specifying the existential type allows correct compilation:
```scala
object Test {
  def test: X[_] = {
    val a: A[T] forSome {type T <: A[T]} = new B

    def f[T <: A[T]](x: X[T]) = x

    f(a.foo)
  }
}
```

It seems like A[_] is naively being expanded to A[T] forSome {type T} instead of respecting the bound declared in A. Minor, but unexpected.
