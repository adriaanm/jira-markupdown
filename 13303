I talk about `jvm/manifests.scala`, since it behaves the same as `pos/manifest1.scala` when compiling, and additionally shows problems on execution (and the distilled code is the same)

Here's a reduced example:
```scala
import scala.reflect.Manifest
object Test extends Application {
  def print[T](x: T)(implicit m: Manifest[T]) { }
  print(())
}
```

 - compiling on 1.4 or 1.5 (target 1.5) and running on jvm5 works
 - compiling on 1.5 with {{-target:jvm-1.4}} breaks:
```scala
manifests.scala:5: error:
overloaded method value classType with alternatives

(scala.reflect.Manifest[_$$10] forSome { type _$$10 },Class[_$$11] forSome { type _$$11 },scala.reflect.Manifest[_$$12] forSome { type _$$12 }*)scala.reflect.Manifest[Unit]
 <and>
(scala.reflect.Manifest[_$$8] forSome { type _$$8 },Class[_$$9] forSome { type _$$9 })scala.reflect.Manifest[Unit]
 <and>
(Class[_$$5] forSome { type _$$5 },scala.reflect.Manifest[_$$6] forSome { type _$$6 }*)scala.reflect.Manifest[Unit]
 <and>
(Class[Unit])scala.reflect.Manifest[Unit]

cannot be applied to (java.lang.Class)
```

 - compiling on 1.4 with {{-target:jvm-1.4}} does not crash, but running then on 1.4 crashes:
```scala
java.lang.ExceptionInInitializerError
        at Test.main(manifests.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at scala.tools.nsc.ObjectRunner$$$$anonfun$$run$$1.apply(ObjectRunner.scala:75)
        at scala.tools.nsc.ObjectRunner$$.withContextClassLoader(ObjectRunner.scala:49)
        at scala.tools.nsc.ObjectRunner$$.run(ObjectRunner.scala:74)
        at scala.tools.nsc.MainGenericRunner$$.main(MainGenericRunner.scala:161)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.ClassNotFoundException: scala.Unit
        at java.net.URLClassLoader$$1.run(URLClassLoader.java:199)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:187)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:289)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:235)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:141)
        at Test$$.class$$Method1(manifests.scala:5)
        at Test$$.<init>(manifests.scala:5)
        at Test$$.<clinit>(manifests.scala)
        ... 10 more
```
