I have a non-trivial jumble of code which is using ParSet (implementing breadth-first search, if it helps).  I can't share the code, but I went through and found all the operations I'm performing on ParSet:

* &~ (with ParSet)
* partition
* flatMap (function returning ParSet)
* ++ (with ParSet)
* map
* foldLeft

There are several sets involved here (obviously).  One of the sets that I'm mapping over is a ParSet[PartialFunction[A, ParSet[A]].  This set appears to be the root of the problem, though I can't explain how in any non-circumstantial way.  I am *deterministically* getting the following stack trace:

java.lang.ArrayIndexOutOfBoundsException: 128
	at scala.collection.parallel.mutable.ParFlatHashTable$ParFlatHashTableIterator.scan(ParFlatHashTable.scala:36)
	at scala.collection.parallel.mutable.ParFlatHashTable$ParFlatHashTableIterator.next(ParFlatHashTable.scala:53)
	at scala.collection.parallel.AugmentedIterableIterator$class.partition2combiners(RemainsIterator.scala:162)
	at scala.collection.parallel.mutable.ParFlatHashTable$ParFlatHashTableIterator.partition2combiners(ParFlatHashTable.scala:26)
	at scala.collection.parallel.ParIterableLike$Partition.leaf(ParIterableLike.scala:1049)
	at scala.collection.parallel.Tasks$Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:66)
	at scala.collection.parallel.Tasks$Task$class.tryLeaf(Tasks.scala:68)
	at scala.collection.parallel.ParIterableLike$Partition.tryLeaf(ParIterableLike.scala:1046)
	at scala.collection.parallel.AdaptiveWorkStealingTasks$TaskImpl$class.internal(Tasks.scala:179)
	at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$TaskImpl.internal(Tasks.scala:509)
	at scala.collection.parallel.AdaptiveWorkStealingTasks$TaskImpl$class.compute(Tasks.scala:164)
	at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$TaskImpl.compute(Tasks.scala:509)
	at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:147)
	at scala.concurrent.forkjoin.ForkJoinTask.tryExec(ForkJoinTask.java:404)
	at scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:494)
	at scala.collection.parallel.ForkJoinTasks$TaskImpl$class.sync(Tasks.scala:439)
	at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$TaskImpl.sync(Tasks.scala:509)
	at scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:487)
	at scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:20)
	at scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:884)
	at scala.collection.parallel.Tasks$Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:66)
	at scala.collection.parallel.Tasks$Task$class.tryLeaf(Tasks.scala:68)
	at scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:879)
	at scala.collection.parallel.AdaptiveWorkStealingTasks$TaskImpl$class.compute(Tasks.scala:164)
	at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$TaskImpl.compute(Tasks.scala:509)
	at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:147)
	at scala.concurrent.forkjoin.ForkJoinTask.quietlyExec(ForkJoinTask.java:422)
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.mainLoop(ForkJoinWorkerThread.java:340)
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:325)

Changing one of the PartialFunction(s) to a different function (keeping the cardinality of the set the same) resolved the issue.

I apologize that I can't narrow this issue down any more precisely.  Hopefully the stack trace is at least enough to give you an idea of where a problem might lie.  As mentioned, I do have a workaround here (i.e. the different function definition).
