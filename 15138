It is currently very difficult to see which methods in the collections library are implemented efficiently and which are not. First of all, it would help if scaladoc would highlight the specific implementations differently than those from subclasses, so it is much easier to spot potential problems.


Then here is a concrete case: scala.immutable.Vector.last is very inefficient, it falls back to TraversableLike and hence iterates over all elements. A quick workaround is to use takeRight( 1 ).head instead.

There are probably more methods that need revision, e.g. splitAt is also going back to TraversableLike.


{code}
scala> var x = collection.immutable.Vector[ Int ]()
x: scala.collection.immutable.Vector[Int] = Vector()

scala> for( i <- 1 to 10000000 ) x :+= i

scala> val t1 = System.currentTimeMillis; x.last; val t2 = System.currentTimeMillis; println( t2-t1 )
384
t1: Long = 1269285897285
t2: Long = 1269285897669

scala> val t1 = System.currentTimeMillis; x.takeRight( 1 ).head; val t2 = System.currentTimeMillis; println( t2-t1 )
0
t1: Long = 1269285905613
t2: Long = 1269285905613

{code}

one could argue whether this should be classified as enhancement or defect, but i think since one would expect Vector to perform 'last' in O(1), that is appropriate to classify as defect.

there are other methods which would probably also need update, e.g. 'splitAt' (which also falls back to TraverableLike).
