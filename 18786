```scala
object ScalaZeee {
  trait HFold[M[_], U] {
    type Apply[E, A <: U] <: U
  }
  trait GenericCons[M[_], H, +T <: GenericList[M]] extends GenericList[M] {
    val tail: T
    override type Folded[N[X] >: M[X], U, F <: HFold[N, U]] = F#Apply[H, tail.Folded[N, U, F]]
  }
  val KNil: GenericList[Nothing] = ???
  sealed trait GenericList[+M[_]] {
     type Folded[N[X] >: M[X], U, F <: HFold[N, U]] <: U
  }
}

object TypelevelUsage {
  import ScalaZeee._
  type T = GenericCons[Some, String, KNil.type]
  val klist1: T = ???
  type T2 = klist1.Folded[Option, Int, HFold[Option, Int]]
  val count2: T2 = ???
  
  count2.ensuring(x => x) // trigger an implicit search
}
```
```
error: java.lang.AssertionError: assertion failed: (List(type N, type U, type F),List(type N, type U, type F))
	at scala.reflect.internal.Types$ArgsTypeRef.transform(Types.scala:1995)
	at scala.reflect.internal.Types$TypeRef.baseTypeSeqImpl(Types.scala:2309)
	at scala.reflect.internal.Types$class.defineBaseTypeSeqOfTypeRef(Types.scala:2452)
```

Regressed in scala/bug#8046
