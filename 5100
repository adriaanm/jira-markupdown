The `mapValues` creates a wrapper around the underlying map, so the result has the type `Map`. Making the result type `TreeMap` would be messy, since the `TreeMap` is not a wrapper. However, even though the result type is `Map`, it's not true that the order is lost.

Can you please post a code snippet that demonstrates the described behaviour?

In the REPL:
```scala
scala> import collection.immutable._
import collection.immutable._
                                                                                                                                                                                 
scala> var tm = TreeMap[Int, Int]()                                                                                                                                              
tm: scala.collection.immutable.TreeMap[Int,Int] = Map()                                                                                                                          
                                                                                                                                                                                 
scala> for (i <- 0 until 100) tm += i -> i
                                                                                                                                                                                 
scala> tm                                                                                                                                                                        
res1: scala.collection.immutable.TreeMap[Int,Int] = Map(0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, ...                                                                                  

scala> tm.mapValues(_ + 1).foreach(println)
(0,1)
(1,2)
(2,3)
(3,4)
(4,5)
(5,6)
(6,7)
(7,8)
(8,9)
(9,10)
(10,11)
...

scala> val it = tm.mapValues(_ + 1).iterator
it: Iterator[(Int, Int)] = non-empty iterator

scala> while (it.hasNext) println(it.next)
(0,1)
(1,2)
(2,3)
(3,4)
...

scala> tm.mapValues(_ + 1).toString
res2: String = Map(0 -> 1, 1 -> 2, 2 -> 3, ...

scala> tm.mapValues(_ + 1)
res3: scala.collection.immutable.Map[Int,Int] = Map(69 -> 70, 0 -> 1, 88 -> 89, ...
```

All the examples before the last line show that the order is preserved. The last line, however, shows that the REPL does some kind of mapping before printing the map. Because type information is lost by `mapValues`, the subsequent `map` operation triggers the more general implicit builder factory - the one for `Map`s, which defaults to hash maps.

Perhaps this is what you've meant?
