This seems to be an extreme edge-case type inferral issue that occurs for a very specific expression structure involving implicit values, and I am not really sure how to even explain it.

Behold my laboriously distilled example:
```scala
class O[+A] {
  def op[B](b: O[B]): O[B] = ???

  // Note the only difference between `a` and `b` is the bound on `C`
  def a[B <: O[_], C <: O[_]]
       (b: B)(implicit i: I[this.type, B, C]): C = i(this, b)
  def b[B <: O[_], C <: OO[_]]
       (b: B)(implicit i: I[this.type, B, C]): C = i(this, b)
}

class OO[+A] extends O[A]

abstract class I[-A <: O[_], -B <: O[_], +C <: O[_]] {
  def apply(a: A, b: B): C
}

object I {
  implicit def i[A]: I[O[A], O[A], OO[A]] =
    new I[O[A], O[A], OO[A]] { def apply(a: O[A], b: O[A]): OO[A] = new OO[A] }
}

val ci = new O[Int]
val cs = new O[String]

val e1: O[String] = ci.op(cs.a(cs)) // works
val e2: O[String] = ci.op(cs.b(cs)) // compile error: O[Any] ???
val e3: O[String] = cs.b(cs) // works
val e4: O[String] = ci.op(cs.b(cs)(I.i)) // also works???

// /home/jcracknell/git/sandbox/Inferral.scala:26: error: type mismatch;
//  found   : this.O[Any]
//  required: this.O[String]
// val e2: O[String] = ci.op(cs.b(cs)) // compile error: O[Any] ???
//                          ^
// one error found
```
