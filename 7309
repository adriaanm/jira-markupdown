The fix goes too far because it also affects `this` references of auxiliary constructors.

{code}
object T {
  override def toString = "T"

  // here, `this` should refer to T. That's what was fixed
  class C(val x: Any = this) {
    override def toString() = "C"
  }

  class D(val x: Any) {
    override def toString() = "D"
    // here, `this` should refer to the D instance, but after the fix it also
    // refers to T.
    def this(a: Int, b: Int, c: Any = this) { this(c) }
  }
}

println((new T.C()).x)     // prints "T", correct
println((new T.D(0,0)).x)  // prints "T", should print "D"
{code}
