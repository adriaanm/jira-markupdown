I feel your pain, but it's clearly documented [in the scaladoc](http://www.scala-lang.org/api/2.12.1/scala/util/matching/Regex.html#replaceAllIn(target:CharSequence,replacer:scala.util.matching.Regex.Match=%3EString):String) and is just the way Java does it.

In my browser, I have to click on the method to show the explanation: `$n is a group, so use quoteReplacement`. Or in this example, use `_ => "$1"`. The use case for the group method here would be to conditionally construct the replacement string.

This why we no longer construct APIs around strings. I think they're going to spin `scala.util` out into its own module, so maybe folks will devise a better `scala.util.matching`, working from accumulated knowledge.

Also, a linter could warn about unescaped `$1` in a replacement string.
