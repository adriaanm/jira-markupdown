Observe how in the code below f1 and f2 have the same type according to the REPL, since `(Int => Int) => Int` is printed as `Int => Int => Int`:
```scala
scala> val f1 = ((f: (Int => Int)) => f(1) + f(2))
f1: Int => Int => Int = <function1>

scala> f1(1+)
res10: Int = 5

scala> val f2 = ((f: Int) => (g: Int) => f + g)
f2: Int => Int => Int = <function1>

scala> f2(1)
res11: Int => Int = <function1>

scala> f2(1)(2)
res12: Int = 3

//Let's redeclare f1 with the type printed by the REPL:
scala> val f1typed: (Int => Int => Int) = ((f: (Int => Int)) => f(1) + f(2)) 
<console>:36: error: type mismatch;
 found   : Int
 required: Int => Int
       val f1typed: (Int => Int => Int) = ((f: (Int => Int)) => f(1) + f(2)) 
                                                                     ^
Int <: Int => Int?
  <notype> <: Int => Int?
  false
false

//Let's fix the type:
scala> val f1typed: ((Int => Int) => Int) = ((f: (Int => Int)) => f(1) + f(2)) 
f1typed: Int => Int => Int = <function1>

//No problem for f2:
scala> val f2typed: (Int => Int => Int) = ((f: Int) => (g: Int) => f + g)
f2typed: Int => Int => Int = <function1>
```
