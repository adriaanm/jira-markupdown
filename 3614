Here's something weird. (Preface: apparently the addition of implicit def SeqDerived to Ordering means that adriaan's recent repro is now a diverging implicit expansion.  Is that indicative of a bigger problem? Should we maybe pull that? So one has to get rid of that to see this.)

Why does ordered fail with the "enclosing class" error but Ordering completely differently?
```scala
object Weird {
  def compare[T](x: Ordered[T], y: Ordered[T]) = error("")
  def mkEx: Ordered[_] = error("")
  compare(mkEx, mkEx)
  
  def compare2[T](x: Ordering[T], y: Ordering[T]) = error("")
  def mkEx2: Ordering[_] = error("")
  compare2(mkEx2, mkEx2)
}
```
Failures:
```scala
weird.scala:4: error: math is not an enclosing class
  compare(mkEx, mkEx)
          ^
weird.scala:4: error: math is not an enclosing class
  compare(mkEx, mkEx)
                ^
weird.scala:8: error: type mismatch;
 found   : Ordering[_$$2] where type _$$2
 required: Ordering[Any]
Note: _$$2 <: Any, but trait Ordering is invariant in type T.
You may wish to investigate a wildcard type such as `_ <: Any`. (SLS 3.2.10)
  compare2(mkEx2, mkEx2)
           ^
weird.scala:8: error: type mismatch;
 found   : Ordering[_$$2] where type _$$2
 required: Ordering[Any]
Note: _$$2 <: Any, but trait Ordering is invariant in type T.
You may wish to investigate a wildcard type such as `_ <: Any`. (SLS 3.2.10)
  compare2(mkEx2, mkEx2)
                  ^
four errors found  
```
