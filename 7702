Two design alternatives:
# null-check and conditionally throwing NPE, takes 8 bytes in opcodes (snippet 1 below)
# factoring out that functionality into a newly added {{ScalaRunTime.nullCheck(arg)}}, takes 3 bytes.

I'm favoring the second alternative.

Just for the record, the snippets for each alternative:

{code:title=Addition_to_Inliners.scala|borderStyle=solid}
val NPEClass = definitions.NullPointerExceptionClass
val nwNPE    = NEW(REFERENCE(NPEClass))
val npeInit  = definitions.getMember(NPEClass, nme.CONSTRUCTOR).suchThat(_.paramss == List(Nil))
assert(npeInit != NoSymbol, "Couldn't find the no-args constructor of NullPointerException.")
val cmNPEInit = CALL_METHOD(npeInit, Static(true))
nwNPE.init    = cmNPEInit

val npeBlock = newBlock()
npeBlock.emit(nwNPE,                    instr.pos)
npeBlock.emit(DUP(REFERENCE(NPEClass)), instr.pos)
npeBlock.emit(cmNPEInit,                instr.pos)
npeBlock.emit(THROW(NPEClass),          instr.pos)
npeBlock.close()
{code}

{code:title=Addition_to_ScalaRunTime.scala|borderStyle=solid}
def nullCheck(x: AnyRef) {
  if (x == null) throw new NullPointerException
}
{code}

