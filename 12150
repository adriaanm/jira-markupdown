You are using the incorrect pattern syntax to test for an empty array.

Here's the correct syntax:
```scala
scala> def isEmpty(a: Array[Int]) = a match { case Array() => true; case _ => false }
isEmpty: (a: Array[Int])Boolean

scala> isEmpty(Array(1, 2, 3))
res0: Boolean = false

scala> isEmpty(Array(1))
res1: Boolean = false
```

It is a bug that the compiler doesn't give you a reasonable error message. It does give the expected "pattern must be a value" error on a simple case, but if the incorrect pattern is nested as an argument of another pattern, the error is not issued.
```scala
scala> def test(a: Any) = a match { case Array[Nothing] => }
<console>:7: error: pattern must be a value: Array[Nothing]
Note: if you intended to match against the class, try `case _: Array[_]`
       def test(a: Any) = a match { case Array[Nothing] => }
                                              ^

scala> def test(a: Any) = a match { case Some(Array[Nothing]) => }
<console>:7: error: unsupported pattern: TypeTree / p3: Array[Nothing] @ Array[Nothing] (this is a scalac bug.)
       def test(a: Any) = a match { case Some(Array[Nothing]) => }
                                                   ^
```
