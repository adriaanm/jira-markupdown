From Scala, if you try to compile code that has an instance of a Kotlin sealed class, and pass it into a constructor or static method also written in Kotlin, you get a type mismatch error. When the java equivalent of a sealed class is used in a similar manner, the error does not happen. This is likely due to differences in the bytecode generated by Kotlin vs Java.

See this bug reproduced in this github project: https://github.com/mjburghoffer/scala-kotlin-innerclass-bug/tree/master

After running {{mvn clean compile}} the compiler will report an error like:

{code}
[INFO] Compiling 1 source files to /Users/mburghoffer/projects/scala-kotlin-innerclass-bug/scala-kotlin-innerclass-bug-scala/target/classes at 1474994823442
[ERROR] /Users/mburghoffer/projects/scala-kotlin-innerclass-bug/scala-kotlin-innerclass-bug-scala/src/main/scala/mjburghoffer/ConsumerScala.scala:12: error: type mismatch;
[ERROR]  found   : mjburghoffer.ParentSealedKotlin.ChildSealedKotlin
[ERROR]  required: mjburghoffer.mjburghoffer.
[ERROR]     new ConsumerKotlin(childSealedKotlin)
[ERROR]                        ^
[ERROR] one error found
{code}
