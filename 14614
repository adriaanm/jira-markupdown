{code}
class Test {
    import scala.collection.mutable._

    new ArrayBuffer[Int] with SynchronizedBuffer[Int]
}
/*
error: overriding method + in trait Addable
 of type (elem: Int)scala.collection.mutable.ArrayBuffer[Int];
 method + in trait SynchronizedBuffer
 of type (elem: Int)scala.collection.mutable.Buffer[Int] has incompatible type;
 other members with override errors are: +=:, ++=:, clone
    new ArrayBuffer[Int] with SynchronizedBuffer[Int]
        ^
*/
{code}

Based on examples such as scala.collection.generic.Addable,
synchronizedBuffer perhaps needs an extra type parameter

{code}
ArrayBuffer[A]
def +(elem: A): ArrayBuffer[A]
def +=:(elem: A): this.type
override def ++=:(iter: Traversable[A]): this.type
override def clone(): ArrayBuffer[A]

SynchronizedBuffer[A] // should perhaps be [A, +This <: Buffer[A]]
def +(elem: A): Buffer[A] // should perhaps return This
def +=:(elem: A): Buffer[A] // should perhaps return this.type
def ++=:(iter: Traversable[A]): Buffer[A] // should perhaps return this.type
clone(): Buffer[A] // should perhaps return This
{code}
Note I haven't tested this suggestion.
