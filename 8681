The unpredicable nature of this bug is annoying. For me, it failed from the command line and in IntelliJ, then suddenly started building fine for a number of times, then after a clean started failing again...

Here's my output:
```scala
  last tree to typer: Literal(Constant(com.aa.bb.cc.xjc.XJCRuntimeCompiler))
              symbol: null
   symbol definition: null
                 tpe: Class(classOf[com.aa.bb.cc.xjc.XJCRuntimeCompiler])
       symbol owners:
      context owners: class XJCRuntimeCompiler$LoggerErrorReceiverImpl -> package xjc

== Enclosing template or block ==

Template( // val <local LoggerErrorReceiverImpl>: <notype> in class XJCRuntimeCompiler$LoggerErrorReceiverImpl, tree.tpe=com.aa.bb.cc.xjc.XJCRuntimeCompiler$LoggerErrorReceiverImpl
  "com.sun.tools.xjc.ErrorReceiver" // parents
  ValDef(
    private
    "_"
    <tpt>
    <empty>
  )
  // 5 statements
  DefDef( // def error(ex: org.xml.sax.SAXParseException): Unit in class XJCRuntimeCompiler$LoggerErrorReceiverImpl
    <method>
    "error"
    []
    // 1 parameter list
    ValDef( // ex: org.xml.sax.SAXParseException
      <param> <triedcooking>
      "ex"
      <tpt> // tree.tpe=org.xml.sax.SAXParseException
      <empty>
    )
    <tpt> // tree.tpe=Unit
    Apply( // def warn(x$1: String,x$2: Throwable): Unit in trait Logger, tree.tpe=Unit
      XJCRuntimeCompiler.this.logger()."warn" // def warn(x$1: String,x$2: Throwable): Unit in trait Logger, tree.tpe=(x$1: String, x$2: Throwable)Unit
      // 2 arguments
      "Compile error "
      "ex" // ex: org.xml.sax.SAXParseException, tree.tpe=org.xml.sax.SAXParseException
    )
  )
  DefDef( // def fatalError(ex: org.xml.sax.SAXParseException): Unit in class XJCRuntimeCompiler$LoggerErrorReceiverImpl
    <method>
    "fatalError"
    []
    // 1 parameter list
    ValDef( // ex: org.xml.sax.SAXParseException
      <param> <triedcooking>
      "ex"
      <tpt> // tree.tpe=org.xml.sax.SAXParseException
      <empty>
    )
    <tpt> // tree.tpe=Unit
    Apply( // def warn(x$1: String,x$2: Throwable): Unit in trait Logger, tree.tpe=Unit
      XJCRuntimeCompiler.this.logger()."warn" // def warn(x$1: String,x$2: Throwable): Unit in trait Logger, tree.tpe=(x$1: String, x$2: Throwable)Unit
      // 2 arguments
      "Compile fatal "
      "ex" // ex: org.xml.sax.SAXParseException, tree.tpe=org.xml.sax.SAXParseException
    )
  )
  DefDef( // def warning(ex: org.xml.sax.SAXParseException): Unit in class XJCRuntimeCompiler$LoggerErrorReceiverImpl
    <method>
    "warning"
    []
    // 1 parameter list
    ValDef( // ex: org.xml.sax.SAXParseException
      <param> <triedcooking>
      "ex"
      <tpt> // tree.tpe=org.xml.sax.SAXParseException
      <empty>
    )
    <tpt> // tree.tpe=Unit
    Apply( // def warn(x$1: String,x$2: Throwable): Unit in trait Logger, tree.tpe=Unit
      XJCRuntimeCompiler.this.logger()."warn" // def warn(x$1: String,x$2: Throwable): Unit in trait Logger, tree.tpe=(x$1: String, x$2: Throwable)Unit
      // 2 arguments
      "Compile warning "
      "ex" // ex: org.xml.sax.SAXParseException, tree.tpe=org.xml.sax.SAXParseException
    )
  )
  DefDef( // def info(ex: org.xml.sax.SAXParseException): Unit in class XJCRuntimeCompiler$LoggerErrorReceiverImpl
    <method>
    "info"
    []
    // 1 parameter list
    ValDef( // ex: org.xml.sax.SAXParseException
      <param> <triedcooking>
      "ex"
      <tpt> // tree.tpe=org.xml.sax.SAXParseException
      <empty>
    )
    <tpt> // tree.tpe=Unit
    Apply( // def warn(x$1: String,x$2: Throwable): Unit in trait Logger, tree.tpe=Unit
      XJCRuntimeCompiler.this.logger()."warn" // def warn(x$1: String,x$2: Throwable): Unit in trait Logger, tree.tpe=(x$1: String, x$2: Throwable)Unit
      // 2 arguments
      "Compile info "
      "ex" // ex: org.xml.sax.SAXParseException, tree.tpe=org.xml.sax.SAXParseException
    )
  )
  DefDef( // def <init>(): com.aa.bb.cc.xjc.XJCRuntimeCompiler$LoggerErrorReceiverImpl in class XJCRuntimeCompiler$LoggerErrorReceiverImpl
    <method> <triedcooking>
    "<init>"
    []
    List(Nil)
    <tpt> // tree.tpe=com.aa.bb.cc.xjc.XJCRuntimeCompiler$LoggerErrorReceiverImpl
    Block( // tree.tpe=Unit
      Apply( // def <init>(): com.sun.tools.xjc.ErrorReceiver in class ErrorReceiver, tree.tpe=com.sun.tools.xjc.ErrorReceiver
        XJCRuntimeCompiler$LoggerErrorReceiverImpl.super."<init>" // def <init>(): com.sun.tools.xjc.ErrorReceiver in class ErrorReceiver, tree.tpe=()
com.sun.tools.xjc.ErrorReceiver
        Nil
      )
      ()
    )
  )
)

== Expanded type of tree ==

ConstantType(
  value = Constant(com.aa.bb.cc.xjc.XJCRuntimeCompiler)
)

how can getCommonSuperclass() do its job if different class symbols get the same bytecode-level internal name: scala/Enumeration$Value); see the error output for details.
```
