In trunk an ambiguity is still detected, although with a different message. The call may indeed be seen as ambiguous, so the message is not incorrect per se; however 2.7.0 had the same behaviour as Java instead: the method in BaseClass is used.
Either way, the intended interpretation should probably be specced: the section on overloading resolution (6.25.3) says nothing specific on the matter.

In trunk, r18911:
{code}
$$ scalac Client.scala
Client.scala:3: error: ambiguous reference to overloaded definition,
both method localize in class IntermediateClass of type (x$$1: java.lang.String,x$$2: <repeated...>[java.lang.String])java.lang.String
and  method localize in class BaseClass of type (x$$1: java.lang.String)java.lang.String
match argument types (java.lang.String) and expected result type Any
    println(localize("hello world!"));
            ^
one error found
{code}
