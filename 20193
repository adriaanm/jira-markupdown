```scala
trait Foo[A,B]
implicit def id[A]: Foo[A,A] = new Foo[A,A]{}
def foo[A,B](a: A)(implicit ev: Foo[A,B]) = a
foo(1) // Works
foo[Int,Int](1)(implicitly) // Works
foo(1)(implicitly)
// [error] /Users/mpilquist/Development/scratch/lubs/src/main/scala/scratch/lubs.scala:69: ambiguous implicit values:
// [error]  both value StringCanBuildFrom in object Predef of type => scala.collection.generic.CanBuildFrom[String,Char,String]
// [error]  and method $conforms in object Predef of type [A]=> <:<[A,A]
// [error]  match expected type T
// [error] foo(1)(implicitly)
// [error]        ^
```

`B` is unconstrained when implicit search runs. It seems the call to `implicitly` is type checked independently of the type information known at the call site as a result of `B` being unconstrained.
