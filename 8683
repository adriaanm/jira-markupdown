fsc -Xprint:all -Xprint-types Test.scala 

On either path we get to this point
```scala
[[syntax trees at end of              constructors]] // Test.scala
package <empty>{type} {
  class test extends Object {
    def foo(): Unit = {
      val x: Broke.Breakage = CHIP{Broke.Breakage(CHIP)};
      (){Unit}
    }{Unit};
  }
}
```

Then, when it works we get
```scala
[[syntax trees at end of                   flatten]] // Test.scala
package <empty>{type} {
  class test extends Object {
    def foo(): Unit = {
      val x: Broke$Breakage = CHIP{Broke$Breakage(CHIP)};
      (){Unit}
    }{Unit};
  }
}
```

However, when it doesn't work we get
```scala
[[syntax trees at end of                   flatten]] // Test.scala
package <empty>{type} {
  class test extends Object {
    def foo(): Unit = {
      val x: Broke$Breakage = CHIP{<notype>(CHIP)};
      (){Unit}
    }{Unit};
  }
}
```
