{code}
import language.experimental.macros
import scala.reflect.macros.Context
import java.util.Date
import java.text.SimpleDateFormat

trait Logger {
  protected case class Context(level: String, time: String, msg: String)
  protected def format(ctx: Context): String

  def log(level: String, msg: String): Unit = {
    val date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
    val ctx = Context(level, date, msg)
    println(format(ctx))
  }

  def info(msg: String) = log("INFO", msg)
  def error(msg: String) = log("ERROR", msg)
}

object Logger {
  def apply(config: _): Logger = macro Logger.impl
  def impl(c: Context)(config: c.Tree) = {
    import c.universe._
    q"""new Logger {
      protected def format(ctx: Context): String = {
        import ctx._
        $config
      }
    }"""
  }
}
{code}

Fails with following error:
{code}
testlogmacro.scala:22: error: macro implementation has wrong shape:
 required: (c: scala.reflect.macros.Context)(config: c.universe.Tree): c.Expr[Logger]
 found   : (c: scala.reflect.macros.Context)(config: c.Tree): c.universe.Block
type mismatch for return type: c.universe.Block does not conform to c.Expr[Logger]
  def apply(config: _): Logger = macro Logger.impl
{code}

But if you cast result of quasiquote to tree -- it works.
