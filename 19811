ParHashMap non-deterministlically throws an exception, but HashMap doesn't.

{noformat}
scala> import scala.collection.parallel.mutable.ParHashSet
scala> val xs = ParHashSet[Int](1,2,3,4,5,6,7,8)
scala> while (true) xs.foreach {i => for (x <- 1 to 100) xs += i+x}
java.lang.ArrayIndexOutOfBoundsException: 3 at
java.lang.ArrayIndexOutOfBoundsException: 3 
  at scala.collection.mutable.FlatHashTable$class.nnSizeMapAdd(FlatHashTable.scala:256) 
  at scala.collection.parallel.mutable.ParHashSet.nnSizeMapAdd(ParHashSet.scala:37) 
  at scala.collection.mutable.FlatHashTable$class.addEntry(FlatHashTable.scala:158) 
  at scala.collection.parallel.mutable.ParHashSet.addEntry(ParHashSet.scala:37) 
  at scala.collection.mutable.FlatHashTable$class.addElem(FlatHashTable.scala:139) 
  at scala.collection.parallel.mutable.ParHashSet.addElem(ParHashSet.scala:37) 
  at scala.collection.parallel.mutable.ParHashSet.$plus$eq(ParHashSet.scala:64) 
  at $anonfun$1$$anonfun$apply$mcVI$sp$1.apply(<console>:13) 
  at $anonfun$1$$anonfun$apply$mcVI$sp$1.apply(<console>:13) 
  at scala.collection.immutable.Range.foreach(Range.scala:166) 
  at $anonfun$1.apply$mcVI$sp(<console>:13) 
  at $anonfun$1.apply(<console>:13) 
  at $anonfun$1.apply(<console>:13) 
  at scala.collection.Iterator$class.foreach(Iterator.scala:742) 
  at scala.collection.parallel.mutable.ParFlatHashTable$ParFlatHashTableIterator.foreach(ParFlatHashTable.scala:27) 
  at scala.collection.parallel.ParIterableLike$Foreach.leaf(ParIterableLike.scala:972) 
  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49) 
  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48) 
  at scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48) 
  at scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51) 
  at scala.collection.parallel.ParIterableLike$Foreach.tryLeaf(ParIterableLike.scala:969) 
  at scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152) 
  at scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443) 
  at scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160) 
  at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) 
  at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) 
  at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) 
  at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)
{noformat}

The "while (true)" is to try repeatedly until it fails, as the failure is non-deterministic.
