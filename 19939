I'm trying to define a case class to represent a json object with a lot of fields (which I don't control).

case classes (and methods in general) can have up to 254 parameters, but Functions/Tuples can't, so these high-arity methods have no first-class counterpart.
```scala
scala> case class Foo(a: Int, b: Int, c: Int, d: Int, e: Int, f: Int, g: Int, h: Int, i: Int, j: Int, k: Int, l: Int, m: Int, n: Int, o: Int, p: Int, q: Int, r: Int, s: Int, t: Int, u: Int, v: Int, w: Int, x: Int, y: Int, z: Int, aa: Int, ab: Int, ac: Int, ad: Int, ae: Int, af: Int)
defined class Foo

scala> Foo.apply _
<console>:13: error: implementation restricts functions to 22 parameters
       Foo.apply _
           ^
```

codec derivations rely on `apply`/`unapply` so this is kind of a show-stopper.
