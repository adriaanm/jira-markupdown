There are a couple of classical testability problems: 1) directly instantiating dependencies with new operator 2) calling a static method. Problem with those is that you cannot mock the called dependency by override
Well-known solutions for those are wrapper methods. Wrap the call to new and Static.call into one liner method. The wrapper method is then overridable, and calls a mock instead. In case of new operator, the override will instantiate a mock. In case of static, calls some other (mock) functionality (in case of Scala this would be another companion class, too)
However, you would have to pollute your code with those wrapper methods

Proposal:
1) compiler automatically emits the wrapper methods and always uses them in the generated code in place of any direct new or static/companion call  
2) you can override the wrapper methods although they are invisible:
if original code had expression "new MyClass", the wrapper method name is new$MyClass, and you can normally override it
emitted:
{code}def new$MyClass = new MyClass{code}
in user derived class:
{code}override def new$MyClass = new MyClassMock{code} 
Similarly, if original code had expression "MyClass.call()", the wrapper method name is static$MyClass$Call:
emitted:
{code}def static$MyClass$Call() = MyClass.call(){code}
in user derived class:
{code}def static$MyClass$Call() = MyMock.call(){code}

There may be a more expressive syntax for overriding those. e.g. 
{code}override *call* Myclass.invoke(arguments) 
{code}
in place of 
{code}override def static$MyClass$Invoke() = ...
{code}
and similarly
{code}override new MyClass() = ...
{code}
Scala has popularized the Singleton.call() pattern, but in reality you would sometimes want to replace Singleton, and not only for testing purposes. The companion object may not be a real static, but it suffers the same limitation - it is hardwired into the caller's code. Would be nice to be able to override that when needed
