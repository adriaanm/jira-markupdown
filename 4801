I think I see what's going on.  Look at the distance between the allocation of the IntRef and the call to its constructor.
```scala
   0:    new    SI-31; //class scala/runtime/IntRef
   3:    dup
   4:    iconst_0
   5:    istore_3
   6:    getstatic    SI-36; //Field scala/Predef$$.MODULE$$:Lscala/Predef$$;
   9:    aload_1
   10:    iconst_0
   11:    aaload
   12:    invokevirtual    SI-40; //Method scala/Predef$$.augmentString:(Ljava/lang/String;)Lscala/collection/immutable/StringOps;
   15:    invokeinterface    SI-46,  1; //InterfaceMethod scala/collection/immutable/StringLike.toInt:()I
   20:    istore_3
   21:    goto    27
   24:    pop
   25:    iconst_1
   26:    istore_3
   27:    iload_3
   28:    invokespecial    SI-49; //Method scala/runtime/IntRef."<init>":(I)V
```
The vm spec says:

"A valid instruction sequence must not have an uninitialized object [...] in a local variable in code protected by an exception handler or a finally clause."
```scala
  Exception table:
   from   to  target type
     6    24    24   any
```
I think the invokespecial instruction at 28 is supposed to be executed before the try block begins, and this process is derailed by the by-name parameter also trying to get involved in lifting n.
