After a gazing a bit more through the pattern matcher, it occurs to me that the whole tree is wrong. It may not be that hard to fix though. Here's what I found. The (more complete) tree is:

{code}
var temp3: Seq = temp2.get().$$asInstanceOf[Seq]();
if (if (temp3.==(null))
  false
    else
      scala.Int.box(temp3.lengthCompare(1)).==(scala.Int.box(0)))
  {
    if (temp3.apply(0).==(""))
      {
        ()
      }
    else
      {
        body%1(x){
          scala.this.Predef.println(x)
        }
      }
  }
{code}

There are several things that look fishy with this code:
  * comparison on boxed integers in length check: `scala.Int.box(temp3.lengthCompare(1)).==(scala.Int.box(0)))`. This is most likely due to the code in lengthCheckOp, which resolves `==` to the AnyRef overload (I think).
  * the place where the label is defined should instead have a `throw MatchError`. Right now it flows into the label, and crashes because the parameter is not initialized, but even if it was, it wouldn't be correct: the seq has one element, so it can't println the second one.

