Iulian, if I understood you correctly, you meant something like this:

{code}
Index: src/library/scala/RandomAccessSeq.scala
===================================================================
--- src/library/scala/RandomAccessSeq.scala	(revision 15181)
+++ src/library/scala/RandomAccessSeq.scala	(working copy)
@@ -13,6 +13,13 @@
 import collection.mutable.ArrayBuffer
 
 object RandomAccessSeq {
+  
+  def apply[A](xs: A*): RandomAccessSeq[A] = {
+    val buffer = new ArrayBuffer[A]
+    xs copyToBuffer buffer
+    buffer.readOnly
+  }
+  
   trait Projection[+A] extends Seq.Projection[A] with RandomAccessSeq[A] {
     override def projection = this
     override def force : RandomAccessSeq[A] = toArray
Index: src/library/scala/Seq.scala
===================================================================
--- src/library/scala/Seq.scala	(revision 15181)
+++ src/library/scala/Seq.scala	(working copy)
@@ -30,6 +30,8 @@
    */
   def unapplySeq[A](x: Seq[A]): Some[Seq[A]] = Some(x)
   
+  def apply[A](xs: A*): Seq[A] = RandomAccessSeq(xs: _*)
+  
   case class singleton[A](value: A) extends RandomAccessSeq[A] {
     override def length = 1
     override def isDefinedAt(idx: Int): Boolean = idx == 0
{code}

If so I'll document it, write tests and submit to the Review Board.
