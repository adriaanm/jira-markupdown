The problem here is that, to maintain left-to-right evaluation semantics, the parser will pre-calculate the argument of `m2_:` (`foo`). In other words, a call like `foo() m2_: c` will be parsed as:
{code}
{
  <synthetic> val x$$1 = foo;
  c.m2_$$colon(x$$1)
};
{code}

Obviously, this compilation scheme forces the evaluation of `foo`, before it is used in the body of `m2_:` (and if at all).

Fixing this isn't trivial: During parsing, when the expansion described above is triggered, there is no symbol information. Therefore, the type of the argument of `m2_:` is unknown. This makes it impossible to use a special parsing scheme for by-name parameters (i.e. do not pre-calculate the value). The colon-inverting logic would have to happen later, at least after the namer has run, which is rather unpleasant to do.
