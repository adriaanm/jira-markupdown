Consider this code:
```scala
object Broken {
  case class Foo(x: Int)
  private val unused = Foo(1).copy(x = 2)
  val x = (f: Foo, i: Int) => f.copy(x = i)
}
```

This code works, but if `unused` is removed or made `private[this]`, compilation fails:
```scala
object Broken {
  case class Foo(x: Int)
  //private val unused = Foo(1).copy(x = 2)
  val x = (f: Foo, i: Int) => f.copy(x = i)
}
<console>:10: error: not found: value i
val x = (f: Foo, i: Int) => f.copy(x = i)
^
```
```scala
object Broken {
  case class Foo(x: Int)
  private[this] val unused = Foo(1).copy(x = 2)
  val x = (f: Foo, i: Int) => f.copy(x = i)
}
<console>:10: error: not found: value i
val x = (f: Foo, i: Int) => f.copy(x = i)
^
```

It also starts working without the named argument:
```scala
object Broken {
  case class Foo(x: Int)
  val x = (f: Foo, i: Int) => f.copy(i)
}
```

Additionally, other methods with named arguments also work:
```scala
object Broken {
  case class Foo(x: Int) { def bar(y: Int) = null }
  val x = (f: Foo, i: Int) => f.bar(y = i)
}
```
