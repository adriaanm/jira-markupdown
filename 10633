If you're looking for 2.10 code which doesn't compile, another many-time offender is:
{code}
 -  implicit def Byte(implicit S: Random): Arbitrary[Byte] = new RandomByte
 +  implicit def Byte(implicit S: Random): Arbitrary[Byte] = new RandomByte()(S)

 -  def PositiveByte(implicit S: Random): Arbitrary[Byte] = new RandomPositiveByte
 +  def PositiveByte(implicit S: Random): Arbitrary[Byte] = new RandomPositiveByte()(S)

 -  def ByteBelow(upper: Byte)(implicit S: Random): Arbitrary[Byte] = new RandomByteBelow(upper)
 +  def ByteBelow(upper: Byte)(implicit S: Random): Arbitrary[Byte] = new RandomByteBelow(upper)(S)

 -  def ByteBetween(lower: Byte, upper: Byte)(implicit S: Random): Arbitrary[Byte] = new RandomByteBetween(lower, upper)
 +  def ByteBetween(lower: Byte, upper: Byte)(implicit S: Random): Arbitrary[Byte] = new RandomByteBetween(lower, upper)(S)
{code}
I already WTFed that on one of the mailing lists when I first discovered it.

Because otherwise,
{code}
[error] /s/basis/stat/src/main/scala/basis/stat/Arbitrary.scala:61: ambiguous implicit values:
[error]  both method Random in package stat of type => basis.stat.Random
[error]  and value S of type basis.stat.Random
[error]  match expected type basis.stat.Random
[error]   def PositiveByte(implicit S: Random): Arbitrary[Byte] = new RandomPositiveByte
[error]                                                           ^
[error] one error found
{code}
