Replying to [comment:2 jrudolph]: 
>  2. If it would work, it would be dangerous because general function classes could have some side-effects in their constructor.

I think the synthetic check takes care of that.  
{code}
  def isClosureClass(cls: Symbol): Boolean = {
    val res = cls.isFinal && cls.hasFlag(Flags.SYNTHETIC) && !cls.isModuleClass &&
        cls.tpe.parents.exists { t => 
          val TypeRef(_, sym, _) = t;
          definitions.FunctionClass exists sym.==
        }
    res
  }
{code}
There's another very similar but different version of the same function in CopyPropagation, which is probably a bad sign.
{code}
    final def isClosureClass(cls: Symbol): Boolean = 
        cls.isFinal &&
        cls.tpe.parents.exists { t => 
          val TypeRef(_, sym, _) = t;
          definitions.FunctionClass exists sym.==
        }
{code}
