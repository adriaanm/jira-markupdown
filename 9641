Using {{ArrayList}} rather than {{Vector}} (which is only generic in Java 7+).

{code}
import scala.tools.partest.ReplTest

object Test extends ReplTest {
  override def code = """
  val v: java.util.ArrayList[String] = new java.util.ArrayList[String](5)
  val v: java.util.ArrayList[String] = new java.util.ArrayList[String](5)
  """
}
{code}

On the compilation of the second line, the symbol for the constructor {{[E](Int)ArrayList[E]}} has a corrupt info.

{noformat}
// unwanted existential!
TypeHistory(typer:7,(x$1: Int)java.util.ArrayList[_],null)
// an overloaded constuctor
TypeHistory(posterasure:5,(x$1: java.util.Collection)java.util.ArrayList,TypeHistory(namer:7,(x$1: java.util.Collection[_ <: E])java.util.ArrayList[E],null))
{noformat}

Overload resolution discounts the Int-accepting constructor, and ends up reporting "found: Int, required: Collection".

Here's a symptomatic fix:

https://github.com/retronym/scala/compare/ticket/7482

I'm going to look a bit harder for the underlying problem, but if I can't find it, I think we should go with this fix for 2.11.0-M3. `modifyInfoConserve` might still make sense on performance grounds.

