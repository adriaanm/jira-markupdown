This might need to go under a new issue (existing issue?), but the compiler blows up using a combination of specialization & tailrec on 2.10.x:

{code}
trait Iter[@specialized(Int) A] {
  def hasNext: Boolean
  def next(): A
  def foldLeft[@specialized(Int) Y](init: Y)(f: (Y, A) => Y): Y = {
    @tailrec
    def fold(init: Y): Y =
      if (!hasNext)
        init
      else
        fold(f(init, next()))
    fold(init)
  }

//  // Works:
//  def foldLeft[@specialized(Int) Y](init: Y)(f: (Y, A) => Y): Y = {
//    var acc = init
//    while(hasNext) {
//      val a = next()
//      acc = f(acc, a)
//    }
//    acc
//  }
}

{code}
