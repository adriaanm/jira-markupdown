The code in the attached file (adapted from Subramaniam, Programming Scala: Tackle Multi-Core Complexity on the Java Virtual Machine Book - Original Example: [TopStock.scala|http://media.pragprog.com/titles/vsscala/code/Introduction/TopStock.scala]) immediately throws:
```scala
java.lang.RuntimeException: unhandled timeout
	at scala.sys.package$.error(package.scala:27)
	at scala.actors.Actor$class.receiveWithin(Actor.scala:594)
	at scala.actors.ActorProxy.receiveWithin(ActorProxy.scala:20)
	at scala.actors.Actor$.receiveWithin(Actor.scala:208)
	at com.sevenrtc.TopStock$$anonfun$getTopStock$1.apply(TopStock.scala:40)
	at com.sevenrtc.TopStock$$anonfun$getTopStock$1.apply(TopStock.scala:39)
	at scala.collection.TraversableOnce$$anonfun$foldLeft$1.apply(TraversableOnce.scala:143)
	at scala.collection.TraversableOnce$$anonfun$foldLeft$1.apply(TraversableOnce.scala:143)
	at scala.collection.immutable.Range.foreach(Range.scala:75)
	at scala.collection.TraversableOnce$class.foldLeft(TraversableOnce.scala:143)
	at scala.collection.immutable.Range.foldLeft(Range.scala:43)
	at com.sevenrtc.TopStock$.getTopStock(TopStock.scala:38)
	at com.sevenrtc.TopStock$.main(TopStock.scala:20)
	at com.sevenrtc.TopStock.main(TopStock.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:78)
	at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:24)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:88)
	at scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:78)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:33)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:40)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:56)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:80)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:89)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
```

It didn't in version 2.8.0.
I can confirm that it happens both within REPL and running the compiled version.

Seems related to:

- [SI-2415](https://issues.scala-lang.org/browse/SI-2415)
- [SI-4686](https://issues.scala-lang.org/browse/SI-4686)
- [SI-4686](https://issues.scala-lang.org/browse/SI-4686)
- [SI-4759](https://issues.scala-lang.org/browse/SI-4759)

But this specific `receiveWithin` bug seems to have made it to 2.9.1.final.
