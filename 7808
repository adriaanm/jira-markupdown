Oh good, hopefully I'll have better luck.  Would anyone like to comment on the correctness of this just-written-and-untested piece of machinery?
{code}
  /** A foreach traverser which prunes anytime a new scope would be
   *  opened - that is, it doesn't recurse into Blocks, Templates,
   *  or catch/finally blocks.  (Am I missing anything?)
   *  You might use this if you wanted to traverse the statements of
   *  a DefDef body without running into trees which are not in scope
   *  for the whole body.
   */
  class ForeachTreeInScopeTraverser(f: Tree => Unit) extends Traverser {
    override def traverse(t: Tree) {
      f(t)
      t match {
        case Try(body, _, _)        => traverse(body)
        case _: Template | _: Block => // prune
        case _                      => super.traverse(t)
      }
    }
  }
{code}
