Revisiting this now, it seems fairly straightforward to encode the motivating example (ie. the dependent implicit),

{code}
scala> trait Dep { type T }                                                                                              
defined trait Dep                                                                                                        
                                                                                                                         
scala> implicit def m[T0](d : Dep { type T = T0 })(implicit t : T0) = t
m: [T0](d: Dep{type T = T0})(implicit t: T0)T0                                                                           
                                                                                                                         
scala> def n[T0](d : Dep { type T = T0 })(implicit f : Dep { type T = T0} => T0) = f(d)                                  
n: [T0](d: Dep{type T = T0})(implicit f: Dep{type T = T0} => T0)T0                                                       
                                                                                                                         
scala> val dep = new Dep { type T = String }                                                                             
dep: Dep{type T = String} = $anon$1@4b6393b3                                                                             
                                                                                                                         
scala> implicit val s : String = "foo"                                                                                   
s: String = foo                                                                                                          
                                                                                                                         
scala> val r = n(dep)                                                                                                    
r: String = foo
{code}

This is simply trading the dependent type {{d.T}} for a refinement {{Dep}} { {{type T = T0}} } and a use of the constraining type {{T0}}.
