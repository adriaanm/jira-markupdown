Moving from 2.11.2 => 2.11.3, I found a weird behavior relating to Java RetentionPolicy.RUNTIME annotations. Depending on some unknown compile time factors, some runtime annotations are either included or not included in resulting classfiles.

Example (also available on [GitHub|https://github.com/Brizth/scala-annotation-issue]):
{code:title=SomeAnnotation.java}

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface SomeAnnotation {
}
{code}

{code:title=SomeClass.scala}
@SomeAnnotation
class SomeClass {

}

object SomeClass {

  def main(args: Array[String]): Unit = {
    if (classOf[SomeClass].isAnnotationPresent(classOf[SomeAnnotation])) {
      println("Annotation is present")
    }
    else {
      println("Annotation is NOT present")
    }
  }
}
{code}

Running above directly with _sbt clean run_ will result in "Annotation is NOT present". Removing SomeClass.class file from target directory and running _sbt run_ prints "Annotation is present".

Probably caused by changes due to SI-4788 / SI-5948.

Tested on OSX/Java8 and Linux/Java7


