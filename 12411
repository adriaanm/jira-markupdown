The second section of bullets says you can select r.x only if "r's type conforms to a type-instance of the class which contains the access." So the member should be of type B. Otherwise, you could access members of other implementations of A with arbitrary behaviors for the template method.

By contrast,
{code}
object X {
  trait A { protected[X] def callMe(): Unit }
  trait B extends A { protected def a: A ; final override protected[X] def callMe(): Unit = a.callMe() }
}
{code}
