Tested against:
Scala Eclipse plug-in nightly of 2010-03-03
Version: 2.8.0.r21030-b20100302035619


This is a redefinition of ticket scala/bug#3138.
```scala
/*
 * Bug: Super-contract broken when overriding empty-paren method with field. 
 *
 * Tested against:
 * Scala Eclipse plug-in nightly of 2010-03-03
 * Version: 2.8.0.r21030-b20100302035619
 * 
 * This is a (rather innocent) flaw in type-safety.
 *
 */

// an abstract class with an empty-paren method
abstract class C { 
	def a(): Unit
}

// an implementation class for C
class D extends C {
	val a = ()	// implement an empty-paren method with a val.
}

// some 'client' code
object BugValOverridesEmptyParen2 extends Application {
	
	val d = new D
	
	require (d.isInstanceOf[C]) // passes, as expected 
	
	d.a()		//  -> compile error ("c does not take parameters"), 
				//     The contract of supertype C of d is obviously broken!!

	// This breaks the substitutability principle (and therefore type-safety.)
	// It also breaks the "uniform access principle, which says that 
	// client code should not be affected by a decision
	// to implement an attribute as a field or method." (1) ;-)

	// I've noticed this in Scala 2.7.7 as well.
	
	// BTW: If we upcast d to C, we *can* access the overridden method 
	// (So that can function as a work-around).
	(d: C).a()	// no error!

/*
 * My proposal is to extend the language to allow the empty-parens syntax for a member 
 * for which its type lineairization defines its name with empty-parens.
 * So d.a() would compile in te example above. 
 * This seems a clean, simple and correct solution to such cases.	
*/	
	
/* Related literature:
 * 
 * (1) Programming in Scala v6, Odersky et al. page 212
 * 
 * ()  The Scala Language Specification, page 54, par. 5.1.4 ?
 * (However, I couldn't find the case of fields overriding methods there..:-/)  
 */
}
```

