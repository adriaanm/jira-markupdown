```scala
import scala.language.experimental.macros
import scala.reflect.macros.TypecheckException
import scala.reflect.macros.whitebox.Context

object Macros {
  def typecheck_impl(c: Context)(code: c.Expr[String]): c.Expr[Option[String]] = {
    import c.universe._

    val Expr(Literal(Constant(codeStr: String))) = code

    try {
      c.typecheck(c.parse(codeStr))
      c.Expr(q"None: Option[String]")
    } catch {
      case e: TypecheckException =>
        c.Expr(q"Some(${ e.toString }): Option[String]")
    }
  }

  def typecheck(code: String): Option[String] = macro typecheck_impl
}
```
```scala
case class Foo(i: Int, c: Char)

object Bar {
  def unapply(foo: Foo): Option[(Int, Char)] = Some((foo.i, foo.c))
}

object Test {
  println(Macros.typecheck("val Foo(x, y, z) = Foo(1, 'a')"))
  println(Macros.typecheck("val Bar(x, y, z) = Foo(1, 'a')"))
}
```
```scala
<macro>:1: error: too many patterns for object Bar offering (Int, Char): expected 2, found 3
val Bar(x, y, z) = Foo(1, 'a')
    ^
one error found
```
