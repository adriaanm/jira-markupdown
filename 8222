Another case study by hejfelix (https://github.com/scala/scala/issues/1723):

I am using scala in the eclipse plugin version 2.1.0.m2 and I am getting problems when using the reflection API in a concurrent setting.

I have a big framework using MPJ-Express as the backend and running applications in multi-core mode. When I use the reflection api, I get random occurences of the runtime eror displayed below:

{code}
java.lang.reflect.InvocationTargetException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:601)
at runtime.starter.MulticoreStarter$1.run(MulticoreStarter.java:289)
at java.lang.Thread.run(Thread.java:722)
Caused by: scala.reflect.runtime.ReflectError: value Predef is not a package
at scala.reflect.runtime.JavaMirrors$JavaMirror.scala$reflect$runtime$JavaMirrors$$makeScalaPackage(JavaMirrors.scala:893)
at scala.reflect.runtime.JavaMirrors$class.missingHook(JavaMirrors.scala:1256)
at scala.reflect.runtime.JavaUniverse.missingHook(JavaUniverse.scala:12)
at scala.reflect.internal.Mirrors$RootsBase.universeMissingHook(Mirrors.scala:77)
at scala.reflect.internal.Mirrors$RootsBase.missingHook(Mirrors.scala:79)
at scala.reflect.internal.Mirrors$RootsBase.getModuleOrClass(Mirrors.scala:48)
at scala.reflect.internal.Mirrors$RootsBase.getModuleOrClass(Mirrors.scala:61)
at scala.reflect.internal.Mirrors$RootsBase.staticModuleOrClass(Mirrors.scala:72)
at scala.reflect.internal.Mirrors$RootsBase.staticModule(Mirrors.scala:161)
at scala.reflect.internal.Mirrors$RootsBase.staticModule(Mirrors.scala:21)
at it.vigtig.thesis.test.NGridTest$$typecreator2$1.apply(NGridTest.scala:103)
at scala.reflect.api.TypeTags$TypeTag$.apply(TypeTags.scala:302)
at it.vigtig.thesis.test.NGridTest$.testGrid(NGridTest.scala:103)
at it.vigtig.thesis.test.NGridTest$$anonfun$main$1.apply$mcV$sp(NGridTest.scala:16)
at it.vigtig.thesis.env.package$$anonfun$parallelize$1.apply$mcV$sp(package.scala:68)
at it.vigtig.thesis.env.comm.mpj.MPJDistributorTrait$class.execute(MPJDistributorTrait.scala:17)
at it.vigtig.thesis.env.comm.mpj.MPJDistributor$.execute(MPJDistributor.scala:3)
at it.vigtig.thesis.env.package$.parallelize(package.scala:59)
at it.vigtig.thesis.test.NGridTest$.main(NGridTest.scala:14)
at it.vigtig.thesis.test.NGridTest.main(NGridTest.scala)
... 6 more
{code}

I am not sharing any reflection knowledge or objects between threads, so this behaviour must be a bug. The parts I am using from reflection are TypeTags and ClassTags as implicit arguments.
