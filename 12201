I've received some more background / tips on NIO that I can share here:

{quote}
The advantages that NIO and NIO.2 has over File APIS -

  - NIO provides platform specific APIS ( this is probably not useful for you)
  - NIO Paths are a bit like files, but maintain platform specific information, so down require lots of stat calls to get files attributes
  - File scanners for example (https://docs.oracle.com/javase/tutorial/essential/io/walk.html) in the windows implementation load all of the OS information as one stat call per directory (actually in a weak reference last time I looked), so you down need one per attribute per file as you do with File API ( file name, size, isDirectory â€¦)
  - NIO is also faster on IO as you have ByteBuffer access, and can avoid the double buffering required to transfer to native buffers
  - The APIs are a lot cleaner and generally a view to performance has been taken
  - NIO is inherently parallelisable (not sure if this is useful given the single threaded compiler though), but perhaps we can async complete the IO
  - NIO supports WatchService. This is probably not inherently useful for an app that dies, but in the future we perhaps a resident compiler service could use this to limit input scanning
  - File deletes are faster and provide proper exceptions. Not sure of the perf reasons, but parallelism and the cache of the attributes seems likely


A few links:

http://mail.openjdk.java.net/mailman/listinfo/nio-dev
http://mail.openjdk.java.net/mailman/listinfo/nio-discuss
http://www.oracle.com/technetwork/articles/javase/nio-139333.html
{quote}

I have witnessed poor performance of SBT and scalac on Windows file systems in the past which I believe was related to lots of lookups of file attributes of source and class files, so the ability to do this en-masse sounds enticing.

Our next step towards this is to standardize on `-Yclasspath:flat`, which is more memory efficient than the older, default `-Yclasspath:recursive`. This will reduce the surface area of the compiler that interacts with Zip files. We plan to flip the default to `flat` this week as part of 2.12.0-M4, then remove the old implementation by 2.12.0-M5.
