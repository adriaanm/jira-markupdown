Here is a revealing look at how various forms of the same type are viewed in a subclass. What do you think "T" means in B.
```scala
trait Thing { type A; var p: A = _ }
class A[T](final val x: Thing { type A = T }) {
  type Q = T

  def x1: T   = x.p
  def x2: Q   = x.p
  def x3: x.A = x.p
}
class B extends A[Int](null) {
  def y1 = x1
  def y2 = x2
  def y3 = x3

  // After typer:
  // def y1: Int = B.this.x1;
  // def y2: B.this.Q = B.this.x2;
  // def y3: B.this.x.A = B.this.x3;
  //
  // After uncurry:
  // def y1(): Int = B.this.x1();
  // def y2(): Int = B.this.x2();
  // def y3(): T = B.this.x3();
}
```
