Most of your data is wrong. Buffers are not necessarily indexed. One of the most frequently used buffers is "ListBuffer", which like it suggests is backed by a List. Next, both ArrayBuffer and WrappedArray extend IndexedSeq. But they don't extend **immutable**.IndexedSeq, because they are not immutable. The abstract signature of "toIndexedSeq" is "def toIndexedSeq: immutable.IndexedSeq[A]", making both ineligible.

It IS "a mutable/immutable thing", and toSeq is defined differently: it returns collection.Seq. See many historical threads on the inconsistency that scala.Map and scala.Set are immutable but scala.Seq is not.

"Mutable objects can be viewed as immutable objects."

What? If that were true there would be no point in drawing a distinction. They CAN be in the sense that you can implement the immutable interface around anything you want, but they can't be in the sense of enjoying correctness. That your immutable reference won't have different contents the next time you look is the entire point.
