{code}
scala> {val hm = scala.collection.mutable.HashMap[String, String](); def add() = 1 to 100000 foreach (i => hm(i.toString) =  ""); hm.getOrElseUpdate("0", {        "" }); hm.contains("0")}
res15: Boolean = true

scala> {val hm = scala.collection.mutable.HashMap[String, String](); def add() = 1 to 100000 foreach (i => hm(i.toString) =  ""); hm.getOrElseUpdate("0", { add(); "" }); hm.contains("0")}
res16: Boolean = false
{code}


These used to both be true in 2.12.0 and earlier. The change to optimize `HashMap#getOrElseUpdate` in 2.12.1 uses stale values in the `update` part.

Note that Java 9 has explicitly specced `Map#computeIfAbsent` to outlaw mutation of the map in the callback. 
