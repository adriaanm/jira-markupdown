Consider this code:
```scala
object LinePrinter {
  def main(args: Array[String]){
    // Note: \u000A is Unicode representation of linefeed (LF)
    val c: Char = 0x000A
    print(c)
  }
}
```
This code does not compile, giving the following error method:
```scala
LinePrinter.scala:3: error: not found: value is
  // Note: \u000A is Unicode representation of linefeed (LF)
                  ^
one error found
```

The problem is that the compiler transforms unicode escapes before removing the comments, leading to the following code given to the next compile phase:
```scala
object LinePrinter {
  def main(args: Array[String]){
    // Note:
 is Unicode representation of linefeed (LF)
    val c: Char = 0x000A
    print(c)
  }
}
```

This feature/bug is described in the Java book "Java Puzzlers" (see the sampler, it is Puzzle 2) as "thoroughly confusing". Corresponding Java spec is [JLS 3.4].

I would like to suggest removing lines of comments before converting escapes, because how it works now is highly surprising and unexpected.


