It would be very useful if we could we write a macro,

{code}
def publish[T](t : T) = macro publishImpl(t)

def publishImpl[T](c : Context)(t : c.Expr[T]) = ...
{code}

such that when called,

{code}
publish("foo")
{code}

it expanded at the call site to,

{code}
implicit val <freshname> = "foo"
{code}

The following implementation suggested by Eugene,

{code}
import scala.reflect.makro.Context

object Macros {
   def publish = macro publishImpl

   def publishImpl(c : Context) = c.reify{implicit val foo: String = "foo"}
}

import Macros._

object Test extends App {
  publish;
  println(implicitly[String])
}
{code}

doesn't work "because (as far as I can guess by interpreting the error) macro expansion happens too late to be included in scope".
