*case HasInts =>* uses value equality so you shouldn't expect that to work. It might be HasInts, or it could be anything which compares equal to HasInts. But *case _: HasInts.type =>* doesn't work either, and probably that one should.

Of course, just because you shouldn't expect it to work doesn't mean it doesn't.
{code}
sealed trait Outer[Inner]
case object HasInts extends Outer[Int] {
  override def equals(x: Any) = true
}

object Test {
  def id[I](outer: Outer[I]): I = outer match {
    case HasInts => 0
    case _       => ???
  }
  def main(args: Array[String]): Unit = {
    val os = new Outer[String] {}
    var x = ""
    x = id(os)
  }
}
// % scalac212 a.scala && scala212 Test
// java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String
//   at Test$.main(a.scala:14)
//   at Test.main(a.scala)
{code}
