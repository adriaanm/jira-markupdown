Hi everybody,

Having the following code
```scala
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global

val f1 = List(Future(1))
Future.sequence(f1)

val f2 = Option(Future(1))
Future.sequence(f2)
```

The first **Future.sequence** works whereas the second one doesn't.

According to the **Future.sequence** signature, it requires **M[ X ]** to be a subtype of **TraversableOnce[ X ]**.

Would it make sense to require an implicit conversion {code:scala}M[X] => TraversableOnce[X]{code} in order to make possible applying *Future.sequence* to an *Option*? 

What do you think? :-)


