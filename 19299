```scala
$ cat test.scala
class Worker {
  def receive[Id: scala.reflect.ClassTag] =
    (x: Any) => x match {
      case source: Id =>
        val src: Id = source
    }
}

$ scalac test.scala -Xprint:patmat
...
    def receive[Id](implicit evidence$1: ClassTag[Id]) = ((x: Any) => {
      case <synthetic> val x1: Any = x;
      case7(){
        <synthetic> val o9: Option[Id] = evidence$1.unapply(x1);
        if (o9.isEmpty.unary_!)
          if (o9.get.isInstanceOf[Id]) // (1) redundant
            matchEnd6({
              val src: Id = x1;        // (2) outright incorrect
                                       // Ident(x1).tpe = Id, although x1.tpe = Any
              ()
            })
...
```

Discussion: https://groups.google.com/forum/#!topic/scala-internals/OICw8rXLyiI
