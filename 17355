This could be a duplicate or variant of SI-5490, but I'm not sure. Given the code:

{code}
final class Bar[@specialized(Int) A] {
  private def invoker(f: A => A)(a: A): A = f(a)
  private val specfunc1 = (a: A) => a

  def good(f: A => A, a: A): A = invoker(f)(a)
  def bad(a: A): A = invoker(specfunc1)(a)
}

object Test2 {
  def main(args: Array[String]) {
    val bar = new Bar[Int]
    val specfunc2 = (a: Int) => a

    bar.good(specfunc2, 1)
    bar.bad(1)
  }
}
{code}

I attempted to follow the bytecode to see where it goes wrong, but it's not clear to me from the byte code how this transpires. Instead I'm attaching the runtime call tree that shows how Bar$mcI$sp.bad$mcI$sp invokes Bar$mcI$sp.invoker$mcI$sp, which in turn invokes the interface Function1.apply$mcII$sp, and this call is received by a parent class (AbstractFunction1) that unnecessarily boxes/unboxes; so somehow specfunc1 isn't correctly specialized. Ie:

{code}
  public int invoker$mcI$sp(scala.Function1<java.lang.Object, java.lang.Object>, int);
    Code:
       0: aload_1       
       1: iload_2       
       2: invokeinterface #25,  2           // InterfaceMethod scala/Function1.apply$mcII$sp:(I)I
       7: ireturn       
{code}

Function1$class.apply$mcII$sp bytecode (via jprofiler) shows

{code}
 0 aload_0
 1 iload_1
 2 invokestatic #93 <scala/runtime/BoxesRunTime.boxToInteger>
 5 invokeinterface #38 <scala/Function1.apply> count 2
10 invokestatic #62 <scala/runtime/BoxesRunTime.unboxToInt>
13 ireturn
{code}

Whereas, when Bar$mcI$sp.good$mcI$sp invokes Bar$mcl$sp.invoker$mcI$sp, the recipient of the invokeinterface is Test2$$anonfun$1.apply$mcII$sp; ie, the call does not pass up to AbstractFunction1. 

