I don't know if it's supposed to be supported behavior, but for flexibility reasons some people put implicits in traits and define an object with the same name which extends it.  This works fine until you put them in separate files for some reason:
```scala
trait Foo {
  def jump = Foo.x
}

object Foo extends Foo {
  val x = "x"
}
```

When compiled in the same file:
```scala
scala> Foo.x
res0: java.lang.String = x
```

In separate files:
```scala
scala> Foo.x
java.lang.IncompatibleClassChangeError: Implementing class
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:675)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
	at java.net.URLClassLoader.access$$100(URLClassLoader.java:56)
```

It's not intepreter specific though, as it was the IncompatibleClassChangeError I was receiving in my application that led me to discover the behavior.
