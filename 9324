A workaround is to structure the code as follows:

{code}
package scala.crash

class A {
  class A1 {
    case class A11(i: Int, j: Int) {
      lazy val a11: Option[C] = null
    }

    class A12(f: (Int, Int)=>A11) extends
      D(toF4(f))

    def toF4(f: (Int, Int)=>A11) = (i: Int, j: Int, id: Int, rep: Int) => {
      for (x <- Some(f(i, j)); s<-x.a11) yield new B.B1(x.i, x.j) {}
    }
  }
}

object B {
  class B1(val row: Int, val col: Int)
    extends C
  {
     val b1: C = null
  }
}

trait C {
}

class D[T](t: (Int, Int, Int, Int)=>Option[T]) {
}
{code}
