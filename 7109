Quote from "Programming in Scala" page 362:
{quote}
(flatMap) applies the function to each list element and returns the concatenation of all function results.
{quote}

So this is not my "personal" interpretation.

If you execute:
scala> m.map(_._2)
res10: scala.collection.immutable.Iterable[List[(Int, Int)]] = List(List((1,11), (1,111)), List((2,22), (2,222)))

You get a List of List, and concatenate them gives a List, not a Map.

"Operate on a collection, and get a new collection of the same type" seems to be a nice idea, but I don't think it automatically justifies the resultant semantic confusions. I think the problem here is that flatMapping a Map does not *always* return a Map. This happens only when the values of the map happens to be collections of 2-tuples - but 2-tuples are not exclusively used as Map elements. IMHO, this inconsistency can be problematic.
