You can compile–but can't expand–macros that specify an inherited member of a macro bundle.
```scala
import scala.language.experimental.macros
import scala.reflect.macros._

abstract class AbstractBundle(val c: blackbox.Context) {
  import c.Expr
  import c.universe._
  def foo: Expr[Int] = Expr[Int](q"5")
}

class ConcreteBundle(override val c: blackbox.Context) extends AbstractBundle(c) {
  import c.Expr
  val bar: Expr[Int] = foo
}

object InvokeBundle {
  def foo: Int = macro ConcreteBundle.foo // nope
  def bar: Int = macro ConcreteBundle.bar // yep
}
```
```scala
scala> InvokeBundle.bar
res0: Int = 5

scala> InvokeBundle.foo
<console>:8: error: macro implementation not found: foo
(the most common reason for that is that you cannot use macro implementations in the same compilation run that defines them)
              InvokeBundle.foo
                           ^
```
