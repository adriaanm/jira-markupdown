Bill Venners reports this funny test case:
```scala
class Super {

 def method(s: String)(f: String => Unit) {}
 def method(s: String)(f: (String, Int) => Unit) {}
}

class Sub extends Super {
 method("hi") {
   (s) => {}
 }
}
```
Yields this error:
```scala
both method method in class Super of type (String)((String, Int) => Unit)Unit
and  method method in class Super of type (String)((String) => Unit)Unit
match argument types (java.lang.String)
 method("hi") {
```
I tried fully specifying the types of the parameters and got the same error message.  So it's not anything to do with type inference.
```scala
sup.method(null)(null : String=> Unit)
```
It seems like either these methods should not be allowed, or the overloading resolution should provide some way to specify which one is desired.
