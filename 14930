This error is somewhat like SI-2864, but the code is different and the crash occurs in a different spot in the compiler.  However, like SI-2864 it has a workaround by wrapping the shift in a named function (shown below the stack trace).

{code}
$$ scala -version
Scala code runner version 2.8.0.r20331-b20100101020206 -- Copyright 2002-2010, LAMP/EPFL
{code}
{code}
$$ cat test.scala
object ShiftReset {
  import scala.continuations.ControlContext._

  def main(args : Array[String]) {
   println(reset {
     val x = shift(List(1,2,3).flatMap[Int, List[Int]])
     List(x + 2)
   })
  }
}
{code}
{code}
$$ scalac -classpath continuations/build/build.library -Xplugin:continuations/build/pack/selectivecps-plugin.jar test.scala
Exception in thread "main" java.lang.Error: symbol value eta$$0$$1$$1 does not exist in ShiftReset.main
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.scala$$tools$$nsc$$backend$$icode$$GenICode$$ICodePhase$$$$genLoad(GenICode.scala:823)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.genLoadArguments(GenICode.scala:1011)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.scala$$tools$$nsc$$backend$$icode$$GenICode$$ICodePhase$$$$genLoad(GenICode.scala:653)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.scala$$tools$$nsc$$backend$$icode$$GenICode$$ICodePhase$$$$genLoad(GenICode.scala:858)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.scala$$tools$$nsc$$backend$$icode$$GenICode$$ICodePhase$$$$genLoad(GenICode.scala:850)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.genLoadArguments(GenICode.scala:1011)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.scala$$tools$$nsc$$backend$$icode$$GenICode$$ICodePhase$$$$genLoad(GenICode.scala:732)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.genLoadArguments(GenICode.scala:1011)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.scala$$tools$$nsc$$backend$$icode$$GenICode$$ICodePhase$$$$genLoad(GenICode.scala:732)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.gen(GenICode.scala:130)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase$$$$anonfun$$gen$$1.apply(GenICode.scala:87)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase$$$$anonfun$$gen$$1.apply(GenICode.scala:87)
	at scala.collection.LinearSeqLike$$class.foreach(LinearSeqLike.scala:97)
	at scala.collection.immutable.List.foreach(List.scala:46)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.gen(GenICode.scala:87)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.gen(GenICode.scala:152)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.gen(GenICode.scala:106)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase$$$$anonfun$$gen$$1.apply(GenICode.scala:87)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase$$$$anonfun$$gen$$1.apply(GenICode.scala:87)
	at scala.collection.LinearSeqLike$$class.foreach(LinearSeqLike.scala:97)
	at scala.collection.immutable.List.foreach(List.scala:46)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.gen(GenICode.scala:87)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.gen(GenICode.scala:97)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.gen(GenICode.scala:83)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.apply(GenICode.scala:79)
	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$applyPhase$$1.apply(Global.scala:281)
	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$applyPhase$$1.apply(Global.scala:281)
	at scala.tools.nsc.reporters.Reporter.withSource(Reporter.scala:48)
	at scala.tools.nsc.Global$$GlobalPhase.applyPhase(Global.scala:281)
	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:259)
	at scala.tools.nsc.Global$$GlobalPhase$$$$anonfun$$run$$1.apply(Global.scala:259)
	at scala.collection.Iterator$$class.foreach(Iterator.scala:582)
	at scala.collection.mutable.ListBuffer$$$$anon$$1.foreach(ListBuffer.scala:285)
	at scala.tools.nsc.Global$$GlobalPhase.run(Global.scala:259)
	at scala.tools.nsc.backend.icode.GenICode$$ICodePhase.run(GenICode.scala:72)
	at scala.tools.nsc.Global$$Run.compileSources(Global.scala:749)
	at scala.tools.nsc.Global$$Run.compile(Global.scala:839)
	at scala.tools.nsc.Main$$.process(Main.scala:110)
	at scala.tools.nsc.Main$$.main(Main.scala:124)
	at scala.tools.nsc.Main.main(Main.scala)
{code}

The workaround is to put the shift/flatMap pair in a named function

{code}
$$ cat test2.scala
object ShiftReset {
  import scala.continuations.ControlContext._

  def shflatMap[A, B, C](xs : List[A]) = shift(xs.flatMap[B, List[B]])

  def main(args : Array[String]) {
   println(reset {
     val x = shflatMap[Int, Int, Int](List(1,2,3))
     List(x + 2)
   })
  }
}
{code}
{code}
$$ scalac -classpath continuations/build/build.library -Xplugin:continuations/build/pack/selectivecps-plugin.jar test2.scala
{code}
{code}
$$ scala -classpath .:continuations/build/build.library ShiftReset
List(3, 4, 5)
{code}
