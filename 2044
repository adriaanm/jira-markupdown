The spec should only allow private members to be imported when it makes sense - i.e., when they are accessible.
I've hit the following variant of this bug:
{code}
scala> object Foo {
     | private def println(x: Any) {}
     | }
defined module Foo

scala> import Foo._
import Foo._

scala> println(1)
<console>:12: error: method println in object Foo cannot be accessed in object Foo
              println(1)
              ^
{code}

Getting compile errors from private members violates the principle of encapsulation: adding a private member to a class cannot be allowed to affect code where that member is not accessible.
