Fix:

In Erasure.scala add
```scala
  private def isArraySuper(sym: Symbol) =
    (RandomAccessSeqMutableClass isNonBottomSubClass sym) && (sym != ObjectClass)
```

With appropriate symbol constant in definitions and nme. isArraySuper replaces isSeqClass, and is exactly like isSeqClass except it checks that sym is a super type of RandomAccessSeq.Mutable rather than Seq (XXX: would be nice to take this directly from BoxedArray, but I understand why its info wouldn't be available). Now, replace all instances in Erasure with isSeqClass with isArarySuper. Thats it. 

Here is my test case which will prevent this from breaking in the future (hopefully):
```scala

object ArrayCastTest 
{
   val a = Array(10)
   def main(args : Array[String]) : Unit = {
     val a = this.a
     Console.println("is object - " + (a:AnyRef).isInstanceOf[Object])
     Console.println("is seq - " + (a:AnyRef).isInstanceOf[Seq[_]])
     Console.println("is collection - " + (a:AnyRef).isInstanceOf[Collection[_]])
     Console.println("is random-access-seq - " + (a:AnyRef).isInstanceOf[RandomAccessSeq[_]])
     Console.println("is random-access-seq-mutable - " + (a:AnyRef).isInstanceOf[RandomAccessSeq.Mutable[_]])
     Console.println("not string - " + !(a:AnyRef).isInstanceOf[String])
     Console.println("not list - " + !(a:AnyRef).isInstanceOf[List[_]])
     try {
       Console.println((a:AnyRef).asInstanceOf[Object])
     } catch { case ex : ClassCastException => Console.println("Bad, arrays should be objects") }
     try {
       Console.println((a:AnyRef).asInstanceOf[Seq[_]])
     } catch { case ex : ClassCastException => Console.println("Bad, arrays should be seqs") }
     try {
       Console.println((a:AnyRef).asInstanceOf[Collection[_]])
     } catch { case ex : ClassCastException => Console.println("Bad, arrays should be collections") }
     try {
       Console.println((a:AnyRef).asInstanceOf[RandomAccessSeq[_]])
     } catch { case ex : ClassCastException => Console.println("Bad, arrays should be random access seqs") }
     try {
       Console.println((a:AnyRef).asInstanceOf[RandomAccessSeq.Mutable[_]])
     } catch { case ex : ClassCastException => Console.println("Bad, arrays should be mutable random access seqs") }
     try {
       Console.println("not expected: " + (a:AnyRef).asInstanceOf[List[_]])
     } catch { case ex : ClassCastException => Console.println("Good, arrays are not lists") }
     try {
       Console.println("not expected: " + (a:AnyRef).asInstanceOf[runtime.RichString])
       throw new Error("not expected")
     } catch { case ex : ClassCastException => Console.println("Good, arrays are not rich strings") }
     
   }
}
```
