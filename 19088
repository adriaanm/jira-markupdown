I encountered java.lang.AssertionError, when I compile my project [slick-pg](https://github.com/tminglei/slick-pg).

Here's related [change](https://github.com/tminglei/slick-pg/commit/7e3976d854be9287159acfe950afb6e3cef9d519) / (https://github.com/tminglei/slick-pg/commit/8e172a8de8cecc56aa9c5eaf9ba97a74b51b4026),

and related codes:
{code:title=src/test/scala/com/github/tminglei/slickpg/PgAggFunctionTest.scala}
   @Test
  def testAggFunctions(): Unit = {
    db withSession { implicit session: Session =>
      import PgAggregateFunctions._

      ///
      tabs ++= Seq(
        Tab("foo", 1, 103.05, 179.17),
        Tab("quux", 3, 57.39, 99.07),
        Tab("bar", 2, 35.89, 101.33),
        Tab("bar", 11, 73.75, 28.57)
      )

      val q = tabs.map(t => (t.name ^: StringAgg(",").forDistinct().orderBy(t.name), t.count ^: Avg[Int]))
      println(s"q = ${q.selectStatement}")
      assertEquals(("bar,foo,quux", 4), q.first)

      val q1 = tabs.map(t => (t.y, t.x) ^: Corr())
      println(s"q = ${q1.selectStatement}")
      assertEquals(0.45, q1.first, 0.01)
    }
  }
{code}

Here's the exception output:
{code}
> test:compile
[info] Compiling 9 Scala sources to /MySpace/Workspace/repos/slick-pg/target/scala-2.10/test-classes...
[error] uncaught exception during compilation: java.lang.AssertionError
[trace] Stack trace suppressed: run last slick-pg/test:compile for the full output.
[error] (slick-pg/test:compile) java.lang.AssertionError: assertion failed: 
[error]      while compiling: /MySpace/Workspace/repos/slick-pg/src/test/scala/com/github/tminglei/slickpg/PgAggFunctionTest.scala
[error]         during phase: erasure
[error]      library version: version 2.10.3
[error]     compiler version: version 2.10.3
[error]   reconstructed args: -bootclasspath /usr/lib64/icedtea7/jre/lib/resources.jar:/usr/lib64/icedtea7/jre/lib/rt.jar:/usr/lib64/icedtea7/jre/lib/sunrsasign.jar:/usr/lib64/icedtea7/jre/lib/jsse.jar:/usr/lib64/icedtea7/jre/lib/jce.jar:/usr/lib64/icedtea7/jre/lib/charsets.jar:/usr/lib64/icedtea7/jre/lib/netx.jar:/usr/lib64/icedtea7/jre/lib/plugin.jar:/usr/lib64/icedtea7/jre/lib/rhino.jar:/usr/lib64/icedtea7/jre/lib/jfr.jar:/usr/lib64/icedtea7/jre/classes:/home/tminglei/.sbt/boot/scala-2.10.3/lib/scala-library.jar -deprecation -language:implicitConversions -language:reflectiveCalls -language:higherKinds -language:postfixOps -feature -classpath /MySpace/Workspace/repos/slick-pg/target/scala-2.10/test-classes:/MySpace/Workspace/repos/slick-pg/target/scala-2.10/classes:/MySpace/Workspace/repos/slick-pg/core/target/scala-2.10/classes:/home/tminglei/.sbt/boot/scala-2.10.3/lib/scala-reflect.jar:/home/tminglei/.m2/repository/com/typesafe/slick/slick_2.10/2.1.0-SNAPSHOT/slick_2.10-2.1.0-SNAPSHOT.jar:/home/tminglei/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.6.4.jar:/home/tminglei/.ivy2/cache/org.postgresql/postgresql/jars/postgresql-9.3-1100-jdbc41.jar:/home/tminglei/.ivy2/cache/junit/junit/jars/junit-4.11.jar:/home/tminglei/.ivy2/cache/org.hamcrest/hamcrest-core/jars/hamcrest-core-1.3.jar:/home/tminglei/.ivy2/cache/com.novocode/junit-interface/jars/junit-interface-0.10.jar:/home/tminglei/.ivy2/cache/junit/junit-dep/jars/junit-dep-4.10.jar:/home/tminglei/.ivy2/cache/org.scala-tools.testing/test-interface/jars/test-interface-0.5.jar
[error] 
[error]   last tree to typer: TypeTree(trait DDL)
[error]               symbol: trait DDL in trait SqlProfile (flags: <interface> abstract <trait> <lateinterface>)
[error]    symbol definition: abstract trait DDL extends SqlProfile.this.SchemaDescriptionDef
[error]                  tpe: slick.profile.SqlProfile#DDL
[error]        symbol owners: trait DDL -> trait SqlProfile -> package profile
[error]       context owners: value x$2 -> method apply -> anonymous class $anonfun -> value q -> method apply -> anonymous class $anonfun -> method testAggFunctions -> class PgAggFunctionTest -> package slickpg
[error] 
[error] == Enclosing template or block ==
[error] 
[error] DefDef( // final def apply(t: PgAggFunctionTest.this.Tabs): (scala.slick.lifted.Column[String], scala.slick.lifted.Column[Int])
[error]   <method> final
[error]   "apply"
[error]   []
[error]   // 1 parameter list
[error]   ValDef( // t: PgAggFunctionTest.this.Tabs
[error]     <param> <triedcooking>
[error]     "t"
[error]     <tpt> // tree.tpe=com.github.tminglei.slickpg.PgAggFunctionTest#Tabs
[error]     <empty>
[error]   )
[error]   <tpt> // tree.tpe=Tuple2
[error]   Apply( // def <init>(_1: T1,_2: T2): (T1, T2) in class Tuple2, tree.tpe=(scala.slick.lifted.Column[String], scala.slick.lifted.Column[Int])
[error]     new Tuple2."<init>" // def <init>(_1: T1,_2: T2): (T1, T2) in class Tuple2
[error]     // 2 arguments
[error]     Block( // tree.tpe=scala.slick.lifted.Column[String]
[error]       ValDef( // val x$2: scala.slick.lifted.Column[String]
[error]         <synthetic> <triedcooking>
[error]         "x$2"
[error]         <tpt> // tree.tpe=slick.lifted.Column
[error]         Apply( // def name(): scala.slick.lifted.Column[String] in class Tabs
[error]           "t"."name" // def name(): scala.slick.lifted.Column[String] in class Tabs
[error]           Nil
[error]         )
[error]       )
[error]       Apply( // def ^:[P1, PR](expr: scala.slick.lifted.Column[P1],implicit tm: scala.slick.jdbc.JdbcType[R],implicit om: scala.slick.lifted.OptionMapper2[T,T,R,P1,P1,PR]): scala.slick.lifted.Column[PR] in trait UnaryAggFunction, tree.tpe=scala.slick.lifted.Column[String]
[error]         TypeApply( // def ^:[P1, PR](expr: scala.slick.lifted.Column[P1],implicit tm: scala.slick.jdbc.JdbcType[R],implicit om: scala.slick.lifted.OptionMapper2[T,T,R,P1,P1,PR]): scala.slick.lifted.Column[PR] in trait UnaryAggFunction, tree.tpe=(expr: scala.slick.lifted.Column[String], implicit tm: scala.slick.jdbc.JdbcType[String], implicit om: scala.slick.lifted.OptionMapper2[String,String,String,String,String,String])scala.slick.lifted.Column[String]
[error]           new com.github.tminglei.slickpg.agg.PgAggregateExtensions#PgAggregateFunctions#StringAgg(slickpg.this.MyPostgresDriver.simple.PgAggregateFunctions, ",").forDistinct().orderBy(MyPostgresDriver.simple().columnToOrdered[String](t.name()))."$up$colon" // def ^:[P1, PR](expr: scala.slick.lifted.Column[P1],implicit tm: scala.slick.jdbc.JdbcType[R],implicit om: scala.slick.lifted.OptionMapper2[T,T,R,P1,P1,PR]): scala.slick.lifted.Column[PR] in trait UnaryAggFunction, tree.tpe=[P1, PR](expr: scala.slick.lifted.Column[P1], implicit tm: scala.slick.jdbc.JdbcType[String], implicit om: scala.slick.lifted.OptionMapper2[String,String,String,P1,P1,PR])scala.slick.lifted.Column[PR]
[error]           // 2 type arguments
[error]           <tpt> // tree.tpe=String
[error]           <tpt> // tree.tpe=String
[error]         )
[error]         // 3 arguments
[error]         "x$2" // val x$2: scala.slick.lifted.Column[String], tree.tpe=scala.slick.lifted.Column[String]
[error]         Apply( // implicit def stringColumnType(): JdbcTypesComponent.this.columnTypes.StringJdbcType in trait ImplicitColumnTypes, tree.tpe=com.github.tminglei.slickpg.MyPostgresDriver.columnTypes.StringJdbcType
[error]           MyPostgresDriver.simple()."stringColumnType" // implicit def stringColumnType(): JdbcTypesComponent.this.columnTypes.StringJdbcType in trait ImplicitColumnTypes, tree.tpe=()com.github.tminglei.slickpg.MyPostgresDriver.columnTypes.StringJdbcType
[error]           Nil
[error]         )
[error]         Apply( // implicit def getOptionMapper2TT[B1, B2, BR](evidence$1: scala.slick.ast.BaseTypedType[B2]): scala.slick.lifted.OptionMapper2[B1,B2,BR,B1,B2,BR] in object OptionMapper2, tree.tpe=scala.slick.lifted.OptionMapper2[String,String,String,String,String,String]
[error]           TypeApply( // implicit def getOptionMapper2TT[B1, B2, BR](evidence$1: scala.slick.ast.BaseTypedType[B2]): scala.slick.lifted.OptionMapper2[B1,B2,BR,B1,B2,BR] in object OptionMapper2, tree.tpe=(evidence$1: scala.slick.ast.BaseTypedType[String])scala.slick.lifted.OptionMapper2[String,String,String,String,String,String]
[error]             lifted.this."OptionMapper2"."getOptionMapper2TT" // implicit def getOptionMapper2TT[B1, B2, BR](evidence$1: scala.slick.ast.BaseTypedType[B2]): scala.slick.lifted.OptionMapper2[B1,B2,BR,B1,B2,BR] in object OptionMapper2, tree.tpe=[B1, B2, BR](evidence$1: scala.slick.ast.BaseTypedType[B2])scala.slick.lifted.OptionMapper2[B1,B2,BR,B1,B2,BR]
[error]             // 3 type arguments
[error]             <tpt> // tree.tpe=String
[error]             <tpt> // tree.tpe=String
[error]             <tpt> // tree.tpe=String
[error]           )
[error]           Apply( // implicit def stringColumnType(): JdbcTypesComponent.this.columnTypes.StringJdbcType in trait ImplicitColumnTypes, tree.tpe=com.github.tminglei.slickpg.MyPostgresDriver.columnTypes.StringJdbcType
[error]             MyPostgresDriver.simple()."stringColumnType" // implicit def stringColumnType(): JdbcTypesComponent.this.columnTypes.StringJdbcType in trait ImplicitColumnTypes, tree.tpe=()com.github.tminglei.slickpg.MyPostgresDriver.columnTypes.StringJdbcType
[error]             Nil
[error]           )
[error]         )
[error]       )
[error]     )
[error]     Block( // tree.tpe=scala.slick.lifted.Column[Int]
[error]       ValDef( // val x$3: scala.slick.lifted.Column[Int]
[error]         <synthetic> <triedcooking>
[error]         "x$3"
[error]         <tpt> // tree.tpe=scala.slick.lifted.Column[Int]
[error]         Apply( // def count(): scala.slick.lifted.Column[Int] in class Tabs, tree.tpe=scala.slick.lifted.Column[Int]
[error]           "t"."count" // def count(): scala.slick.lifted.Column[Int] in class Tabs, tree.tpe=()scala.slick.lifted.Column[Int]
[error]           Nil
[error]         )
[error]       )
[error]       Apply( // def ^:[P1, PR](expr: scala.slick.lifted.Column[P1],implicit tm: scala.slick.jdbc.JdbcType[R],implicit om: scala.slick.lifted.OptionMapper2[T,T,R,P1,P1,PR]): scala.slick.lifted.Column[PR] in trait UnaryAggFunction, tree.tpe=scala.slick.lifted.Column[Int]
[error]         TypeApply( // def ^:[P1, PR](expr: scala.slick.lifted.Column[P1],implicit tm: scala.slick.jdbc.JdbcType[R],implicit om: scala.slick.lifted.OptionMapper2[T,T,R,P1,P1,PR]): scala.slick.lifted.Column[PR] in trait UnaryAggFunction, tree.tpe=(expr: scala.slick.lifted.Column[Int], implicit tm: scala.slick.jdbc.JdbcType[Int], implicit om: scala.slick.lifted.OptionMapper2[Int,Int,Int,Int,Int,Int])scala.slick.lifted.Column[Int]
[error]           new com.github.tminglei.slickpg.MyPostgresDriver.simple.PgAggregateFunctions.Avg[Int](slickpg.this.MyPostgresDriver.simple.PgAggregateFunctions)."$up$colon" // def ^:[P1, PR](expr: scala.slick.lifted.Column[P1],implicit tm: scala.slick.jdbc.JdbcType[R],implicit om: scala.slick.lifted.OptionMapper2[T,T,R,P1,P1,PR]): scala.slick.lifted.Column[PR] in trait UnaryAggFunction, tree.tpe=[P1, PR](expr: scala.slick.lifted.Column[P1], implicit tm: scala.slick.jdbc.JdbcType[Int], implicit om: scala.slick.lifted.OptionMapper2[Int,Int,Int,P1,P1,PR])scala.slick.lifted.Column[PR]
[error]           // 2 type arguments
[error]           <tpt> // tree.tpe=Int
[error]           <tpt> // tree.tpe=Int
[error]         )
[error]         // 3 arguments
[error]         "x$3" // val x$3: scala.slick.lifted.Column[Int], tree.tpe=scala.slick.lifted.Column[Int]
[error]         Apply( // implicit def intColumnType(): JdbcTypesComponent.this.columnTypes.IntJdbcType in trait ImplicitColumnTypes, tree.tpe=com.github.tminglei.slickpg.MyPostgresDriver.columnTypes.IntJdbcType
[error]           MyPostgresDriver.simple()."intColumnType" // implicit def intColumnType(): JdbcTypesComponent.this.columnTypes.IntJdbcType in trait ImplicitColumnTypes, tree.tpe=()com.github.tminglei.slickpg.MyPostgresDriver.columnTypes.IntJdbcType
[error]           Nil
[error]         )
[error]         Apply( // implicit def getOptionMapper2TT[B1, B2, BR](evidence$1: scala.slick.ast.BaseTypedType[B2]): scala.slick.lifted.OptionMapper2[B1,B2,BR,B1,B2,BR] in object OptionMapper2, tree.tpe=scala.slick.lifted.OptionMapper2[Int,Int,Int,Int,Int,Int]
[error]           TypeApply( // implicit def getOptionMapper2TT[B1, B2, BR](evidence$1: scala.slick.ast.BaseTypedType[B2]): scala.slick.lifted.OptionMapper2[B1,B2,BR,B1,B2,BR] in object OptionMapper2, tree.tpe=(evidence$1: scala.slick.ast.BaseTypedType[Int])scala.slick.lifted.OptionMapper2[Int,Int,Int,Int,Int,Int]
[error]             lifted.this."OptionMapper2"."getOptionMapper2TT" // implicit def getOptionMapper2TT[B1, B2, BR](evidence$1: scala.slick.ast.BaseTypedType[B2]): scala.slick.lifted.OptionMapper2[B1,B2,BR,B1,B2,BR] in object OptionMapper2, tree.tpe=[B1, B2, BR](evidence$1: scala.slick.ast.BaseTypedType[B2])scala.slick.lifted.OptionMapper2[B1,B2,BR,B1,B2,BR]
[error]             // 3 type arguments
[error]             <tpt> // tree.tpe=Int
[error]             <tpt> // tree.tpe=Int
[error]             <tpt> // tree.tpe=Int
[error]           )
[error]           Apply( // implicit def intColumnType(): JdbcTypesComponent.this.columnTypes.IntJdbcType in trait ImplicitColumnTypes, tree.tpe=com.github.tminglei.slickpg.MyPostgresDriver.columnTypes.IntJdbcType
[error]             MyPostgresDriver.simple()."intColumnType" // implicit def intColumnType(): JdbcTypesComponent.this.columnTypes.IntJdbcType in trait ImplicitColumnTypes, tree.tpe=()com.github.tminglei.slickpg.MyPostgresDriver.columnTypes.IntJdbcType
[error]             Nil
[error]           )
[error]         )
[error]       )
[error]     )
[error]   )
[error] )
[error] 
[error] == Expanded type of tree ==
[error] 
[error] TypeRef(
[error]   pre = TypeRef(
[error]     TypeSymbol(
[error]       abstract trait SqlProfile extends RelationalProfile with SqlExecutorComponent with SqlTableComponent
[error]       
[error]     )
[error]   )
[error]   TypeSymbol(
[error]     abstract trait DDL extends SqlProfile.this.SchemaDescriptionDef
[error]   )
[error] )
[error] 
[error] object PgAggregateFunctions
[error] Total time: 37 s, completed May 1, 2014 4:39:30 PM
{code}

What's wrong? Can you tell me what shall I do?
