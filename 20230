A private extension method value class triggers unused warning:
```scala
final class Foo {
  import Foo._

  def f(x: Int): Int = x.frob
}

object Foo {
  private implicit class Frobnicator(val i: Int) extends AnyVal {
    def frob: Int = i + 1729
  }
}
```
```
> scalac -Ywarn-unused -Xprint:typer Foo.scala
Foo.scala:8: warning: private object in object Foo is never used
  private implicit class Frobnicator(val i: Int) extends AnyVal {
                         ^
[[syntax trees at end of                     typer]] // Foo.scala
package <empty> {
  final class Foo extends scala.AnyRef {
    def <init>(): Foo = {
      Foo.super.<init>();
      ()
    };
    import Foo._;
    def f(x: Int): Int = Foo.Frobnicator(x).frob
  };
  object Foo extends scala.AnyRef {
    def <init>(): Foo.type = {
      Foo.super.<init>();
      ()
    };
    final implicit private class Frobnicator extends scala.AnyVal {
      <paramaccessor> private[this] val i: Int = _;
      <stable> <accessor> <paramaccessor> def i: Int = Frobnicator.this.i;
      def <init>(i: Int): Foo.Frobnicator = {
        Frobnicator.super.<init>();
        ()
      };
      def frob: Int = Frobnicator.this.i.+(1729);
      override <synthetic> def hashCode(): Int = Frobnicator.this.i.hashCode();
      override <synthetic> def equals(x$1: Any): Boolean = x$1 match {
  case (_: Foo.Frobnicator) => true
  case _ => false
}.&&({
        <synthetic> val Frobnicator$1: Foo.Frobnicator = x$1.asInstanceOf[Foo.Frobnicator];
        Frobnicator.this.i.==(Frobnicator$1.i)
      })
    };
    <synthetic> private object Frobnicator extends AnyRef {  // *** this triggers the unused warning
      def <init>(): Foo.Frobnicator.type = {
        Frobnicator.super.<init>();
        ()
      }
    };
    implicit <synthetic> private def Frobnicator(i: Int): Foo.Frobnicator = new Frobnicator(i)
  }
}

one warning found
```
