```scala
/*
 * Bug: Compiler does not raise error when overriding empty-paren method with field.
 *
 * Tested against:
 * Scala Eclipse plug-in nightly of 2010-03-03
 * Version: 2.8.0.r21030-b20100302035619
 */

object BugValOverridesEmptyParen extends Application {
	
	abstract class C { 
		def a: Unit
		def b(): Unit
	}
	
	// an implementation class
	class D extends C {
		val a = ()	// implements a parameterless method with a val, works, expected.
		
		val b = ()	// tries to implement an empty-paren method with a val. (invalid)
					// EXPECTED: Compile-error!
					// BEHAVIOUR: It succeeds and breaks the type-contract of C in D.		
	}
	
	val d = new D
	
	println (d.isInstanceOf[C]) // prints "true" 
	
	d.b()		// 	-> compile error ("c does not take parameters"), 
				//     The contract of supertype C is obviously broken!!
				//     Expected in relation to (1) but not to (3). 

	// Obviously this breaks type-safety. I've noticed this in Scala 2.7.7
	// as well.
	
	// If we cast d explicitly to C, we can even access the magically overridden method.
	val d_as_C = (new D).asInstanceOf[C]
	
	d_as_C.b()	// no error

	/* Related literature:
	 * 
	 * - Programming in Scala, Odersky et al. page 212
	 * (In fact, this *breaks* the Uniform Access principle).
	 * 
	 * - The Scala Language Specification, page 54, par. 5.1.4
	 * However, I couldn't find the case of a field overriding a parameterless method 
	 * there.  
	 */
}
```
